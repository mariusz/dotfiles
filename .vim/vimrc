set nocompatible
filetype off

" Plugins
call plug#begin()
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-markdown'
Plug 'msanders/snipmate.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'mattn/emmet-vim'
Plug 'duff/vim-scratch'
Plug 'godlygeek/tabular'
Plug 'ddollar/nerdcommenter'
Plug 'altercation/vim-colors-solarized'
Plug 'nanotech/jellybeans.vim'
Plug 'tpope/vim-abolish'
Plug 'vim-scripts/matchit.zip'
Plug 'sickill/vim-pasta'
Plug 'juvenn/mustache.vim'
Plug 'vim-scripts/Rainbow-Parenthesis'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'Lokaltog/powerline'
Plug 'vim-scripts/candycode.vim'
Plug 'slim-template/vim-slim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dkprice/vim-easygrep'
Plug 'zivyangll/git-blame.vim'
Plug 'preservim/nerdtree'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
call plug#end()

" Setting up Powerline
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim

" Syntax & colors
syntax on
set background=dark
colors candycode

" In case you want different theme for
" the non-GUI Vim.
if !has("gui_running")
  colors candycode
endif

" Tabs
set tabstop=2
set shiftwidth=2
set shiftround
set softtabstop=2
set expandtab

" Ack
set grepprg=rak

" Encoding
set encoding=utf-8

" Searching
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch

" Handle long lines
set wrap
set textwidth=79
set formatoptions=qrn1
" set colorcolumn=81

" Moving around
nmap j gj
nmap k gk

" F1 annoyance
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" jj
imap jj <Esc>

" ; == :
nnoremap ; :

" Save on tab-out
au FocusLost * :wa

" Split windows
nmap <leader>w <C-w>v<C-w>1
nmap <D-w> <C-w>v<C-w>1<CR>
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Folding settings
set foldmethod=indent   "indent based on syntax
set foldnestmax=3       "deepest fold is 3 levels
set foldlevel=3
set nofoldenable        "dont fold by default

" Show line numbering and current line
set number
set numberwidth=4
set cursorline

set lazyredraw " no redraw when running macros

" Status line
set statusline=%f "tail of the filename
set statusline+=\ 
"set statusline+=%h      "help file flag
set statusline+=%y      "filetype
set statusline+=%r      "read only flag
set statusline+=%1*%m%*      "modified flag
set statusline+=%{FugitiveStatusline()} "Git status
set statusline+=%=      "left/right aligned items separated
set statusline+=%#warningmsg#
set statusline+=%*\ 
set statusline+=%-10.(%l,%c%V%)\ %P "ruler

" Sane backspace behaviour
set backspace=indent,eol,start

" These file are ruby!
au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru,Rules} set ft=ruby

" ...and these are CoffeeScript!
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab

" ...and these are Mustache!
au BufNewFile,BufReadPost *.mustache.erb set ft=mustache

" ...and these are Jade!
au BufNewFile,BufReadPost *.jade set ft=jade
au BufNewFile,BufReadPost *.styl set ft=stylus

" ...and these are Go!
au BufRead,BufNewFile *.go set filetype=go

" Leader key
let mapleader=","

" Backup & swaps
set nobackup
set noswapfile
set nowritebackup
set directory=~/.vim/tmp

" Command-T
map <silent> <D-t> <ESC>:CtrlP<CR>

" Move line(s) of text using Alt+j/k
nmap <silent> <A-j> :m+<CR>==
nmap <silent> <A-k> :m-2<CR>==
imap <silent> <A-j> <Esc>:m+<CR>==gi
imap <silent> <A-k> <Esc>:m-2<CR>==gi
vmap <silent> <A-j> :m'>+<CR>gv=gv
vmap <silent> <A-k> :m-2<CR>gv=gv

" Preserve selection when indenting
vmap > >gv
vmap < <gv

" Indenting with Cmd + [ and ]
nmap <D-[> <<
nmap <D-]> >>
nmap <D-h> <<
nmap <D-l> >>
vmap <D-[> <gv
vmap <D-]> >gv
imap <D-[> <ESC><<gi
imap <D-]> <ESC>>>gi

" Remove the annoying icons - we should use keyboard anyway!
if has("gui_running")
    set guioptions=egmrt
endif

" Less CSS is awesome.
au BufNewFile,BufRead *.less set filetype=less
au BufNewFile,BufRead *.coffee set filetype=coffee

if has("gui_running") && system('ps xw | grep "Vim -psn" | grep -vc grep') > 0
  " Get the value of $PATH from a login shell.
  " If your shell is not on this list, it may be just because we have not
  " tested it.  Try adding it to the list and see if it works.  If so,
  " please post a note to the vim-mac list!
  if $SHELL =~ '/\(sh\|csh\|bash\|tcsh\|zsh\)$'
    let s:path = system("echo echo VIMPATH'${PATH}' | $SHELL -l")
    let $PATH = matchstr(s:path, 'VIMPATH\zs.\{-}\ze\n')
  endif
endif

"Show invisibles
nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

" Tabular
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

" Capitalize
if (&tildeop)
  nmap gcw guw~l
  nmap gcW guW~l
  nmap gciw guiw~l
  nmap gciW guiW~l
  nmap gcis guis~l
  nmap gc$ gu$~l
  nmap gcgc guu~l
  nmap gcc guu~l
  vmap gc gu~l
else
  nmap gcw guw~h
  nmap gcW guW~h
  nmap gciw guiw~h
  nmap gciW guiW~h
  nmap gcis guis~h
  nmap gc$ gu$~h
  nmap gcgc guu~h
  nmap gcc guu~h
  vmap gc gu~h
endif

vmap <Leader>w :Prefixr<CR>

" Fix indentation of ALL THE ONELINERS!
nmap <leader>= :%s/;\s$/;\r/e<CR>:%s/;}/;\r}/e<CR>gg=G

" ZenCoding
let g:user_zen_settings = {
\  'indentation' : '  ',
\  'php' : {
\    'extends' : 'html',
\    'filters' : 'c',
\  },
\  'xml' : {
\    'extends' : 'html',
\  },
\  'haml' : {
\    'extends' : 'html',
\  },
\  'less' : {
\    'extends' : 'css',
\  },
\  'sass' : {
\    'extends' : 'css',
\  },
\}

let g:user_zen_leader_key = '<D-e>'

let g:use_zen_complete_tag = 1

" Scratch.vim
function! ToggleScratch()
  if expand('%') == g:ScratchBufferName
    quit
  else
    Sscratch
  endif
endfunction

" Ctrl+P settings
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux

let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

map <leader>s :call ToggleScratch()<CR>

if has("gui_macvim")
  let macvim_hig_shift_movement = 1
endif

filetype plugin indent on

" netrw settings
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_winsize = 25
let g:netrw_altv = 1

"Toggle Vexplore
function! ToggleVExplorer()
  if exists("t:expl_buf_num")
      let expl_win_num = bufwinnr(t:expl_buf_num)
      if expl_win_num != -1
          let cur_win_nr = winnr()
          exec expl_win_num . 'wincmd w'
          close
          exec cur_win_nr . 'wincmd w'
          unlet t:expl_buf_num
      else
          unlet t:expl_buf_num
      endif
  else
      exec '1wincmd w'
      Vexplore
      let t:expl_buf_num = bufnr("%")
  endif
endfunction

map <silent> <F7> :call ToggleVExplorer()<CR>
