/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var TfsCoreInterfaces = require("../interfaces/CoreInterfaces");
var VSSInterfaces = require("../interfaces/common/VSSInterfaces");
(function (GitAsyncOperationStatus) {
    GitAsyncOperationStatus[GitAsyncOperationStatus["Queued"] = 1] = "Queued";
    GitAsyncOperationStatus[GitAsyncOperationStatus["InProgress"] = 2] = "InProgress";
    GitAsyncOperationStatus[GitAsyncOperationStatus["Completed"] = 3] = "Completed";
    GitAsyncOperationStatus[GitAsyncOperationStatus["Failed"] = 4] = "Failed";
    GitAsyncOperationStatus[GitAsyncOperationStatus["Abandoned"] = 5] = "Abandoned";
})(exports.GitAsyncOperationStatus || (exports.GitAsyncOperationStatus = {}));
var GitAsyncOperationStatus = exports.GitAsyncOperationStatus;
(function (GitObjectType) {
    GitObjectType[GitObjectType["Bad"] = 0] = "Bad";
    GitObjectType[GitObjectType["Commit"] = 1] = "Commit";
    GitObjectType[GitObjectType["Tree"] = 2] = "Tree";
    GitObjectType[GitObjectType["Blob"] = 3] = "Blob";
    GitObjectType[GitObjectType["Tag"] = 4] = "Tag";
    GitObjectType[GitObjectType["Ext2"] = 5] = "Ext2";
    GitObjectType[GitObjectType["OfsDelta"] = 6] = "OfsDelta";
    GitObjectType[GitObjectType["RefDelta"] = 7] = "RefDelta";
})(exports.GitObjectType || (exports.GitObjectType = {}));
var GitObjectType = exports.GitObjectType;
(function (GitPathActions) {
    GitPathActions[GitPathActions["None"] = 0] = "None";
    GitPathActions[GitPathActions["Edit"] = 1] = "Edit";
    GitPathActions[GitPathActions["Delete"] = 2] = "Delete";
    GitPathActions[GitPathActions["Add"] = 3] = "Add";
    GitPathActions[GitPathActions["Rename"] = 4] = "Rename";
})(exports.GitPathActions || (exports.GitPathActions = {}));
var GitPathActions = exports.GitPathActions;
(function (GitPullRequestCommentStatus) {
    GitPullRequestCommentStatus[GitPullRequestCommentStatus["Unknown"] = 0] = "Unknown";
    GitPullRequestCommentStatus[GitPullRequestCommentStatus["Active"] = 1] = "Active";
    GitPullRequestCommentStatus[GitPullRequestCommentStatus["Fixed"] = 2] = "Fixed";
    GitPullRequestCommentStatus[GitPullRequestCommentStatus["WontFix"] = 3] = "WontFix";
    GitPullRequestCommentStatus[GitPullRequestCommentStatus["Closed"] = 4] = "Closed";
    GitPullRequestCommentStatus[GitPullRequestCommentStatus["ByDesign"] = 5] = "ByDesign";
    GitPullRequestCommentStatus[GitPullRequestCommentStatus["Pending"] = 6] = "Pending";
})(exports.GitPullRequestCommentStatus || (exports.GitPullRequestCommentStatus = {}));
var GitPullRequestCommentStatus = exports.GitPullRequestCommentStatus;
(function (GitPullRequestCommentType) {
    /**
     * The comment type is not known.
     */
    GitPullRequestCommentType[GitPullRequestCommentType["Unknown"] = 0] = "Unknown";
    /**
     * This is a regular user comment.
     */
    GitPullRequestCommentType[GitPullRequestCommentType["Text"] = 1] = "Text";
    /**
     * The comment comes as a result of a code change.
     */
    GitPullRequestCommentType[GitPullRequestCommentType["CodeChange"] = 2] = "CodeChange";
    /**
     * The comment represents a system message.
     */
    GitPullRequestCommentType[GitPullRequestCommentType["System"] = 3] = "System";
})(exports.GitPullRequestCommentType || (exports.GitPullRequestCommentType = {}));
var GitPullRequestCommentType = exports.GitPullRequestCommentType;
(function (GitPullRequestQueryType) {
    /**
     * No query type set
     */
    GitPullRequestQueryType[GitPullRequestQueryType["NotSet"] = 0] = "NotSet";
    /**
     * search by merge commit
     */
    GitPullRequestQueryType[GitPullRequestQueryType["LastMergeCommit"] = 1] = "LastMergeCommit";
    /**
     * search by commit
     */
    GitPullRequestQueryType[GitPullRequestQueryType["Commit"] = 2] = "Commit";
})(exports.GitPullRequestQueryType || (exports.GitPullRequestQueryType = {}));
var GitPullRequestQueryType = exports.GitPullRequestQueryType;
(function (GitPullRequestReviewFileType) {
    GitPullRequestReviewFileType[GitPullRequestReviewFileType["ChangeEntry"] = 0] = "ChangeEntry";
    GitPullRequestReviewFileType[GitPullRequestReviewFileType["Attachment"] = 1] = "Attachment";
})(exports.GitPullRequestReviewFileType || (exports.GitPullRequestReviewFileType = {}));
var GitPullRequestReviewFileType = exports.GitPullRequestReviewFileType;
(function (GitRefUpdateMode) {
    /**
     * Indicates the Git protocol model where any refs that can be updated will be updated, but any failures will not prevent other updates from succeeding.
     */
    GitRefUpdateMode[GitRefUpdateMode["BestEffort"] = 0] = "BestEffort";
    /**
     * Indicates that all ref updates must succeed or none will succeed. All ref updates will be atomically written. If any failure is encountered, previously successful updates will be rolled back and the entire operation will fail.
     */
    GitRefUpdateMode[GitRefUpdateMode["AllOrNone"] = 1] = "AllOrNone";
})(exports.GitRefUpdateMode || (exports.GitRefUpdateMode = {}));
var GitRefUpdateMode = exports.GitRefUpdateMode;
(function (GitRefUpdateStatus) {
    /**
     * Indicates that the ref update request was completed successfully.
     */
    GitRefUpdateStatus[GitRefUpdateStatus["Succeeded"] = 0] = "Succeeded";
    /**
     * Indicates that the ref update request could not be completed because part of the graph would be disconnected by this change, and the caller does not have ForcePush permission on the repository.
     */
    GitRefUpdateStatus[GitRefUpdateStatus["ForcePushRequired"] = 1] = "ForcePushRequired";
    /**
     * Indicates that the ref update request could not be completed because the old object ID presented in the request was not the object ID of the ref when the database attempted the update. The most likely scenario is that the caller lost a race to update the ref.
     */
    GitRefUpdateStatus[GitRefUpdateStatus["StaleOldObjectId"] = 2] = "StaleOldObjectId";
    /**
     * Indicates that the ref update request could not be completed because the ref name presented in the request was not valid.
     */
    GitRefUpdateStatus[GitRefUpdateStatus["InvalidRefName"] = 3] = "InvalidRefName";
    /**
     * The request was not processed
     */
    GitRefUpdateStatus[GitRefUpdateStatus["Unprocessed"] = 4] = "Unprocessed";
    /**
     * The ref update request could not be completed because the new object ID for the ref could not be resolved to a commit object (potentially through any number of tags)
     */
    GitRefUpdateStatus[GitRefUpdateStatus["UnresolvableToCommit"] = 5] = "UnresolvableToCommit";
    /**
     * The ref update request could not be completed because the user lacks write permissions required to write this ref
     */
    GitRefUpdateStatus[GitRefUpdateStatus["WritePermissionRequired"] = 6] = "WritePermissionRequired";
    /**
     * The ref update request could not be completed because the user lacks note creation permissions required to write this note
     */
    GitRefUpdateStatus[GitRefUpdateStatus["ManageNotePermissionRequired"] = 7] = "ManageNotePermissionRequired";
    /**
     * The ref update request could not be completed because the user lacks the permission to create a branch
     */
    GitRefUpdateStatus[GitRefUpdateStatus["CreateBranchPermissionRequired"] = 8] = "CreateBranchPermissionRequired";
    /**
     * The ref update request could not be completed because the user lacks the permission to create a tag
     */
    GitRefUpdateStatus[GitRefUpdateStatus["CreateTagPermissionRequired"] = 9] = "CreateTagPermissionRequired";
    /**
     * The ref update could not be completed because it was rejected by the plugin.
     */
    GitRefUpdateStatus[GitRefUpdateStatus["RejectedByPlugin"] = 10] = "RejectedByPlugin";
    /**
     * The ref update could not be completed because the ref is locked by another user.
     */
    GitRefUpdateStatus[GitRefUpdateStatus["Locked"] = 11] = "Locked";
    /**
     * The ref update could not be completed because, in case-insensitive mode, the ref name conflicts with an existing, differently-cased ref name.
     */
    GitRefUpdateStatus[GitRefUpdateStatus["RefNameConflict"] = 12] = "RefNameConflict";
    /**
     * The ref update could not be completed because it was rejected by policy.
     */
    GitRefUpdateStatus[GitRefUpdateStatus["RejectedByPolicy"] = 13] = "RejectedByPolicy";
    /**
     * Indicates that the ref update request was completed successfully, but the ref doesn't actually exist so no changes were made.  This should only happen during deletes.
     */
    GitRefUpdateStatus[GitRefUpdateStatus["SucceededNonExistentRef"] = 14] = "SucceededNonExistentRef";
    /**
     * Indicates that the ref update request was completed successfully, but the passed-in ref was corrupt - as in, the old object ID was bad.  This should only happen during deletes.
     */
    GitRefUpdateStatus[GitRefUpdateStatus["SucceededCorruptRef"] = 15] = "SucceededCorruptRef";
})(exports.GitRefUpdateStatus || (exports.GitRefUpdateStatus = {}));
var GitRefUpdateStatus = exports.GitRefUpdateStatus;
(function (GitStatusState) {
    GitStatusState[GitStatusState["NotSet"] = 0] = "NotSet";
    GitStatusState[GitStatusState["Pending"] = 1] = "Pending";
    GitStatusState[GitStatusState["Succeeded"] = 2] = "Succeeded";
    GitStatusState[GitStatusState["Failed"] = 3] = "Failed";
    GitStatusState[GitStatusState["Error"] = 4] = "Error";
})(exports.GitStatusState || (exports.GitStatusState = {}));
var GitStatusState = exports.GitStatusState;
(function (GitVersionOptions) {
    /**
     * Not specified
     */
    GitVersionOptions[GitVersionOptions["None"] = 0] = "None";
    /**
     * Commit that changed item prior to the current version
     */
    GitVersionOptions[GitVersionOptions["PreviousChange"] = 1] = "PreviousChange";
    /**
     * First parent of commit (HEAD^)
     */
    GitVersionOptions[GitVersionOptions["FirstParent"] = 2] = "FirstParent";
})(exports.GitVersionOptions || (exports.GitVersionOptions = {}));
var GitVersionOptions = exports.GitVersionOptions;
(function (GitVersionType) {
    /**
     * Interpret the version as a branch name
     */
    GitVersionType[GitVersionType["Branch"] = 0] = "Branch";
    /**
     * Interpret the version as a tag name
     */
    GitVersionType[GitVersionType["Tag"] = 1] = "Tag";
    /**
     * Interpret the version as a commit ID (SHA1)
     */
    GitVersionType[GitVersionType["Commit"] = 2] = "Commit";
    /**
     * Interpret the version as an index name
     */
    GitVersionType[GitVersionType["Index"] = 3] = "Index";
})(exports.GitVersionType || (exports.GitVersionType = {}));
var GitVersionType = exports.GitVersionType;
(function (ItemContentType) {
    ItemContentType[ItemContentType["RawText"] = 0] = "RawText";
    ItemContentType[ItemContentType["Base64Encoded"] = 1] = "Base64Encoded";
})(exports.ItemContentType || (exports.ItemContentType = {}));
var ItemContentType = exports.ItemContentType;
(function (PullRequestAsyncStatus) {
    PullRequestAsyncStatus[PullRequestAsyncStatus["NotSet"] = 0] = "NotSet";
    PullRequestAsyncStatus[PullRequestAsyncStatus["Queued"] = 1] = "Queued";
    PullRequestAsyncStatus[PullRequestAsyncStatus["Conflicts"] = 2] = "Conflicts";
    PullRequestAsyncStatus[PullRequestAsyncStatus["Succeeded"] = 3] = "Succeeded";
    PullRequestAsyncStatus[PullRequestAsyncStatus["RejectedByPolicy"] = 4] = "RejectedByPolicy";
    PullRequestAsyncStatus[PullRequestAsyncStatus["Failure"] = 5] = "Failure";
})(exports.PullRequestAsyncStatus || (exports.PullRequestAsyncStatus = {}));
var PullRequestAsyncStatus = exports.PullRequestAsyncStatus;
(function (PullRequestStatus) {
    PullRequestStatus[PullRequestStatus["NotSet"] = 0] = "NotSet";
    PullRequestStatus[PullRequestStatus["Active"] = 1] = "Active";
    PullRequestStatus[PullRequestStatus["Abandoned"] = 2] = "Abandoned";
    PullRequestStatus[PullRequestStatus["Completed"] = 3] = "Completed";
    PullRequestStatus[PullRequestStatus["All"] = 4] = "All";
})(exports.PullRequestStatus || (exports.PullRequestStatus = {}));
var PullRequestStatus = exports.PullRequestStatus;
(function (RefFavoriteType) {
    RefFavoriteType[RefFavoriteType["Invalid"] = 0] = "Invalid";
    RefFavoriteType[RefFavoriteType["Folder"] = 1] = "Folder";
    RefFavoriteType[RefFavoriteType["Ref"] = 2] = "Ref";
})(exports.RefFavoriteType || (exports.RefFavoriteType = {}));
var RefFavoriteType = exports.RefFavoriteType;
(function (SupportedIdeType) {
    SupportedIdeType[SupportedIdeType["Unknown"] = 0] = "Unknown";
    SupportedIdeType[SupportedIdeType["AndroidStudio"] = 1] = "AndroidStudio";
    SupportedIdeType[SupportedIdeType["AppCode"] = 2] = "AppCode";
    SupportedIdeType[SupportedIdeType["CLion"] = 3] = "CLion";
    SupportedIdeType[SupportedIdeType["DataGrip"] = 4] = "DataGrip";
    SupportedIdeType[SupportedIdeType["IntelliJ"] = 5] = "IntelliJ";
    SupportedIdeType[SupportedIdeType["MPS"] = 6] = "MPS";
    SupportedIdeType[SupportedIdeType["PhpStorm"] = 7] = "PhpStorm";
    SupportedIdeType[SupportedIdeType["PyCharm"] = 8] = "PyCharm";
    SupportedIdeType[SupportedIdeType["RubyMine"] = 9] = "RubyMine";
    SupportedIdeType[SupportedIdeType["Tower"] = 10] = "Tower";
    SupportedIdeType[SupportedIdeType["VisualStudio"] = 11] = "VisualStudio";
    SupportedIdeType[SupportedIdeType["WebStorm"] = 12] = "WebStorm";
})(exports.SupportedIdeType || (exports.SupportedIdeType = {}));
var SupportedIdeType = exports.SupportedIdeType;
(function (TfvcVersionOption) {
    TfvcVersionOption[TfvcVersionOption["None"] = 0] = "None";
    TfvcVersionOption[TfvcVersionOption["Previous"] = 1] = "Previous";
    TfvcVersionOption[TfvcVersionOption["UseRename"] = 2] = "UseRename";
})(exports.TfvcVersionOption || (exports.TfvcVersionOption = {}));
var TfvcVersionOption = exports.TfvcVersionOption;
(function (TfvcVersionType) {
    TfvcVersionType[TfvcVersionType["None"] = 0] = "None";
    TfvcVersionType[TfvcVersionType["Changeset"] = 1] = "Changeset";
    TfvcVersionType[TfvcVersionType["Shelveset"] = 2] = "Shelveset";
    TfvcVersionType[TfvcVersionType["Change"] = 3] = "Change";
    TfvcVersionType[TfvcVersionType["Date"] = 4] = "Date";
    TfvcVersionType[TfvcVersionType["Latest"] = 5] = "Latest";
    TfvcVersionType[TfvcVersionType["Tip"] = 6] = "Tip";
    TfvcVersionType[TfvcVersionType["MergeSource"] = 7] = "MergeSource";
})(exports.TfvcVersionType || (exports.TfvcVersionType = {}));
var TfvcVersionType = exports.TfvcVersionType;
(function (VersionControlChangeType) {
    VersionControlChangeType[VersionControlChangeType["None"] = 0] = "None";
    VersionControlChangeType[VersionControlChangeType["Add"] = 1] = "Add";
    VersionControlChangeType[VersionControlChangeType["Edit"] = 2] = "Edit";
    VersionControlChangeType[VersionControlChangeType["Encoding"] = 4] = "Encoding";
    VersionControlChangeType[VersionControlChangeType["Rename"] = 8] = "Rename";
    VersionControlChangeType[VersionControlChangeType["Delete"] = 16] = "Delete";
    VersionControlChangeType[VersionControlChangeType["Undelete"] = 32] = "Undelete";
    VersionControlChangeType[VersionControlChangeType["Branch"] = 64] = "Branch";
    VersionControlChangeType[VersionControlChangeType["Merge"] = 128] = "Merge";
    VersionControlChangeType[VersionControlChangeType["Lock"] = 256] = "Lock";
    VersionControlChangeType[VersionControlChangeType["Rollback"] = 512] = "Rollback";
    VersionControlChangeType[VersionControlChangeType["SourceRename"] = 1024] = "SourceRename";
    VersionControlChangeType[VersionControlChangeType["TargetRename"] = 2048] = "TargetRename";
    VersionControlChangeType[VersionControlChangeType["Property"] = 4096] = "Property";
    VersionControlChangeType[VersionControlChangeType["All"] = 8191] = "All";
})(exports.VersionControlChangeType || (exports.VersionControlChangeType = {}));
var VersionControlChangeType = exports.VersionControlChangeType;
(function (VersionControlRecursionType) {
    /**
     * Only return the specified item.
     */
    VersionControlRecursionType[VersionControlRecursionType["None"] = 0] = "None";
    /**
     * Return the specified item and its direct children.
     */
    VersionControlRecursionType[VersionControlRecursionType["OneLevel"] = 1] = "OneLevel";
    /**
     * Return the specified item and its direct children, as well as recursive chains of nested child folders that only contain a single folder.
     */
    VersionControlRecursionType[VersionControlRecursionType["OneLevelPlusNestedEmptyFolders"] = 4] = "OneLevelPlusNestedEmptyFolders";
    /**
     * Return specified item and all descendants
     */
    VersionControlRecursionType[VersionControlRecursionType["Full"] = 120] = "Full";
})(exports.VersionControlRecursionType || (exports.VersionControlRecursionType = {}));
var VersionControlRecursionType = exports.VersionControlRecursionType;
exports.TypeInfo = {
    AssociatedWorkItem: {
        fields: null
    },
    AsyncGitOperationNotification: {
        fields: null
    },
    AsyncRefOperationCommitLevelEventNotification: {
        fields: null
    },
    AsyncRefOperationCompletedNotification: {
        fields: null
    },
    AsyncRefOperationConflictNotification: {
        fields: null
    },
    AsyncRefOperationGeneralFailureNotification: {
        fields: null
    },
    AsyncRefOperationProgressNotification: {
        fields: null
    },
    Change: {
        fields: null
    },
    ChangeCountDictionary: {
        fields: null
    },
    ChangeList: {
        fields: null
    },
    ChangeListSearchCriteria: {
        fields: null
    },
    CheckinNote: {
        fields: null
    },
    CommentIterationContext: {
        fields: null
    },
    CommentPosition: {
        fields: null
    },
    CommentTrackingCriteria: {
        fields: null
    },
    FileContentMetadata: {
        fields: null
    },
    GitAsyncOperationStatus: {
        enumValues: {
            "queued": 1,
            "inProgress": 2,
            "completed": 3,
            "failed": 4,
            "abandoned": 5,
        }
    },
    GitAsyncRefOperationParameters: {
        fields: null
    },
    GitAsyncRefOperationSource: {
        fields: null
    },
    GitBaseVersionDescriptor: {
        fields: null
    },
    GitBlobRef: {
        fields: null
    },
    GitBranchStats: {
        fields: null
    },
    GitChange: {
        fields: null
    },
    GitCherryPick: {
        fields: null
    },
    GitCommit: {
        fields: null
    },
    GitCommitChanges: {
        fields: null
    },
    GitCommitDiffs: {
        fields: null
    },
    GitCommitRef: {
        fields: null
    },
    GitCommitToCreate: {
        fields: null
    },
    GitDeletedRepository: {
        fields: null
    },
    GitFilePathsCollection: {
        fields: null
    },
    GitHistoryQueryResults: {
        fields: null
    },
    GitImportOperationNotification: {
        fields: null
    },
    GitImportRequest: {
        fields: null
    },
    GitImportRequestParameters: {
        fields: null
    },
    GitImportStatusDetail: {
        fields: null
    },
    GitItem: {
        fields: null
    },
    GitItemDescriptor: {
        fields: null
    },
    GitItemRequestData: {
        fields: null
    },
    GitLimitedRefCriteria: {
        fields: null
    },
    GitObjectType: {
        enumValues: {
            "bad": 0,
            "commit": 1,
            "tree": 2,
            "blob": 3,
            "tag": 4,
            "ext2": 5,
            "ofsDelta": 6,
            "refDelta": 7,
        }
    },
    GitPathAction: {
        fields: null
    },
    GitPathActions: {
        enumValues: {
            "none": 0,
            "edit": 1,
            "delete": 2,
            "add": 3,
            "rename": 4,
        }
    },
    GitPathToItemsCollection: {
        fields: null
    },
    GitPullRequest: {
        fields: null
    },
    GitPullRequestChange: {
        fields: null
    },
    GitPullRequestComment: {
        fields: null
    },
    GitPullRequestCommentStatus: {
        enumValues: {
            "unknown": 0,
            "active": 1,
            "fixed": 2,
            "wontFix": 3,
            "closed": 4,
            "byDesign": 5,
            "pending": 6,
        }
    },
    GitPullRequestCommentThread: {
        fields: null
    },
    GitPullRequestCommentThreadContext: {
        fields: null
    },
    GitPullRequestCommentType: {
        enumValues: {
            "unknown": 0,
            "text": 1,
            "codeChange": 2,
            "system": 3,
        }
    },
    GitPullRequestCompletionOptions: {
        fields: null
    },
    GitPullRequestIteration: {
        fields: null
    },
    GitPullRequestIterationChanges: {
        fields: null
    },
    GitPullRequestQuery: {
        fields: null
    },
    GitPullRequestQueryInput: {
        fields: null
    },
    GitPullRequestQueryType: {
        enumValues: {
            "notSet": 0,
            "lastMergeCommit": 1,
            "commit": 2,
        }
    },
    GitPullRequestReviewFileContentInfo: {
        fields: null
    },
    GitPullRequestReviewFileType: {
        enumValues: {
            "changeEntry": 0,
            "attachment": 1,
        }
    },
    GitPullRequestSearchCriteria: {
        fields: null
    },
    GitPullRequestStatus: {
        fields: null
    },
    GitPush: {
        fields: null
    },
    GitPushEventData: {
        fields: null
    },
    GitPushRef: {
        fields: null
    },
    GitPushSearchCriteria: {
        fields: null
    },
    GitQueryBranchStatsCriteria: {
        fields: null
    },
    GitQueryCommitsCriteria: {
        fields: null
    },
    GitRef: {
        fields: null
    },
    GitRefFavorite: {
        fields: null
    },
    GitRefLockRequest: {
        fields: null
    },
    GitRefUpdate: {
        fields: null
    },
    GitRefUpdateMode: {
        enumValues: {
            "bestEffort": 0,
            "allOrNone": 1,
        }
    },
    GitRefUpdateResult: {
        fields: null
    },
    GitRefUpdateResultSet: {
        fields: null
    },
    GitRefUpdateStatus: {
        enumValues: {
            "succeeded": 0,
            "forcePushRequired": 1,
            "staleOldObjectId": 2,
            "invalidRefName": 3,
            "unprocessed": 4,
            "unresolvableToCommit": 5,
            "writePermissionRequired": 6,
            "manageNotePermissionRequired": 7,
            "createBranchPermissionRequired": 8,
            "createTagPermissionRequired": 9,
            "rejectedByPlugin": 10,
            "locked": 11,
            "refNameConflict": 12,
            "rejectedByPolicy": 13,
            "succeededNonExistentRef": 14,
            "succeededCorruptRef": 15,
        }
    },
    GitRepository: {
        fields: null
    },
    GitRepositoryStats: {
        fields: null
    },
    GitRevert: {
        fields: null
    },
    GitStatus: {
        fields: null
    },
    GitStatusContext: {
        fields: null
    },
    GitStatusState: {
        enumValues: {
            "notSet": 0,
            "pending": 1,
            "succeeded": 2,
            "failed": 3,
            "error": 4,
        }
    },
    GitSuggestion: {
        fields: null
    },
    GitTargetVersionDescriptor: {
        fields: null
    },
    GitTreeEntryRef: {
        fields: null
    },
    GitTreeRef: {
        fields: null
    },
    GitUserDate: {
        fields: null
    },
    GitVersionDescriptor: {
        fields: null
    },
    GitVersionOptions: {
        enumValues: {
            "none": 0,
            "previousChange": 1,
            "firstParent": 2,
        }
    },
    GitVersionType: {
        enumValues: {
            "branch": 0,
            "tag": 1,
            "commit": 2,
            "index": 3,
        }
    },
    HistoryEntry: {
        fields: null
    },
    HistoryQueryResults: {
        fields: null
    },
    IdentityRefWithVote: {
        fields: null
    },
    IncludedGitCommit: {
        fields: null
    },
    ItemContent: {
        fields: null
    },
    ItemContentType: {
        enumValues: {
            "rawText": 0,
            "base64Encoded": 1,
        }
    },
    ItemDetailsOptions: {
        fields: null
    },
    ItemModel: {
        fields: null
    },
    PullRequestAsyncStatus: {
        enumValues: {
            "notSet": 0,
            "queued": 1,
            "conflicts": 2,
            "succeeded": 3,
            "rejectedByPolicy": 4,
            "failure": 5,
        }
    },
    PullRequestStatus: {
        enumValues: {
            "notSet": 0,
            "active": 1,
            "abandoned": 2,
            "completed": 3,
            "all": 4,
        }
    },
    RefFavoriteType: {
        enumValues: {
            "invalid": 0,
            "folder": 1,
            "ref": 2,
        }
    },
    SupportedIde: {
        fields: null
    },
    SupportedIdeType: {
        enumValues: {
            "unknown": 0,
            "androidStudio": 1,
            "appCode": 2,
            "cLion": 3,
            "dataGrip": 4,
            "intelliJ": 5,
            "mPS": 6,
            "phpStorm": 7,
            "pyCharm": 8,
            "rubyMine": 9,
            "tower": 10,
            "visualStudio": 11,
            "webStorm": 12,
        }
    },
    TfvcBranch: {
        fields: null
    },
    TfvcBranchMapping: {
        fields: null
    },
    TfvcBranchRef: {
        fields: null
    },
    TfvcChange: {
        fields: null
    },
    TfvcChangeset: {
        fields: null
    },
    TfvcChangesetRef: {
        fields: null
    },
    TfvcChangesetSearchCriteria: {
        fields: null
    },
    TfvcChangesetsRequestData: {
        fields: null
    },
    TfvcCheckinEventData: {
        fields: null
    },
    TfvcHistoryEntry: {
        fields: null
    },
    TfvcItem: {
        fields: null
    },
    TfvcItemDescriptor: {
        fields: null
    },
    TfvcItemRequestData: {
        fields: null
    },
    TfvcLabel: {
        fields: null
    },
    TfvcLabelRef: {
        fields: null
    },
    TfvcLabelRequestData: {
        fields: null
    },
    TfvcMergeSource: {
        fields: null
    },
    TfvcPolicyFailureInfo: {
        fields: null
    },
    TfvcPolicyOverrideInfo: {
        fields: null
    },
    TfvcShallowBranchRef: {
        fields: null
    },
    TfvcShelveset: {
        fields: null
    },
    TfvcShelvesetRef: {
        fields: null
    },
    TfvcShelvesetRequestData: {
        fields: null
    },
    TfvcVersionDescriptor: {
        fields: null
    },
    TfvcVersionOption: {
        enumValues: {
            "none": 0,
            "previous": 1,
            "useRename": 2,
        }
    },
    TfvcVersionType: {
        enumValues: {
            "none": 0,
            "changeset": 1,
            "shelveset": 2,
            "change": 3,
            "date": 4,
            "latest": 5,
            "tip": 6,
            "mergeSource": 7,
        }
    },
    UpdateRefsRequest: {
        fields: null
    },
    VersionControlChangeType: {
        enumValues: {
            "none": 0,
            "add": 1,
            "edit": 2,
            "encoding": 4,
            "rename": 8,
            "delete": 16,
            "undelete": 32,
            "branch": 64,
            "merge": 128,
            "lock": 256,
            "rollback": 512,
            "sourceRename": 1024,
            "targetRename": 2048,
            "property": 4096,
            "all": 8191,
        }
    },
    VersionControlProjectInfo: {
        fields: null
    },
    VersionControlRecursionType: {
        enumValues: {
            "none": 0,
            "oneLevel": 1,
            "oneLevelPlusNestedEmptyFolders": 4,
            "full": 120,
        }
    },
};
exports.TypeInfo.AssociatedWorkItem.fields = {};
exports.TypeInfo.AsyncGitOperationNotification.fields = {};
exports.TypeInfo.AsyncRefOperationCommitLevelEventNotification.fields = {};
exports.TypeInfo.AsyncRefOperationCompletedNotification.fields = {};
exports.TypeInfo.AsyncRefOperationConflictNotification.fields = {};
exports.TypeInfo.AsyncRefOperationGeneralFailureNotification.fields = {};
exports.TypeInfo.AsyncRefOperationProgressNotification.fields = {};
exports.TypeInfo.Change.fields = {
    changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
    },
    newContent: {
        typeInfo: exports.TypeInfo.ItemContent
    },
};
exports.TypeInfo.ChangeCountDictionary.fields = {};
exports.TypeInfo.ChangeList.fields = {
    changeCounts: {},
    creationDate: {
        isDate: true,
    },
    notes: {
        isArray: true,
        typeInfo: exports.TypeInfo.CheckinNote
    },
    sortDate: {
        isDate: true,
    },
};
exports.TypeInfo.ChangeListSearchCriteria.fields = {};
exports.TypeInfo.CheckinNote.fields = {};
exports.TypeInfo.CommentIterationContext.fields = {};
exports.TypeInfo.CommentPosition.fields = {};
exports.TypeInfo.CommentTrackingCriteria.fields = {};
exports.TypeInfo.FileContentMetadata.fields = {};
exports.TypeInfo.GitAsyncRefOperationParameters.fields = {
    repository: {
        typeInfo: exports.TypeInfo.GitRepository
    },
    source: {
        typeInfo: exports.TypeInfo.GitAsyncRefOperationSource
    },
};
exports.TypeInfo.GitAsyncRefOperationSource.fields = {
    commitList: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommitRef
    },
};
exports.TypeInfo.GitBaseVersionDescriptor.fields = {
    baseVersionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    baseVersionType: {
        enumType: exports.TypeInfo.GitVersionType
    },
    versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    versionType: {
        enumType: exports.TypeInfo.GitVersionType
    },
};
exports.TypeInfo.GitBlobRef.fields = {};
exports.TypeInfo.GitBranchStats.fields = {
    commit: {
        typeInfo: exports.TypeInfo.GitCommitRef
    },
};
exports.TypeInfo.GitChange.fields = {
    changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
    },
    item: {
        typeInfo: exports.TypeInfo.GitItem
    },
    newContent: {
        typeInfo: exports.TypeInfo.ItemContent
    },
};
exports.TypeInfo.GitCherryPick.fields = {
    parameters: {
        typeInfo: exports.TypeInfo.GitAsyncRefOperationParameters
    },
};
exports.TypeInfo.GitCommit.fields = {
    author: {
        typeInfo: exports.TypeInfo.GitUserDate
    },
    changeCounts: {
        typeInfo: exports.TypeInfo.ChangeCountDictionary
    },
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
    },
    committer: {
        typeInfo: exports.TypeInfo.GitUserDate
    },
    push: {
        typeInfo: exports.TypeInfo.GitPushRef
    },
    statuses: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitStatus
    },
    workItems: {
        isArray: true,
        typeInfo: VSSInterfaces.TypeInfo.ResourceRef
    },
};
exports.TypeInfo.GitCommitChanges.fields = {
    changeCounts: {
        typeInfo: exports.TypeInfo.ChangeCountDictionary
    },
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
    },
};
exports.TypeInfo.GitCommitDiffs.fields = {
    changeCounts: {},
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
    },
};
exports.TypeInfo.GitCommitRef.fields = {
    author: {
        typeInfo: exports.TypeInfo.GitUserDate
    },
    changeCounts: {
        typeInfo: exports.TypeInfo.ChangeCountDictionary
    },
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
    },
    committer: {
        typeInfo: exports.TypeInfo.GitUserDate
    },
    statuses: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitStatus
    },
    workItems: {
        isArray: true,
        typeInfo: VSSInterfaces.TypeInfo.ResourceRef
    },
};
exports.TypeInfo.GitCommitToCreate.fields = {
    baseRef: {
        typeInfo: exports.TypeInfo.GitRef
    },
    pathActions: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitPathAction
    },
};
exports.TypeInfo.GitDeletedRepository.fields = {
    createdDate: {
        isDate: true,
    },
    deletedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    deletedDate: {
        isDate: true,
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
};
exports.TypeInfo.GitFilePathsCollection.fields = {};
exports.TypeInfo.GitHistoryQueryResults.fields = {};
exports.TypeInfo.GitImportOperationNotification.fields = {
    statusDetail: {
        typeInfo: exports.TypeInfo.GitImportStatusDetail
    },
};
exports.TypeInfo.GitImportRequest.fields = {
    detailedStatus: {
        typeInfo: exports.TypeInfo.GitImportStatusDetail
    },
    parameters: {
        typeInfo: exports.TypeInfo.GitImportRequestParameters
    },
    repository: {
        typeInfo: exports.TypeInfo.GitRepository
    },
    status: {
        enumType: exports.TypeInfo.GitAsyncOperationStatus
    },
};
exports.TypeInfo.GitImportRequestParameters.fields = {};
exports.TypeInfo.GitImportStatusDetail.fields = {};
exports.TypeInfo.GitItem.fields = {
    contentMetadata: {
        typeInfo: exports.TypeInfo.FileContentMetadata
    },
    gitObjectType: {
        enumType: exports.TypeInfo.GitObjectType
    },
    latestProcessedChange: {
        typeInfo: exports.TypeInfo.GitCommitRef
    },
};
exports.TypeInfo.GitItemDescriptor.fields = {
    recursionLevel: {
        enumType: exports.TypeInfo.VersionControlRecursionType
    },
    versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    versionType: {
        enumType: exports.TypeInfo.GitVersionType
    },
};
exports.TypeInfo.GitItemRequestData.fields = {
    itemDescriptors: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitItemDescriptor
    },
};
exports.TypeInfo.GitLimitedRefCriteria.fields = {};
exports.TypeInfo.GitPathAction.fields = {
    action: {
        enumType: exports.TypeInfo.GitPathActions
    },
};
exports.TypeInfo.GitPathToItemsCollection.fields = {
    items: {},
};
exports.TypeInfo.GitPullRequest.fields = {
    autoCompleteSetBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    closedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    closedDate: {
        isDate: true,
    },
    commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    completionOptions: {
        typeInfo: exports.TypeInfo.GitPullRequestCompletionOptions
    },
    completionQueueTime: {
        isDate: true,
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    creationDate: {
        isDate: true,
    },
    lastMergeCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    lastMergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    lastMergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    mergeStatus: {
        enumType: exports.TypeInfo.PullRequestAsyncStatus
    },
    repository: {
        typeInfo: exports.TypeInfo.GitRepository
    },
    reviewers: {
        isArray: true,
        typeInfo: exports.TypeInfo.IdentityRefWithVote
    },
    status: {
        enumType: exports.TypeInfo.PullRequestStatus
    },
    workItemRefs: {
        isArray: true,
        typeInfo: VSSInterfaces.TypeInfo.ResourceRef
    },
};
exports.TypeInfo.GitPullRequestChange.fields = {
    changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
    },
    item: {
        typeInfo: exports.TypeInfo.GitItem
    },
    newContent: {
        typeInfo: exports.TypeInfo.ItemContent
    },
};
exports.TypeInfo.GitPullRequestComment.fields = {
    author: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    commentType: {
        enumType: exports.TypeInfo.GitPullRequestCommentType
    },
    lastUpdatedDate: {
        isDate: true,
    },
    publishedDate: {
        isDate: true,
    },
    usersLiked: {
        isArray: true,
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.GitPullRequestCommentThread.fields = {
    comments: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitPullRequestComment
    },
    lastUpdatedDate: {
        isDate: true,
    },
    publishedDate: {
        isDate: true,
    },
    status: {
        enumType: exports.TypeInfo.GitPullRequestCommentStatus
    },
    threadContext: {
        typeInfo: exports.TypeInfo.GitPullRequestCommentThreadContext
    },
};
exports.TypeInfo.GitPullRequestCommentThreadContext.fields = {
    iterationContext: {
        typeInfo: exports.TypeInfo.CommentIterationContext
    },
    leftFileEnd: {
        typeInfo: exports.TypeInfo.CommentPosition
    },
    leftFileStart: {
        typeInfo: exports.TypeInfo.CommentPosition
    },
    rightFileEnd: {
        typeInfo: exports.TypeInfo.CommentPosition
    },
    rightFileStart: {
        typeInfo: exports.TypeInfo.CommentPosition
    },
    trackingCriteria: {
        typeInfo: exports.TypeInfo.CommentTrackingCriteria
    },
};
exports.TypeInfo.GitPullRequestCompletionOptions.fields = {};
exports.TypeInfo.GitPullRequestIteration.fields = {
    author: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    changeList: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitPullRequestChange
    },
    commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    commonRefCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    createdDate: {
        isDate: true,
    },
    push: {
        typeInfo: exports.TypeInfo.GitPushRef
    },
    sourceRefCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    targetRefCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    updatedDate: {
        isDate: true,
    },
};
exports.TypeInfo.GitPullRequestIterationChanges.fields = {
    changeEntries: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitPullRequestChange
    },
};
exports.TypeInfo.GitPullRequestQuery.fields = {
    queries: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitPullRequestQueryInput
    },
};
exports.TypeInfo.GitPullRequestQueryInput.fields = {
    type: {
        enumType: exports.TypeInfo.GitPullRequestQueryType
    },
};
exports.TypeInfo.GitPullRequestReviewFileContentInfo.fields = {};
exports.TypeInfo.GitPullRequestSearchCriteria.fields = {
    status: {
        enumType: exports.TypeInfo.PullRequestStatus
    },
};
exports.TypeInfo.GitPullRequestStatus.fields = {
    context: {
        typeInfo: exports.TypeInfo.GitStatusContext
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    creationDate: {
        isDate: true,
    },
    state: {
        enumType: exports.TypeInfo.GitStatusState
    },
    updatedDate: {
        isDate: true,
    },
};
exports.TypeInfo.GitPush.fields = {
    commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    date: {
        isDate: true,
    },
    pushedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    refUpdates: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitRefUpdate
    },
    repository: {
        typeInfo: exports.TypeInfo.GitRepository
    },
};
exports.TypeInfo.GitPushEventData.fields = {
    commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommit
    },
    repository: {
        typeInfo: exports.TypeInfo.GitRepository
    },
};
exports.TypeInfo.GitPushRef.fields = {
    date: {
        isDate: true,
    },
    pushedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.GitPushSearchCriteria.fields = {
    fromDate: {
        isDate: true,
    },
    toDate: {
        isDate: true,
    },
};
exports.TypeInfo.GitQueryBranchStatsCriteria.fields = {
    baseCommit: {
        typeInfo: exports.TypeInfo.GitVersionDescriptor
    },
    targetCommits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitVersionDescriptor
    },
};
exports.TypeInfo.GitQueryCommitsCriteria.fields = {
    compareVersion: {
        typeInfo: exports.TypeInfo.GitVersionDescriptor
    },
    itemVersion: {
        typeInfo: exports.TypeInfo.GitVersionDescriptor
    },
};
exports.TypeInfo.GitRef.fields = {
    isLockedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    statuses: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitStatus
    },
};
exports.TypeInfo.GitRefFavorite.fields = {
    type: {
        enumType: exports.TypeInfo.RefFavoriteType
    },
};
exports.TypeInfo.GitRefLockRequest.fields = {};
exports.TypeInfo.GitRefUpdate.fields = {};
exports.TypeInfo.GitRefUpdateResult.fields = {
    updateStatus: {
        enumType: exports.TypeInfo.GitRefUpdateStatus
    },
};
exports.TypeInfo.GitRefUpdateResultSet.fields = {
    pushTime: {
        isDate: true,
    },
    results: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitRefUpdateResult
    },
};
exports.TypeInfo.GitRepository.fields = {
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
};
exports.TypeInfo.GitRepositoryStats.fields = {};
exports.TypeInfo.GitRevert.fields = {
    parameters: {
        typeInfo: exports.TypeInfo.GitAsyncRefOperationParameters
    },
};
exports.TypeInfo.GitStatus.fields = {
    context: {
        typeInfo: exports.TypeInfo.GitStatusContext
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    creationDate: {
        isDate: true,
    },
    state: {
        enumType: exports.TypeInfo.GitStatusState
    },
    updatedDate: {
        isDate: true,
    },
};
exports.TypeInfo.GitStatusContext.fields = {};
exports.TypeInfo.GitSuggestion.fields = {};
exports.TypeInfo.GitTargetVersionDescriptor.fields = {
    targetVersionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    targetVersionType: {
        enumType: exports.TypeInfo.GitVersionType
    },
    versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    versionType: {
        enumType: exports.TypeInfo.GitVersionType
    },
};
exports.TypeInfo.GitTreeEntryRef.fields = {
    gitObjectType: {
        enumType: exports.TypeInfo.GitObjectType
    },
};
exports.TypeInfo.GitTreeRef.fields = {
    treeEntries: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitTreeEntryRef
    },
};
exports.TypeInfo.GitUserDate.fields = {
    date: {
        isDate: true,
    },
};
exports.TypeInfo.GitVersionDescriptor.fields = {
    versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    versionType: {
        enumType: exports.TypeInfo.GitVersionType
    },
};
exports.TypeInfo.HistoryEntry.fields = {
    itemChangeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
    },
};
exports.TypeInfo.HistoryQueryResults.fields = {};
exports.TypeInfo.IdentityRefWithVote.fields = {
    votedFor: {
        isArray: true,
        typeInfo: exports.TypeInfo.IdentityRefWithVote
    },
};
exports.TypeInfo.IncludedGitCommit.fields = {
    commitTime: {
        isDate: true,
    },
};
exports.TypeInfo.ItemContent.fields = {
    contentType: {
        enumType: exports.TypeInfo.ItemContentType
    },
};
exports.TypeInfo.ItemDetailsOptions.fields = {
    recursionLevel: {
        enumType: exports.TypeInfo.VersionControlRecursionType
    },
};
exports.TypeInfo.ItemModel.fields = {
    contentMetadata: {
        typeInfo: exports.TypeInfo.FileContentMetadata
    },
};
exports.TypeInfo.SupportedIde.fields = {
    ideType: {
        enumType: exports.TypeInfo.SupportedIdeType
    },
};
exports.TypeInfo.TfvcBranch.fields = {
    children: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcBranch
    },
    createdDate: {
        isDate: true,
    },
    mappings: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcBranchMapping
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    parent: {
        typeInfo: exports.TypeInfo.TfvcShallowBranchRef
    },
    relatedBranches: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcShallowBranchRef
    },
};
exports.TypeInfo.TfvcBranchMapping.fields = {};
exports.TypeInfo.TfvcBranchRef.fields = {
    createdDate: {
        isDate: true,
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.TfvcChange.fields = {
    changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
    },
    item: {
        typeInfo: exports.TypeInfo.TfvcItem
    },
    mergeSources: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcMergeSource
    },
    newContent: {
        typeInfo: exports.TypeInfo.ItemContent
    },
};
exports.TypeInfo.TfvcChangeset.fields = {
    author: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcChange
    },
    checkedInBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    checkinNotes: {
        isArray: true,
        typeInfo: exports.TypeInfo.CheckinNote
    },
    createdDate: {
        isDate: true,
    },
    policyOverride: {
        typeInfo: exports.TypeInfo.TfvcPolicyOverrideInfo
    },
    workItems: {
        isArray: true,
        typeInfo: exports.TypeInfo.AssociatedWorkItem
    },
};
exports.TypeInfo.TfvcChangesetRef.fields = {
    author: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    checkedInBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdDate: {
        isDate: true,
    },
};
exports.TypeInfo.TfvcChangesetSearchCriteria.fields = {};
exports.TypeInfo.TfvcChangesetsRequestData.fields = {};
exports.TypeInfo.TfvcCheckinEventData.fields = {
    changeset: {
        typeInfo: exports.TypeInfo.TfvcChangeset
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
};
exports.TypeInfo.TfvcHistoryEntry.fields = {
    itemChangeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
    },
};
exports.TypeInfo.TfvcItem.fields = {
    changeDate: {
        isDate: true,
    },
    contentMetadata: {
        typeInfo: exports.TypeInfo.FileContentMetadata
    },
};
exports.TypeInfo.TfvcItemDescriptor.fields = {
    recursionLevel: {
        enumType: exports.TypeInfo.VersionControlRecursionType
    },
    versionOption: {
        enumType: exports.TypeInfo.TfvcVersionOption
    },
    versionType: {
        enumType: exports.TypeInfo.TfvcVersionType
    },
};
exports.TypeInfo.TfvcItemRequestData.fields = {
    itemDescriptors: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcItemDescriptor
    },
};
exports.TypeInfo.TfvcLabel.fields = {
    items: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcItem
    },
    modifiedDate: {
        isDate: true,
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.TfvcLabelRef.fields = {
    modifiedDate: {
        isDate: true,
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.TfvcLabelRequestData.fields = {};
exports.TypeInfo.TfvcMergeSource.fields = {};
exports.TypeInfo.TfvcPolicyFailureInfo.fields = {};
exports.TypeInfo.TfvcPolicyOverrideInfo.fields = {
    policyFailures: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcPolicyFailureInfo
    },
};
exports.TypeInfo.TfvcShallowBranchRef.fields = {};
exports.TypeInfo.TfvcShelveset.fields = {
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcChange
    },
    createdDate: {
        isDate: true,
    },
    notes: {
        isArray: true,
        typeInfo: exports.TypeInfo.CheckinNote
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    policyOverride: {
        typeInfo: exports.TypeInfo.TfvcPolicyOverrideInfo
    },
    workItems: {
        isArray: true,
        typeInfo: exports.TypeInfo.AssociatedWorkItem
    },
};
exports.TypeInfo.TfvcShelvesetRef.fields = {
    createdDate: {
        isDate: true,
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.TfvcShelvesetRequestData.fields = {};
exports.TypeInfo.TfvcVersionDescriptor.fields = {
    versionOption: {
        enumType: exports.TypeInfo.TfvcVersionOption
    },
    versionType: {
        enumType: exports.TypeInfo.TfvcVersionType
    },
};
exports.TypeInfo.UpdateRefsRequest.fields = {
    refUpdateRequests: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitRefUpdate
    },
    updateMode: {
        enumType: exports.TypeInfo.GitRefUpdateMode
    },
};
exports.TypeInfo.VersionControlProjectInfo.fields = {
    defaultSourceControlType: {
        typeInfo: TfsCoreInterfaces.TypeInfo.SourceControlTypes
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
};
