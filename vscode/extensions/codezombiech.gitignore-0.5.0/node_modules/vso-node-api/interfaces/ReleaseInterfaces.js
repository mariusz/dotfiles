/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var FormInputInterfaces = require("../interfaces/common/FormInputInterfaces");
var VSSInterfaces = require("../interfaces/common/VSSInterfaces");
(function (AgentArtifactType) {
    AgentArtifactType[AgentArtifactType["XamlBuild"] = 0] = "XamlBuild";
    AgentArtifactType[AgentArtifactType["Build"] = 1] = "Build";
    AgentArtifactType[AgentArtifactType["Jenkins"] = 2] = "Jenkins";
    AgentArtifactType[AgentArtifactType["FileShare"] = 3] = "FileShare";
    AgentArtifactType[AgentArtifactType["Nuget"] = 4] = "Nuget";
    AgentArtifactType[AgentArtifactType["TfsOnPrem"] = 5] = "TfsOnPrem";
    AgentArtifactType[AgentArtifactType["GitHub"] = 6] = "GitHub";
    AgentArtifactType[AgentArtifactType["TFGit"] = 7] = "TFGit";
    AgentArtifactType[AgentArtifactType["ExternalTfsBuild"] = 8] = "ExternalTfsBuild";
    AgentArtifactType[AgentArtifactType["Custom"] = 9] = "Custom";
    AgentArtifactType[AgentArtifactType["Tfvc"] = 10] = "Tfvc";
})(exports.AgentArtifactType || (exports.AgentArtifactType = {}));
var AgentArtifactType = exports.AgentArtifactType;
(function (ApprovalStatus) {
    ApprovalStatus[ApprovalStatus["Undefined"] = 0] = "Undefined";
    ApprovalStatus[ApprovalStatus["Pending"] = 1] = "Pending";
    ApprovalStatus[ApprovalStatus["Approved"] = 2] = "Approved";
    ApprovalStatus[ApprovalStatus["Rejected"] = 4] = "Rejected";
    ApprovalStatus[ApprovalStatus["Reassigned"] = 6] = "Reassigned";
    ApprovalStatus[ApprovalStatus["Canceled"] = 7] = "Canceled";
    ApprovalStatus[ApprovalStatus["Skipped"] = 8] = "Skipped";
})(exports.ApprovalStatus || (exports.ApprovalStatus = {}));
var ApprovalStatus = exports.ApprovalStatus;
(function (ApprovalType) {
    ApprovalType[ApprovalType["Undefined"] = 0] = "Undefined";
    ApprovalType[ApprovalType["PreDeploy"] = 1] = "PreDeploy";
    ApprovalType[ApprovalType["PostDeploy"] = 2] = "PostDeploy";
    ApprovalType[ApprovalType["All"] = 3] = "All";
})(exports.ApprovalType || (exports.ApprovalType = {}));
var ApprovalType = exports.ApprovalType;
(function (AuditAction) {
    AuditAction[AuditAction["Add"] = 1] = "Add";
    AuditAction[AuditAction["Update"] = 2] = "Update";
    AuditAction[AuditAction["Delete"] = 3] = "Delete";
})(exports.AuditAction || (exports.AuditAction = {}));
var AuditAction = exports.AuditAction;
(function (ConditionType) {
    ConditionType[ConditionType["Undefined"] = 0] = "Undefined";
    ConditionType[ConditionType["Event"] = 1] = "Event";
    ConditionType[ConditionType["EnvironmentState"] = 2] = "EnvironmentState";
})(exports.ConditionType || (exports.ConditionType = {}));
var ConditionType = exports.ConditionType;
(function (DeploymentOperationStatus) {
    DeploymentOperationStatus[DeploymentOperationStatus["Undefined"] = 0] = "Undefined";
    DeploymentOperationStatus[DeploymentOperationStatus["Queued"] = 1] = "Queued";
    DeploymentOperationStatus[DeploymentOperationStatus["Scheduled"] = 2] = "Scheduled";
    DeploymentOperationStatus[DeploymentOperationStatus["Pending"] = 4] = "Pending";
    DeploymentOperationStatus[DeploymentOperationStatus["Approved"] = 8] = "Approved";
    DeploymentOperationStatus[DeploymentOperationStatus["Rejected"] = 16] = "Rejected";
    DeploymentOperationStatus[DeploymentOperationStatus["Deferred"] = 32] = "Deferred";
    DeploymentOperationStatus[DeploymentOperationStatus["QueuedForAgent"] = 64] = "QueuedForAgent";
    DeploymentOperationStatus[DeploymentOperationStatus["PhaseInProgress"] = 128] = "PhaseInProgress";
    DeploymentOperationStatus[DeploymentOperationStatus["PhaseSucceeded"] = 256] = "PhaseSucceeded";
    DeploymentOperationStatus[DeploymentOperationStatus["PhasePartiallySucceeded"] = 512] = "PhasePartiallySucceeded";
    DeploymentOperationStatus[DeploymentOperationStatus["PhaseFailed"] = 1024] = "PhaseFailed";
    DeploymentOperationStatus[DeploymentOperationStatus["Canceled"] = 2048] = "Canceled";
    DeploymentOperationStatus[DeploymentOperationStatus["PhaseCanceled"] = 4096] = "PhaseCanceled";
    DeploymentOperationStatus[DeploymentOperationStatus["ManualInterventionPending"] = 8192] = "ManualInterventionPending";
})(exports.DeploymentOperationStatus || (exports.DeploymentOperationStatus = {}));
var DeploymentOperationStatus = exports.DeploymentOperationStatus;
(function (DeploymentReason) {
    DeploymentReason[DeploymentReason["None"] = 0] = "None";
    DeploymentReason[DeploymentReason["Manual"] = 1] = "Manual";
    DeploymentReason[DeploymentReason["Automated"] = 2] = "Automated";
    DeploymentReason[DeploymentReason["Scheduled"] = 4] = "Scheduled";
})(exports.DeploymentReason || (exports.DeploymentReason = {}));
var DeploymentReason = exports.DeploymentReason;
(function (DeploymentStatus) {
    DeploymentStatus[DeploymentStatus["Undefined"] = 0] = "Undefined";
    DeploymentStatus[DeploymentStatus["NotDeployed"] = 1] = "NotDeployed";
    DeploymentStatus[DeploymentStatus["InProgress"] = 2] = "InProgress";
    DeploymentStatus[DeploymentStatus["Succeeded"] = 4] = "Succeeded";
    DeploymentStatus[DeploymentStatus["PartiallySucceeded"] = 8] = "PartiallySucceeded";
    DeploymentStatus[DeploymentStatus["Failed"] = 16] = "Failed";
})(exports.DeploymentStatus || (exports.DeploymentStatus = {}));
var DeploymentStatus = exports.DeploymentStatus;
(function (DeployPhaseStatus) {
    DeployPhaseStatus[DeployPhaseStatus["Undefined"] = 0] = "Undefined";
    DeployPhaseStatus[DeployPhaseStatus["NotStarted"] = 1] = "NotStarted";
    DeployPhaseStatus[DeployPhaseStatus["InProgress"] = 2] = "InProgress";
    DeployPhaseStatus[DeployPhaseStatus["PartiallySucceeded"] = 4] = "PartiallySucceeded";
    DeployPhaseStatus[DeployPhaseStatus["Succeeded"] = 8] = "Succeeded";
    DeployPhaseStatus[DeployPhaseStatus["Failed"] = 16] = "Failed";
    DeployPhaseStatus[DeployPhaseStatus["Canceled"] = 32] = "Canceled";
    DeployPhaseStatus[DeployPhaseStatus["Skipped"] = 64] = "Skipped";
})(exports.DeployPhaseStatus || (exports.DeployPhaseStatus = {}));
var DeployPhaseStatus = exports.DeployPhaseStatus;
(function (DeployPhaseTypes) {
    DeployPhaseTypes[DeployPhaseTypes["Undefined"] = 0] = "Undefined";
    DeployPhaseTypes[DeployPhaseTypes["AgentBasedDeployment"] = 1] = "AgentBasedDeployment";
    DeployPhaseTypes[DeployPhaseTypes["RunOnServer"] = 2] = "RunOnServer";
    DeployPhaseTypes[DeployPhaseTypes["MachineGroupBasedDeployment"] = 4] = "MachineGroupBasedDeployment";
})(exports.DeployPhaseTypes || (exports.DeployPhaseTypes = {}));
var DeployPhaseTypes = exports.DeployPhaseTypes;
(function (EnvironmentStatus) {
    EnvironmentStatus[EnvironmentStatus["Undefined"] = 0] = "Undefined";
    EnvironmentStatus[EnvironmentStatus["NotStarted"] = 1] = "NotStarted";
    EnvironmentStatus[EnvironmentStatus["InProgress"] = 2] = "InProgress";
    EnvironmentStatus[EnvironmentStatus["Succeeded"] = 4] = "Succeeded";
    EnvironmentStatus[EnvironmentStatus["Canceled"] = 8] = "Canceled";
    EnvironmentStatus[EnvironmentStatus["Rejected"] = 16] = "Rejected";
    EnvironmentStatus[EnvironmentStatus["Queued"] = 32] = "Queued";
    EnvironmentStatus[EnvironmentStatus["Scheduled"] = 64] = "Scheduled";
    EnvironmentStatus[EnvironmentStatus["PartiallySucceeded"] = 128] = "PartiallySucceeded";
})(exports.EnvironmentStatus || (exports.EnvironmentStatus = {}));
var EnvironmentStatus = exports.EnvironmentStatus;
(function (MailSectionType) {
    MailSectionType[MailSectionType["Details"] = 0] = "Details";
    MailSectionType[MailSectionType["Environments"] = 1] = "Environments";
    MailSectionType[MailSectionType["Issues"] = 2] = "Issues";
    MailSectionType[MailSectionType["TestResults"] = 3] = "TestResults";
    MailSectionType[MailSectionType["WorkItems"] = 4] = "WorkItems";
    MailSectionType[MailSectionType["ReleaseInfo"] = 5] = "ReleaseInfo";
})(exports.MailSectionType || (exports.MailSectionType = {}));
var MailSectionType = exports.MailSectionType;
(function (ManualInterventionStatus) {
    ManualInterventionStatus[ManualInterventionStatus["Unknown"] = 0] = "Unknown";
    ManualInterventionStatus[ManualInterventionStatus["Pending"] = 1] = "Pending";
    ManualInterventionStatus[ManualInterventionStatus["Rejected"] = 2] = "Rejected";
    ManualInterventionStatus[ManualInterventionStatus["Approved"] = 4] = "Approved";
    ManualInterventionStatus[ManualInterventionStatus["Canceled"] = 8] = "Canceled";
})(exports.ManualInterventionStatus || (exports.ManualInterventionStatus = {}));
var ManualInterventionStatus = exports.ManualInterventionStatus;
(function (PropertySelectorType) {
    PropertySelectorType[PropertySelectorType["Inclusion"] = 0] = "Inclusion";
    PropertySelectorType[PropertySelectorType["Exclusion"] = 1] = "Exclusion";
})(exports.PropertySelectorType || (exports.PropertySelectorType = {}));
var PropertySelectorType = exports.PropertySelectorType;
(function (ReleaseDefinitionExpands) {
    ReleaseDefinitionExpands[ReleaseDefinitionExpands["None"] = 0] = "None";
    ReleaseDefinitionExpands[ReleaseDefinitionExpands["Environments"] = 2] = "Environments";
    ReleaseDefinitionExpands[ReleaseDefinitionExpands["Artifacts"] = 4] = "Artifacts";
    ReleaseDefinitionExpands[ReleaseDefinitionExpands["Triggers"] = 8] = "Triggers";
})(exports.ReleaseDefinitionExpands || (exports.ReleaseDefinitionExpands = {}));
var ReleaseDefinitionExpands = exports.ReleaseDefinitionExpands;
(function (ReleaseExpands) {
    ReleaseExpands[ReleaseExpands["None"] = 0] = "None";
    ReleaseExpands[ReleaseExpands["Environments"] = 2] = "Environments";
    ReleaseExpands[ReleaseExpands["Artifacts"] = 4] = "Artifacts";
    ReleaseExpands[ReleaseExpands["Approvals"] = 8] = "Approvals";
    ReleaseExpands[ReleaseExpands["ManualInterventions"] = 16] = "ManualInterventions";
})(exports.ReleaseExpands || (exports.ReleaseExpands = {}));
var ReleaseExpands = exports.ReleaseExpands;
(function (ReleaseQueryOrder) {
    ReleaseQueryOrder[ReleaseQueryOrder["Descending"] = 0] = "Descending";
    ReleaseQueryOrder[ReleaseQueryOrder["Ascending"] = 1] = "Ascending";
})(exports.ReleaseQueryOrder || (exports.ReleaseQueryOrder = {}));
var ReleaseQueryOrder = exports.ReleaseQueryOrder;
(function (ReleaseReason) {
    ReleaseReason[ReleaseReason["None"] = 0] = "None";
    ReleaseReason[ReleaseReason["Manual"] = 1] = "Manual";
    ReleaseReason[ReleaseReason["ContinuousIntegration"] = 2] = "ContinuousIntegration";
    ReleaseReason[ReleaseReason["Schedule"] = 3] = "Schedule";
})(exports.ReleaseReason || (exports.ReleaseReason = {}));
var ReleaseReason = exports.ReleaseReason;
(function (ReleaseStatus) {
    ReleaseStatus[ReleaseStatus["Undefined"] = 0] = "Undefined";
    ReleaseStatus[ReleaseStatus["Draft"] = 1] = "Draft";
    ReleaseStatus[ReleaseStatus["Active"] = 2] = "Active";
    ReleaseStatus[ReleaseStatus["Abandoned"] = 4] = "Abandoned";
})(exports.ReleaseStatus || (exports.ReleaseStatus = {}));
var ReleaseStatus = exports.ReleaseStatus;
(function (ReleaseTriggerType) {
    ReleaseTriggerType[ReleaseTriggerType["Undefined"] = 0] = "Undefined";
    ReleaseTriggerType[ReleaseTriggerType["ArtifactSource"] = 1] = "ArtifactSource";
    ReleaseTriggerType[ReleaseTriggerType["Schedule"] = 2] = "Schedule";
})(exports.ReleaseTriggerType || (exports.ReleaseTriggerType = {}));
var ReleaseTriggerType = exports.ReleaseTriggerType;
(function (ScheduleDays) {
    ScheduleDays[ScheduleDays["None"] = 0] = "None";
    ScheduleDays[ScheduleDays["Monday"] = 1] = "Monday";
    ScheduleDays[ScheduleDays["Tuesday"] = 2] = "Tuesday";
    ScheduleDays[ScheduleDays["Wednesday"] = 4] = "Wednesday";
    ScheduleDays[ScheduleDays["Thursday"] = 8] = "Thursday";
    ScheduleDays[ScheduleDays["Friday"] = 16] = "Friday";
    ScheduleDays[ScheduleDays["Saturday"] = 32] = "Saturday";
    ScheduleDays[ScheduleDays["Sunday"] = 64] = "Sunday";
    ScheduleDays[ScheduleDays["All"] = 127] = "All";
})(exports.ScheduleDays || (exports.ScheduleDays = {}));
var ScheduleDays = exports.ScheduleDays;
(function (SenderType) {
    SenderType[SenderType["ServiceAccount"] = 1] = "ServiceAccount";
    SenderType[SenderType["RequestingUser"] = 2] = "RequestingUser";
})(exports.SenderType || (exports.SenderType = {}));
var SenderType = exports.SenderType;
(function (TaskStatus) {
    TaskStatus[TaskStatus["Unknown"] = 0] = "Unknown";
    TaskStatus[TaskStatus["Pending"] = 1] = "Pending";
    TaskStatus[TaskStatus["InProgress"] = 2] = "InProgress";
    TaskStatus[TaskStatus["Success"] = 3] = "Success";
    TaskStatus[TaskStatus["Failure"] = 4] = "Failure";
    TaskStatus[TaskStatus["Canceled"] = 5] = "Canceled";
    TaskStatus[TaskStatus["Skipped"] = 6] = "Skipped";
    TaskStatus[TaskStatus["Succeeded"] = 7] = "Succeeded";
    TaskStatus[TaskStatus["Failed"] = 8] = "Failed";
    TaskStatus[TaskStatus["PartiallySucceeded"] = 9] = "PartiallySucceeded";
})(exports.TaskStatus || (exports.TaskStatus = {}));
var TaskStatus = exports.TaskStatus;
exports.TypeInfo = {
    AgentArtifactDefinition: {
        fields: null
    },
    AgentArtifactType: {
        enumValues: {
            "xamlBuild": 0,
            "build": 1,
            "jenkins": 2,
            "fileShare": 3,
            "nuget": 4,
            "tfsOnPrem": 5,
            "gitHub": 6,
            "tFGit": 7,
            "externalTfsBuild": 8,
            "custom": 9,
            "tfvc": 10,
        }
    },
    AgentBasedDeployPhase: {
        fields: null
    },
    AgentDeploymentInput: {
        fields: null
    },
    ApprovalOptions: {
        fields: null
    },
    ApprovalStatus: {
        enumValues: {
            "undefined": 0,
            "pending": 1,
            "approved": 2,
            "rejected": 4,
            "reassigned": 6,
            "canceled": 7,
            "skipped": 8,
        }
    },
    ApprovalType: {
        enumValues: {
            "undefined": 0,
            "preDeploy": 1,
            "postDeploy": 2,
            "all": 3,
        }
    },
    Artifact: {
        fields: null
    },
    ArtifactContributionDefinition: {
        fields: null
    },
    ArtifactInstanceData: {
        fields: null
    },
    ArtifactMetadata: {
        fields: null
    },
    ArtifactProvider: {
        fields: null
    },
    ArtifactSourceId: {
        fields: null
    },
    ArtifactSourceIdsQueryResult: {
        fields: null
    },
    ArtifactSourceReference: {
        fields: null
    },
    ArtifactSourceTrigger: {
        fields: null
    },
    ArtifactTypeDefinition: {
        fields: null
    },
    ArtifactVersion: {
        fields: null
    },
    ArtifactVersionQueryResult: {
        fields: null
    },
    AuditAction: {
        enumValues: {
            "add": 1,
            "update": 2,
            "delete": 3,
        }
    },
    BaseDeploymentInput: {
        fields: null
    },
    BuildVersion: {
        fields: null
    },
    Change: {
        fields: null
    },
    Condition: {
        fields: null
    },
    ConditionType: {
        enumValues: {
            "undefined": 0,
            "event": 1,
            "environmentState": 2,
        }
    },
    ConfigurationVariableValue: {
        fields: null
    },
    Consumer: {
        fields: null
    },
    ControlOptions: {
        fields: null
    },
    DataSourceBinding: {
        fields: null
    },
    DefinitionEnvironmentReference: {
        fields: null
    },
    Deployment: {
        fields: null
    },
    DeploymentApprovalCompletedEvent: {
        fields: null
    },
    DeploymentApprovalPendingEvent: {
        fields: null
    },
    DeploymentAttempt: {
        fields: null
    },
    DeploymentCompletedEvent: {
        fields: null
    },
    DeploymentJob: {
        fields: null
    },
    DeploymentOperationStatus: {
        enumValues: {
            "undefined": 0,
            "queued": 1,
            "scheduled": 2,
            "pending": 4,
            "approved": 8,
            "rejected": 16,
            "deferred": 32,
            "queuedForAgent": 64,
            "phaseInProgress": 128,
            "phaseSucceeded": 256,
            "phasePartiallySucceeded": 512,
            "phaseFailed": 1024,
            "canceled": 2048,
            "phaseCanceled": 4096,
            "manualInterventionPending": 8192,
        }
    },
    DeploymentQueryParameters: {
        fields: null
    },
    DeploymentReason: {
        enumValues: {
            "none": 0,
            "manual": 1,
            "automated": 2,
            "scheduled": 4,
        }
    },
    DeploymentStartedEvent: {
        fields: null
    },
    DeploymentStatus: {
        enumValues: {
            "undefined": 0,
            "notDeployed": 1,
            "inProgress": 2,
            "succeeded": 4,
            "partiallySucceeded": 8,
            "failed": 16,
        }
    },
    DeployPhase: {
        fields: null
    },
    DeployPhaseStatus: {
        enumValues: {
            "undefined": 0,
            "notStarted": 1,
            "inProgress": 2,
            "partiallySucceeded": 4,
            "succeeded": 8,
            "failed": 16,
            "canceled": 32,
            "skipped": 64,
        }
    },
    DeployPhaseTypes: {
        enumValues: {
            "undefined": 0,
            "agentBasedDeployment": 1,
            "runOnServer": 2,
            "machineGroupBasedDeployment": 4,
        }
    },
    EmailRecipients: {
        fields: null
    },
    EnvironmentExecutionPolicy: {
        fields: null
    },
    EnvironmentOptions: {
        fields: null
    },
    EnvironmentRetentionPolicy: {
        fields: null
    },
    EnvironmentStatus: {
        enumValues: {
            "undefined": 0,
            "notStarted": 1,
            "inProgress": 2,
            "succeeded": 4,
            "canceled": 8,
            "rejected": 16,
            "queued": 32,
            "scheduled": 64,
            "partiallySucceeded": 128,
        }
    },
    Issue: {
        fields: null
    },
    MachineGroupBasedDeployPhase: {
        fields: null
    },
    MachineGroupDeploymentInput: {
        fields: null
    },
    MailMessage: {
        fields: null
    },
    MailSectionType: {
        enumValues: {
            "details": 0,
            "environments": 1,
            "issues": 2,
            "testResults": 3,
            "workItems": 4,
            "releaseInfo": 5,
        }
    },
    ManualIntervention: {
        fields: null
    },
    ManualInterventionStatus: {
        enumValues: {
            "unknown": 0,
            "pending": 1,
            "rejected": 2,
            "approved": 4,
            "canceled": 8,
        }
    },
    ManualInterventionUpdateMetadata: {
        fields: null
    },
    MappingDetails: {
        fields: null
    },
    ProjectReference: {
        fields: null
    },
    PropertySelector: {
        fields: null
    },
    PropertySelectorType: {
        enumValues: {
            "inclusion": 0,
            "exclusion": 1,
        }
    },
    RealtimeReleaseEvent: {
        fields: null
    },
    Release: {
        fields: null
    },
    ReleaseAbandonedEvent: {
        fields: null
    },
    ReleaseApproval: {
        fields: null
    },
    ReleaseApprovalHistory: {
        fields: null
    },
    ReleaseApprovalPendingEvent: {
        fields: null
    },
    ReleaseArtifact: {
        fields: null
    },
    ReleaseCreatedEvent: {
        fields: null
    },
    ReleaseDefinition: {
        fields: null
    },
    ReleaseDefinitionApprovals: {
        fields: null
    },
    ReleaseDefinitionApprovalStep: {
        fields: null
    },
    ReleaseDefinitionDeployStep: {
        fields: null
    },
    ReleaseDefinitionEnvironment: {
        fields: null
    },
    ReleaseDefinitionEnvironmentStep: {
        fields: null
    },
    ReleaseDefinitionEnvironmentSummary: {
        fields: null
    },
    ReleaseDefinitionEnvironmentTemplate: {
        fields: null
    },
    ReleaseDefinitionExpands: {
        enumValues: {
            "none": 0,
            "environments": 2,
            "artifacts": 4,
            "triggers": 8,
        }
    },
    ReleaseDefinitionRevision: {
        fields: null
    },
    ReleaseDefinitionSummary: {
        fields: null
    },
    ReleaseDeployPhase: {
        fields: null
    },
    ReleaseEnvironment: {
        fields: null
    },
    ReleaseEnvironmentCompletedEvent: {
        fields: null
    },
    ReleaseEnvironmentUpdateMetadata: {
        fields: null
    },
    ReleaseExpands: {
        enumValues: {
            "none": 0,
            "environments": 2,
            "artifacts": 4,
            "approvals": 8,
            "manualInterventions": 16,
        }
    },
    ReleaseQueryOrder: {
        enumValues: {
            "descending": 0,
            "ascending": 1,
        }
    },
    ReleaseReason: {
        enumValues: {
            "none": 0,
            "manual": 1,
            "continuousIntegration": 2,
            "schedule": 3,
        }
    },
    ReleaseReference: {
        fields: null
    },
    ReleaseRevision: {
        fields: null
    },
    ReleaseSchedule: {
        fields: null
    },
    ReleaseStartMetadata: {
        fields: null
    },
    ReleaseStatus: {
        enumValues: {
            "undefined": 0,
            "draft": 1,
            "active": 2,
            "abandoned": 4,
        }
    },
    ReleaseTask: {
        fields: null
    },
    ReleaseTaskLogUpdatedEvent: {
        fields: null
    },
    ReleaseTasksUpdatedEvent: {
        fields: null
    },
    ReleaseTriggerBase: {
        fields: null
    },
    ReleaseTriggerType: {
        enumValues: {
            "undefined": 0,
            "artifactSource": 1,
            "schedule": 2,
        }
    },
    ReleaseUpdatedEvent: {
        fields: null
    },
    ReleaseUpdateMetadata: {
        fields: null
    },
    ReleaseWorkItemRef: {
        fields: null
    },
    RetentionPolicy: {
        fields: null
    },
    RunOnServerDeployPhase: {
        fields: null
    },
    ScheduleDays: {
        enumValues: {
            "none": 0,
            "monday": 1,
            "tuesday": 2,
            "wednesday": 4,
            "thursday": 8,
            "friday": 16,
            "saturday": 32,
            "sunday": 64,
            "all": 127,
        }
    },
    ScheduledReleaseTrigger: {
        fields: null
    },
    SenderType: {
        enumValues: {
            "serviceAccount": 1,
            "requestingUser": 2,
        }
    },
    ShallowReference: {
        fields: null
    },
    SourceIdInput: {
        fields: null
    },
    SummaryMailSection: {
        fields: null
    },
    TaskStatus: {
        enumValues: {
            "unknown": 0,
            "pending": 1,
            "inProgress": 2,
            "success": 3,
            "failure": 4,
            "canceled": 5,
            "skipped": 6,
            "succeeded": 7,
            "failed": 8,
            "partiallySucceeded": 9,
        }
    },
    TimeZone: {
        fields: null
    },
    TimeZoneList: {
        fields: null
    },
    WorkflowTask: {
        fields: null
    },
};
exports.TypeInfo.AgentArtifactDefinition.fields = {
    artifactType: {
        enumType: exports.TypeInfo.AgentArtifactType
    },
};
exports.TypeInfo.AgentBasedDeployPhase.fields = {
    controlOptions: {
        typeInfo: exports.TypeInfo.ControlOptions
    },
    deploymentInput: {
        typeInfo: exports.TypeInfo.AgentDeploymentInput
    },
    phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
    },
    workflowTasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkflowTask
    },
};
exports.TypeInfo.AgentDeploymentInput.fields = {};
exports.TypeInfo.ApprovalOptions.fields = {};
exports.TypeInfo.Artifact.fields = {
    definitionReference: {},
};
exports.TypeInfo.ArtifactContributionDefinition.fields = {
    dataSourceBindings: {
        isArray: true,
        typeInfo: exports.TypeInfo.DataSourceBinding
    },
    inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
    },
};
exports.TypeInfo.ArtifactInstanceData.fields = {};
exports.TypeInfo.ArtifactMetadata.fields = {
    instanceReference: {
        typeInfo: exports.TypeInfo.BuildVersion
    },
};
exports.TypeInfo.ArtifactProvider.fields = {};
exports.TypeInfo.ArtifactSourceId.fields = {
    sourceIdInputs: {
        isArray: true,
        typeInfo: exports.TypeInfo.SourceIdInput
    },
};
exports.TypeInfo.ArtifactSourceIdsQueryResult.fields = {
    artifactSourceIds: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactSourceId
    },
};
exports.TypeInfo.ArtifactSourceReference.fields = {};
exports.TypeInfo.ArtifactSourceTrigger.fields = {
    triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
    },
};
exports.TypeInfo.ArtifactTypeDefinition.fields = {
    inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
    },
};
exports.TypeInfo.ArtifactVersion.fields = {
    versions: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildVersion
    },
};
exports.TypeInfo.ArtifactVersionQueryResult.fields = {
    artifactVersions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactVersion
    },
};
exports.TypeInfo.BaseDeploymentInput.fields = {};
exports.TypeInfo.BuildVersion.fields = {};
exports.TypeInfo.Change.fields = {
    author: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    timestamp: {
        isDate: true,
    },
};
exports.TypeInfo.Condition.fields = {
    conditionType: {
        enumType: exports.TypeInfo.ConditionType
    },
};
exports.TypeInfo.ConfigurationVariableValue.fields = {};
exports.TypeInfo.Consumer.fields = {};
exports.TypeInfo.ControlOptions.fields = {};
exports.TypeInfo.DataSourceBinding.fields = {};
exports.TypeInfo.DefinitionEnvironmentReference.fields = {};
exports.TypeInfo.Deployment.fields = {
    deploymentStatus: {
        enumType: exports.TypeInfo.DeploymentStatus
    },
    lastModifiedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    lastModifiedOn: {
        isDate: true,
    },
    operationStatus: {
        enumType: exports.TypeInfo.DeploymentOperationStatus
    },
    postDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    preDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    reason: {
        enumType: exports.TypeInfo.DeploymentReason
    },
    release: {
        typeInfo: exports.TypeInfo.ReleaseReference
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releaseEnvironment: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    requestedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    startedOn: {
        isDate: true,
    },
};
exports.TypeInfo.DeploymentApprovalCompletedEvent.fields = {
    approval: {
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    project: {
        typeInfo: exports.TypeInfo.ProjectReference
    },
    release: {
        typeInfo: exports.TypeInfo.Release
    },
};
exports.TypeInfo.DeploymentApprovalPendingEvent.fields = {
    approval: {
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    project: {
        typeInfo: exports.TypeInfo.ProjectReference
    },
    release: {
        typeInfo: exports.TypeInfo.Release
    },
};
exports.TypeInfo.DeploymentAttempt.fields = {
    job: {
        typeInfo: exports.TypeInfo.ReleaseTask
    },
    lastModifiedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    lastModifiedOn: {
        isDate: true,
    },
    operationStatus: {
        enumType: exports.TypeInfo.DeploymentOperationStatus
    },
    queuedOn: {
        isDate: true,
    },
    reason: {
        enumType: exports.TypeInfo.DeploymentReason
    },
    releaseDeployPhases: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDeployPhase
    },
    requestedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    status: {
        enumType: exports.TypeInfo.DeploymentStatus
    },
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTask
    },
};
exports.TypeInfo.DeploymentCompletedEvent.fields = {
    environment: {
        typeInfo: exports.TypeInfo.ReleaseEnvironment
    },
    project: {
        typeInfo: exports.TypeInfo.ProjectReference
    },
};
exports.TypeInfo.DeploymentJob.fields = {
    job: {
        typeInfo: exports.TypeInfo.ReleaseTask
    },
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTask
    },
};
exports.TypeInfo.DeploymentQueryParameters.fields = {
    deploymentStatus: {
        enumType: exports.TypeInfo.DeploymentStatus
    },
    environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.DefinitionEnvironmentReference
    },
    operationStatus: {
        enumType: exports.TypeInfo.DeploymentOperationStatus
    },
    queryOrder: {
        enumType: exports.TypeInfo.ReleaseQueryOrder
    },
};
exports.TypeInfo.DeploymentStartedEvent.fields = {
    environment: {
        typeInfo: exports.TypeInfo.ReleaseEnvironment
    },
    project: {
        typeInfo: exports.TypeInfo.ProjectReference
    },
};
exports.TypeInfo.DeployPhase.fields = {
    controlOptions: {
        typeInfo: exports.TypeInfo.ControlOptions
    },
    phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
    },
    workflowTasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkflowTask
    },
};
exports.TypeInfo.EmailRecipients.fields = {};
exports.TypeInfo.EnvironmentExecutionPolicy.fields = {};
exports.TypeInfo.EnvironmentOptions.fields = {};
exports.TypeInfo.EnvironmentRetentionPolicy.fields = {};
exports.TypeInfo.Issue.fields = {};
exports.TypeInfo.MachineGroupBasedDeployPhase.fields = {
    controlOptions: {
        typeInfo: exports.TypeInfo.ControlOptions
    },
    deploymentInput: {
        typeInfo: exports.TypeInfo.MachineGroupDeploymentInput
    },
    phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
    },
    workflowTasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkflowTask
    },
};
exports.TypeInfo.MachineGroupDeploymentInput.fields = {};
exports.TypeInfo.MailMessage.fields = {
    cC: {
        typeInfo: exports.TypeInfo.EmailRecipients
    },
    replyBy: {
        isDate: true,
    },
    replyTo: {
        typeInfo: exports.TypeInfo.EmailRecipients
    },
    sections: {
        isArray: true,
        enumType: exports.TypeInfo.MailSectionType
    },
    senderType: {
        enumType: exports.TypeInfo.SenderType
    },
    to: {
        typeInfo: exports.TypeInfo.EmailRecipients
    },
};
exports.TypeInfo.ManualIntervention.fields = {
    approver: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true,
    },
    modifiedOn: {
        isDate: true,
    },
    release: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releaseEnvironment: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    status: {
        enumType: exports.TypeInfo.ManualInterventionStatus
    },
};
exports.TypeInfo.ManualInterventionUpdateMetadata.fields = {
    status: {
        enumType: exports.TypeInfo.ManualInterventionStatus
    },
};
exports.TypeInfo.MappingDetails.fields = {};
exports.TypeInfo.ProjectReference.fields = {};
exports.TypeInfo.PropertySelector.fields = {
    selectorType: {
        enumType: exports.TypeInfo.PropertySelectorType
    },
};
exports.TypeInfo.RealtimeReleaseEvent.fields = {};
exports.TypeInfo.Release.fields = {
    artifacts: {
        isArray: true,
        typeInfo: exports.TypeInfo.Artifact
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true,
    },
    environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseEnvironment
    },
    modifiedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    modifiedOn: {
        isDate: true,
    },
    reason: {
        enumType: exports.TypeInfo.ReleaseReason
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    status: {
        enumType: exports.TypeInfo.ReleaseStatus
    },
    variables: {},
};
exports.TypeInfo.ReleaseAbandonedEvent.fields = {
    project: {
        typeInfo: exports.TypeInfo.ProjectReference
    },
    release: {
        typeInfo: exports.TypeInfo.Release
    },
};
exports.TypeInfo.ReleaseApproval.fields = {
    approvalType: {
        enumType: exports.TypeInfo.ApprovalType
    },
    approvedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    approver: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true,
    },
    history: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApprovalHistory
    },
    modifiedOn: {
        isDate: true,
    },
    release: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releaseEnvironment: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    status: {
        enumType: exports.TypeInfo.ApprovalStatus
    },
};
exports.TypeInfo.ReleaseApprovalHistory.fields = {
    approver: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    changedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true,
    },
    modifiedOn: {
        isDate: true,
    },
};
exports.TypeInfo.ReleaseApprovalPendingEvent.fields = {
    approval: {
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseEnvironment
    },
};
exports.TypeInfo.ReleaseArtifact.fields = {
    artifactProvider: {
        typeInfo: exports.TypeInfo.ArtifactProvider
    },
};
exports.TypeInfo.ReleaseCreatedEvent.fields = {
    project: {
        typeInfo: exports.TypeInfo.ProjectReference
    },
    release: {
        typeInfo: exports.TypeInfo.Release
    },
};
exports.TypeInfo.ReleaseDefinition.fields = {
    artifacts: {
        isArray: true,
        typeInfo: exports.TypeInfo.Artifact
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true,
    },
    environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironment
    },
    modifiedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    modifiedOn: {
        isDate: true,
    },
    retentionPolicy: {
        typeInfo: exports.TypeInfo.RetentionPolicy
    },
    triggers: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTriggerBase
    },
    variables: {},
};
exports.TypeInfo.ReleaseDefinitionApprovals.fields = {
    approvalOptions: {
        typeInfo: exports.TypeInfo.ApprovalOptions
    },
    approvals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovalStep
    },
};
exports.TypeInfo.ReleaseDefinitionApprovalStep.fields = {
    approver: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.ReleaseDefinitionDeployStep.fields = {
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkflowTask
    },
};
exports.TypeInfo.ReleaseDefinitionEnvironment.fields = {
    conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.Condition
    },
    deployPhases: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeployPhase
    },
    deployStep: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionDeployStep
    },
    environmentOptions: {
        typeInfo: exports.TypeInfo.EnvironmentOptions
    },
    executionPolicy: {
        typeInfo: exports.TypeInfo.EnvironmentExecutionPolicy
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    postDeployApprovals: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
    },
    preDeployApprovals: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
    },
    retentionPolicy: {
        typeInfo: exports.TypeInfo.EnvironmentRetentionPolicy
    },
    schedules: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseSchedule
    },
    variables: {},
};
exports.TypeInfo.ReleaseDefinitionEnvironmentStep.fields = {};
exports.TypeInfo.ReleaseDefinitionEnvironmentSummary.fields = {
    lastReleases: {
        isArray: true,
        typeInfo: exports.TypeInfo.ShallowReference
    },
};
exports.TypeInfo.ReleaseDefinitionEnvironmentTemplate.fields = {
    environment: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironment
    },
};
exports.TypeInfo.ReleaseDefinitionRevision.fields = {
    changedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    changedDate: {
        isDate: true,
    },
    changeType: {
        enumType: exports.TypeInfo.AuditAction
    },
};
exports.TypeInfo.ReleaseDefinitionSummary.fields = {
    environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironmentSummary
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releases: {
        isArray: true,
        typeInfo: exports.TypeInfo.Release
    },
};
exports.TypeInfo.ReleaseDeployPhase.fields = {
    deploymentJobs: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentJob
    },
    manualInterventions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ManualIntervention
    },
    phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
    },
    status: {
        enumType: exports.TypeInfo.DeployPhaseStatus
    },
};
exports.TypeInfo.ReleaseEnvironment.fields = {
    conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.Condition
    },
    createdOn: {
        isDate: true,
    },
    deployPhasesSnapshot: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeployPhase
    },
    deploySteps: {
        isArray: true,
        typeInfo: exports.TypeInfo.DeploymentAttempt
    },
    environmentOptions: {
        typeInfo: exports.TypeInfo.EnvironmentOptions
    },
    modifiedOn: {
        isDate: true,
    },
    nextScheduledUtcTime: {
        isDate: true,
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    postApprovalsSnapshot: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
    },
    postDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    preApprovalsSnapshot: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovals
    },
    preDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    release: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releaseCreatedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    scheduledDeploymentTime: {
        isDate: true,
    },
    schedules: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseSchedule
    },
    status: {
        enumType: exports.TypeInfo.EnvironmentStatus
    },
    variables: {},
    workflowTasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkflowTask
    },
};
exports.TypeInfo.ReleaseEnvironmentCompletedEvent.fields = {
    conditions: {
        isArray: true,
        typeInfo: exports.TypeInfo.Condition
    },
    environment: {
        typeInfo: exports.TypeInfo.ReleaseEnvironment
    },
    reason: {
        enumType: exports.TypeInfo.DeploymentReason
    },
    releaseCreatedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.ReleaseEnvironmentUpdateMetadata.fields = {
    scheduledDeploymentTime: {
        isDate: true,
    },
    status: {
        enumType: exports.TypeInfo.EnvironmentStatus
    },
};
exports.TypeInfo.ReleaseReference.fields = {
    artifacts: {
        isArray: true,
        typeInfo: exports.TypeInfo.Artifact
    },
};
exports.TypeInfo.ReleaseRevision.fields = {
    changedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    changedDate: {
        isDate: true,
    },
};
exports.TypeInfo.ReleaseSchedule.fields = {
    daysToRelease: {
        enumType: exports.TypeInfo.ScheduleDays
    },
};
exports.TypeInfo.ReleaseStartMetadata.fields = {
    artifacts: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactMetadata
    },
    reason: {
        enumType: exports.TypeInfo.ReleaseReason
    },
};
exports.TypeInfo.ReleaseTask.fields = {
    dateEnded: {
        isDate: true,
    },
    dateStarted: {
        isDate: true,
    },
    finishTime: {
        isDate: true,
    },
    issues: {
        isArray: true,
        typeInfo: exports.TypeInfo.Issue
    },
    startTime: {
        isDate: true,
    },
    status: {
        enumType: exports.TypeInfo.TaskStatus
    },
};
exports.TypeInfo.ReleaseTaskLogUpdatedEvent.fields = {};
exports.TypeInfo.ReleaseTasksUpdatedEvent.fields = {
    job: {
        typeInfo: exports.TypeInfo.ReleaseTask
    },
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTask
    },
};
exports.TypeInfo.ReleaseTriggerBase.fields = {
    triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
    },
};
exports.TypeInfo.ReleaseUpdatedEvent.fields = {
    release: {
        typeInfo: exports.TypeInfo.Release
    },
};
exports.TypeInfo.ReleaseUpdateMetadata.fields = {
    status: {
        enumType: exports.TypeInfo.ReleaseStatus
    },
};
exports.TypeInfo.ReleaseWorkItemRef.fields = {};
exports.TypeInfo.RetentionPolicy.fields = {};
exports.TypeInfo.RunOnServerDeployPhase.fields = {
    controlOptions: {
        typeInfo: exports.TypeInfo.ControlOptions
    },
    phaseType: {
        enumType: exports.TypeInfo.DeployPhaseTypes
    },
    workflowTasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkflowTask
    },
};
exports.TypeInfo.ScheduledReleaseTrigger.fields = {
    schedule: {
        typeInfo: exports.TypeInfo.ReleaseSchedule
    },
    triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
    },
};
exports.TypeInfo.ShallowReference.fields = {};
exports.TypeInfo.SourceIdInput.fields = {};
exports.TypeInfo.SummaryMailSection.fields = {
    sectionType: {
        enumType: exports.TypeInfo.MailSectionType
    },
};
exports.TypeInfo.TimeZone.fields = {};
exports.TypeInfo.TimeZoneList.fields = {
    utcTimeZone: {
        typeInfo: exports.TypeInfo.TimeZone
    },
    validTimeZones: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimeZone
    },
};
exports.TypeInfo.WorkflowTask.fields = {};
