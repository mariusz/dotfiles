/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var FormInputInterfaces = require("../interfaces/common/FormInputInterfaces");
var VSSInterfaces = require("../interfaces/common/VSSInterfaces");
(function (IssueType) {
    IssueType[IssueType["Error"] = 1] = "Error";
    IssueType[IssueType["Warning"] = 2] = "Warning";
})(exports.IssueType || (exports.IssueType = {}));
var IssueType = exports.IssueType;
(function (MaskType) {
    MaskType[MaskType["Variable"] = 1] = "Variable";
    MaskType[MaskType["Regex"] = 2] = "Regex";
})(exports.MaskType || (exports.MaskType = {}));
var MaskType = exports.MaskType;
(function (TaskAgentQueueActionFilter) {
    TaskAgentQueueActionFilter[TaskAgentQueueActionFilter["None"] = 0] = "None";
    TaskAgentQueueActionFilter[TaskAgentQueueActionFilter["Manage"] = 2] = "Manage";
    TaskAgentQueueActionFilter[TaskAgentQueueActionFilter["Use"] = 16] = "Use";
})(exports.TaskAgentQueueActionFilter || (exports.TaskAgentQueueActionFilter = {}));
var TaskAgentQueueActionFilter = exports.TaskAgentQueueActionFilter;
(function (TaskAgentStatus) {
    TaskAgentStatus[TaskAgentStatus["Offline"] = 1] = "Offline";
    TaskAgentStatus[TaskAgentStatus["Online"] = 2] = "Online";
})(exports.TaskAgentStatus || (exports.TaskAgentStatus = {}));
var TaskAgentStatus = exports.TaskAgentStatus;
(function (TaskDefinitionStatus) {
    TaskDefinitionStatus[TaskDefinitionStatus["Preinstalled"] = 1] = "Preinstalled";
    TaskDefinitionStatus[TaskDefinitionStatus["ReceivedInstallOrUpdate"] = 2] = "ReceivedInstallOrUpdate";
    TaskDefinitionStatus[TaskDefinitionStatus["Installed"] = 3] = "Installed";
    TaskDefinitionStatus[TaskDefinitionStatus["ReceivedUninstall"] = 4] = "ReceivedUninstall";
    TaskDefinitionStatus[TaskDefinitionStatus["Uninstalled"] = 5] = "Uninstalled";
    TaskDefinitionStatus[TaskDefinitionStatus["RequestedUpdate"] = 6] = "RequestedUpdate";
    TaskDefinitionStatus[TaskDefinitionStatus["Updated"] = 7] = "Updated";
    TaskDefinitionStatus[TaskDefinitionStatus["AlreadyUpToDate"] = 8] = "AlreadyUpToDate";
    TaskDefinitionStatus[TaskDefinitionStatus["InlineUpdateReceived"] = 9] = "InlineUpdateReceived";
})(exports.TaskDefinitionStatus || (exports.TaskDefinitionStatus = {}));
var TaskDefinitionStatus = exports.TaskDefinitionStatus;
(function (TaskOrchestrationItemType) {
    TaskOrchestrationItemType[TaskOrchestrationItemType["Container"] = 0] = "Container";
    TaskOrchestrationItemType[TaskOrchestrationItemType["Job"] = 1] = "Job";
})(exports.TaskOrchestrationItemType || (exports.TaskOrchestrationItemType = {}));
var TaskOrchestrationItemType = exports.TaskOrchestrationItemType;
(function (TaskOrchestrationPlanState) {
    TaskOrchestrationPlanState[TaskOrchestrationPlanState["InProgress"] = 1] = "InProgress";
    TaskOrchestrationPlanState[TaskOrchestrationPlanState["Queued"] = 2] = "Queued";
    TaskOrchestrationPlanState[TaskOrchestrationPlanState["Completed"] = 4] = "Completed";
})(exports.TaskOrchestrationPlanState || (exports.TaskOrchestrationPlanState = {}));
var TaskOrchestrationPlanState = exports.TaskOrchestrationPlanState;
(function (TaskResult) {
    TaskResult[TaskResult["Succeeded"] = 0] = "Succeeded";
    TaskResult[TaskResult["SucceededWithIssues"] = 1] = "SucceededWithIssues";
    TaskResult[TaskResult["Failed"] = 2] = "Failed";
    TaskResult[TaskResult["Canceled"] = 3] = "Canceled";
    TaskResult[TaskResult["Skipped"] = 4] = "Skipped";
    TaskResult[TaskResult["Abandoned"] = 5] = "Abandoned";
})(exports.TaskResult || (exports.TaskResult = {}));
var TaskResult = exports.TaskResult;
(function (TimelineRecordState) {
    TimelineRecordState[TimelineRecordState["Pending"] = 0] = "Pending";
    TimelineRecordState[TimelineRecordState["InProgress"] = 1] = "InProgress";
    TimelineRecordState[TimelineRecordState["Completed"] = 2] = "Completed";
})(exports.TimelineRecordState || (exports.TimelineRecordState = {}));
var TimelineRecordState = exports.TimelineRecordState;
exports.TypeInfo = {
    AgentChangeEvent: {
        fields: null
    },
    AgentJobRequestMessage: {
        fields: null
    },
    AgentMigrationMessage: {
        fields: null
    },
    AgentPoolEvent: {
        fields: null
    },
    AgentQueueEvent: {
        fields: null
    },
    AgentRefreshMessage: {
        fields: null
    },
    AgentRequestEvent: {
        fields: null
    },
    AuthorizationHeader: {
        fields: null
    },
    AzureSpnOperationStatus: {
        fields: null
    },
    AzureSubscription: {
        fields: null
    },
    AzureSubscriptionQueryResult: {
        fields: null
    },
    DataSource: {
        fields: null
    },
    DataSourceBinding: {
        fields: null
    },
    DependencyBinding: {
        fields: null
    },
    DependsOn: {
        fields: null
    },
    EndpointAuthorization: {
        fields: null
    },
    EndpointUrl: {
        fields: null
    },
    HelpLink: {
        fields: null
    },
    Issue: {
        fields: null
    },
    IssueType: {
        enumValues: {
            "error": 1,
            "warning": 2,
        }
    },
    JobAssignedEvent: {
        fields: null
    },
    JobCancelMessage: {
        fields: null
    },
    JobCompletedEvent: {
        fields: null
    },
    JobEnvironment: {
        fields: null
    },
    JobEvent: {
        fields: null
    },
    JobEventConfig: {
        fields: null
    },
    JobEventsConfig: {
        fields: null
    },
    JobOption: {
        fields: null
    },
    JobRequestMessage: {
        fields: null
    },
    JobStartedEvent: {
        fields: null
    },
    MaskHint: {
        fields: null
    },
    MaskType: {
        enumValues: {
            "variable": 1,
            "regex": 2,
        }
    },
    MetaTaskDefinition: {
        fields: null
    },
    MetaTaskStep: {
        fields: null
    },
    PackageMetadata: {
        fields: null
    },
    PackageVersion: {
        fields: null
    },
    PlanEnvironment: {
        fields: null
    },
    SendJobResponse: {
        fields: null
    },
    ServerExecutionDefinition: {
        fields: null
    },
    ServerJobRequestMessage: {
        fields: null
    },
    ServiceEndpoint: {
        fields: null
    },
    ServiceEndpointAuthenticationScheme: {
        fields: null
    },
    ServiceEndpointType: {
        fields: null
    },
    TaskAgent: {
        fields: null
    },
    TaskAgentAuthorization: {
        fields: null
    },
    TaskAgentJobRequest: {
        fields: null
    },
    TaskAgentMessage: {
        fields: null
    },
    TaskAgentPool: {
        fields: null
    },
    TaskAgentPoolReference: {
        fields: null
    },
    TaskAgentPublicKey: {
        fields: null
    },
    TaskAgentQueue: {
        fields: null
    },
    TaskAgentQueueActionFilter: {
        enumValues: {
            "none": 0,
            "manage": 2,
            "use": 16,
        }
    },
    TaskAgentReference: {
        fields: null
    },
    TaskAgentSession: {
        fields: null
    },
    TaskAgentSessionKey: {
        fields: null
    },
    TaskAgentStatus: {
        enumValues: {
            "offline": 1,
            "online": 2,
        }
    },
    TaskAttachment: {
        fields: null
    },
    TaskChangeEvent: {
        fields: null
    },
    TaskDefinition: {
        fields: null
    },
    TaskDefinitionEndpoint: {
        fields: null
    },
    TaskDefinitionReference: {
        fields: null
    },
    TaskDefinitionStatus: {
        enumValues: {
            "preinstalled": 1,
            "receivedInstallOrUpdate": 2,
            "installed": 3,
            "receivedUninstall": 4,
            "uninstalled": 5,
            "requestedUpdate": 6,
            "updated": 7,
            "alreadyUpToDate": 8,
            "inlineUpdateReceived": 9,
        }
    },
    TaskExecution: {
        fields: null
    },
    TaskGroupDefinition: {
        fields: null
    },
    TaskInputDefinition: {
        fields: null
    },
    TaskInstance: {
        fields: null
    },
    TaskLog: {
        fields: null
    },
    TaskLogReference: {
        fields: null
    },
    TaskOrchestrationContainer: {
        fields: null
    },
    TaskOrchestrationItem: {
        fields: null
    },
    TaskOrchestrationItemType: {
        enumValues: {
            "container": 0,
            "job": 1,
        }
    },
    TaskOrchestrationJob: {
        fields: null
    },
    TaskOrchestrationOwner: {
        fields: null
    },
    TaskOrchestrationPlan: {
        fields: null
    },
    TaskOrchestrationPlanReference: {
        fields: null
    },
    TaskOrchestrationPlanState: {
        enumValues: {
            "inProgress": 1,
            "queued": 2,
            "completed": 4,
        }
    },
    TaskPackageMetadata: {
        fields: null
    },
    TaskReference: {
        fields: null
    },
    TaskResult: {
        enumValues: {
            "succeeded": 0,
            "succeededWithIssues": 1,
            "failed": 2,
            "canceled": 3,
            "skipped": 4,
            "abandoned": 5,
        }
    },
    TaskSourceDefinition: {
        fields: null
    },
    TaskVersion: {
        fields: null
    },
    Timeline: {
        fields: null
    },
    TimelineRecord: {
        fields: null
    },
    TimelineRecordState: {
        enumValues: {
            "pending": 0,
            "inProgress": 1,
            "completed": 2,
        }
    },
    TimelineReference: {
        fields: null
    },
};
exports.TypeInfo.AgentChangeEvent.fields = {
    agent: {
        typeInfo: exports.TypeInfo.TaskAgent
    },
    timeStamp: {
        isDate: true,
    },
};
exports.TypeInfo.AgentJobRequestMessage.fields = {
    environment: {
        typeInfo: exports.TypeInfo.JobEnvironment
    },
    lockedUntil: {
        isDate: true,
    },
    plan: {
        typeInfo: exports.TypeInfo.TaskOrchestrationPlanReference
    },
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskInstance
    },
    timeline: {
        typeInfo: exports.TypeInfo.TimelineReference
    },
};
exports.TypeInfo.AgentMigrationMessage.fields = {};
exports.TypeInfo.AgentPoolEvent.fields = {
    pool: {
        typeInfo: exports.TypeInfo.TaskAgentPool
    },
};
exports.TypeInfo.AgentQueueEvent.fields = {
    queue: {
        typeInfo: exports.TypeInfo.TaskAgentQueue
    },
};
exports.TypeInfo.AgentRefreshMessage.fields = {};
exports.TypeInfo.AgentRequestEvent.fields = {
    result: {
        enumType: exports.TypeInfo.TaskResult
    },
    timeStamp: {
        isDate: true,
    },
};
exports.TypeInfo.AuthorizationHeader.fields = {};
exports.TypeInfo.AzureSpnOperationStatus.fields = {};
exports.TypeInfo.AzureSubscription.fields = {};
exports.TypeInfo.AzureSubscriptionQueryResult.fields = {
    value: {
        isArray: true,
        typeInfo: exports.TypeInfo.AzureSubscription
    },
};
exports.TypeInfo.DataSource.fields = {};
exports.TypeInfo.DataSourceBinding.fields = {};
exports.TypeInfo.DependencyBinding.fields = {};
exports.TypeInfo.DependsOn.fields = {
    map: {
        isArray: true,
        typeInfo: exports.TypeInfo.DependencyBinding
    },
};
exports.TypeInfo.EndpointAuthorization.fields = {};
exports.TypeInfo.EndpointUrl.fields = {
    dependsOn: {
        typeInfo: exports.TypeInfo.DependsOn
    },
};
exports.TypeInfo.HelpLink.fields = {};
exports.TypeInfo.Issue.fields = {
    type: {
        enumType: exports.TypeInfo.IssueType
    },
};
exports.TypeInfo.JobAssignedEvent.fields = {
    request: {
        typeInfo: exports.TypeInfo.TaskAgentJobRequest
    },
};
exports.TypeInfo.JobCancelMessage.fields = {};
exports.TypeInfo.JobCompletedEvent.fields = {
    result: {
        enumType: exports.TypeInfo.TaskResult
    },
};
exports.TypeInfo.JobEnvironment.fields = {
    endpoints: {
        isArray: true,
        typeInfo: exports.TypeInfo.ServiceEndpoint
    },
    mask: {
        isArray: true,
        typeInfo: exports.TypeInfo.MaskHint
    },
    options: {},
    systemConnection: {
        typeInfo: exports.TypeInfo.ServiceEndpoint
    },
};
exports.TypeInfo.JobEvent.fields = {};
exports.TypeInfo.JobEventConfig.fields = {};
exports.TypeInfo.JobEventsConfig.fields = {
    jobAssigned: {
        typeInfo: exports.TypeInfo.JobEventConfig
    },
    jobCompleted: {
        typeInfo: exports.TypeInfo.JobEventConfig
    },
    jobStarted: {
        typeInfo: exports.TypeInfo.JobEventConfig
    },
};
exports.TypeInfo.JobOption.fields = {};
exports.TypeInfo.JobRequestMessage.fields = {
    environment: {
        typeInfo: exports.TypeInfo.JobEnvironment
    },
    plan: {
        typeInfo: exports.TypeInfo.TaskOrchestrationPlanReference
    },
    timeline: {
        typeInfo: exports.TypeInfo.TimelineReference
    },
};
exports.TypeInfo.JobStartedEvent.fields = {};
exports.TypeInfo.MaskHint.fields = {
    type: {
        enumType: exports.TypeInfo.MaskType
    },
};
exports.TypeInfo.MetaTaskDefinition.fields = {
    agentExecution: {
        typeInfo: exports.TypeInfo.TaskExecution
    },
    dataSourceBindings: {
        isArray: true,
        typeInfo: exports.TypeInfo.DataSourceBinding
    },
    groups: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskGroupDefinition
    },
    inputs: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskInputDefinition
    },
    sourceDefinitions: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskSourceDefinition
    },
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.MetaTaskStep
    },
    version: {
        typeInfo: exports.TypeInfo.TaskVersion
    },
};
exports.TypeInfo.MetaTaskStep.fields = {
    task: {
        typeInfo: exports.TypeInfo.TaskDefinitionReference
    },
};
exports.TypeInfo.PackageMetadata.fields = {
    createdOn: {
        isDate: true,
    },
    version: {
        typeInfo: exports.TypeInfo.PackageVersion
    },
};
exports.TypeInfo.PackageVersion.fields = {};
exports.TypeInfo.PlanEnvironment.fields = {
    mask: {
        isArray: true,
        typeInfo: exports.TypeInfo.MaskHint
    },
    options: {},
};
exports.TypeInfo.SendJobResponse.fields = {
    events: {
        typeInfo: exports.TypeInfo.JobEventsConfig
    },
};
exports.TypeInfo.ServerExecutionDefinition.fields = {
    events: {
        typeInfo: exports.TypeInfo.JobEventsConfig
    },
};
exports.TypeInfo.ServerJobRequestMessage.fields = {
    environment: {
        typeInfo: exports.TypeInfo.JobEnvironment
    },
    plan: {
        typeInfo: exports.TypeInfo.TaskOrchestrationPlanReference
    },
    taskDefinition: {
        typeInfo: exports.TypeInfo.TaskDefinition
    },
    taskInstance: {
        typeInfo: exports.TypeInfo.TaskInstance
    },
    timeline: {
        typeInfo: exports.TypeInfo.TimelineReference
    },
};
exports.TypeInfo.ServiceEndpoint.fields = {
    administratorsGroup: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    authorization: {
        typeInfo: exports.TypeInfo.EndpointAuthorization
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    readersGroup: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.ServiceEndpointAuthenticationScheme.fields = {
    authorizationHeaders: {
        isArray: true,
        typeInfo: exports.TypeInfo.AuthorizationHeader
    },
    inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
    },
};
exports.TypeInfo.ServiceEndpointType.fields = {
    authenticationSchemes: {
        isArray: true,
        typeInfo: exports.TypeInfo.ServiceEndpointAuthenticationScheme
    },
    dataSources: {
        isArray: true,
        typeInfo: exports.TypeInfo.DataSource
    },
    endpointUrl: {
        typeInfo: exports.TypeInfo.EndpointUrl
    },
    helpLink: {
        typeInfo: exports.TypeInfo.HelpLink
    },
    inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
    },
};
exports.TypeInfo.TaskAgent.fields = {
    assignedRequest: {
        typeInfo: exports.TypeInfo.TaskAgentJobRequest
    },
    authorization: {
        typeInfo: exports.TypeInfo.TaskAgentAuthorization
    },
    createdOn: {
        isDate: true,
    },
    status: {
        enumType: exports.TypeInfo.TaskAgentStatus
    },
    statusChangedOn: {
        isDate: true,
    },
};
exports.TypeInfo.TaskAgentAuthorization.fields = {
    publicKey: {
        typeInfo: exports.TypeInfo.TaskAgentPublicKey
    },
};
exports.TypeInfo.TaskAgentJobRequest.fields = {
    assignTime: {
        isDate: true,
    },
    definition: {
        typeInfo: exports.TypeInfo.TaskOrchestrationOwner
    },
    finishTime: {
        isDate: true,
    },
    lockedUntil: {
        isDate: true,
    },
    matchedAgents: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskAgentReference
    },
    owner: {
        typeInfo: exports.TypeInfo.TaskOrchestrationOwner
    },
    queueTime: {
        isDate: true,
    },
    receiveTime: {
        isDate: true,
    },
    reservedAgent: {
        typeInfo: exports.TypeInfo.TaskAgentReference
    },
    result: {
        enumType: exports.TypeInfo.TaskResult
    },
};
exports.TypeInfo.TaskAgentMessage.fields = {};
exports.TypeInfo.TaskAgentPool.fields = {
    administratorsGroup: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true,
    },
    serviceAccountsGroup: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.TaskAgentPoolReference.fields = {};
exports.TypeInfo.TaskAgentPublicKey.fields = {};
exports.TypeInfo.TaskAgentQueue.fields = {
    pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
    },
};
exports.TypeInfo.TaskAgentReference.fields = {
    status: {
        enumType: exports.TypeInfo.TaskAgentStatus
    },
};
exports.TypeInfo.TaskAgentSession.fields = {
    agent: {
        typeInfo: exports.TypeInfo.TaskAgentReference
    },
    encryptionKey: {
        typeInfo: exports.TypeInfo.TaskAgentSessionKey
    },
};
exports.TypeInfo.TaskAgentSessionKey.fields = {};
exports.TypeInfo.TaskAttachment.fields = {
    createdOn: {
        isDate: true,
    },
    lastChangedOn: {
        isDate: true,
    },
};
exports.TypeInfo.TaskChangeEvent.fields = {};
exports.TypeInfo.TaskDefinition.fields = {
    agentExecution: {
        typeInfo: exports.TypeInfo.TaskExecution
    },
    dataSourceBindings: {
        isArray: true,
        typeInfo: exports.TypeInfo.DataSourceBinding
    },
    groups: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskGroupDefinition
    },
    inputs: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskInputDefinition
    },
    sourceDefinitions: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskSourceDefinition
    },
    version: {
        typeInfo: exports.TypeInfo.TaskVersion
    },
};
exports.TypeInfo.TaskDefinitionEndpoint.fields = {};
exports.TypeInfo.TaskDefinitionReference.fields = {};
exports.TypeInfo.TaskExecution.fields = {
    execTask: {
        typeInfo: exports.TypeInfo.TaskReference
    },
};
exports.TypeInfo.TaskGroupDefinition.fields = {};
exports.TypeInfo.TaskInputDefinition.fields = {};
exports.TypeInfo.TaskInstance.fields = {};
exports.TypeInfo.TaskLog.fields = {
    createdOn: {
        isDate: true,
    },
    lastChangedOn: {
        isDate: true,
    },
};
exports.TypeInfo.TaskLogReference.fields = {};
exports.TypeInfo.TaskOrchestrationContainer.fields = {
    children: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskOrchestrationItem
    },
    itemType: {
        enumType: exports.TypeInfo.TaskOrchestrationItemType
    },
    rollback: {
        typeInfo: exports.TypeInfo.TaskOrchestrationContainer
    },
};
exports.TypeInfo.TaskOrchestrationItem.fields = {
    itemType: {
        enumType: exports.TypeInfo.TaskOrchestrationItemType
    },
};
exports.TypeInfo.TaskOrchestrationJob.fields = {
    executeAs: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    itemType: {
        enumType: exports.TypeInfo.TaskOrchestrationItemType
    },
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskInstance
    },
};
exports.TypeInfo.TaskOrchestrationOwner.fields = {};
exports.TypeInfo.TaskOrchestrationPlan.fields = {
    environment: {
        typeInfo: exports.TypeInfo.PlanEnvironment
    },
    finishTime: {
        isDate: true,
    },
    implementation: {
        typeInfo: exports.TypeInfo.TaskOrchestrationContainer
    },
    result: {
        enumType: exports.TypeInfo.TaskResult
    },
    startTime: {
        isDate: true,
    },
    state: {
        enumType: exports.TypeInfo.TaskOrchestrationPlanState
    },
    timeline: {
        typeInfo: exports.TypeInfo.TimelineReference
    },
};
exports.TypeInfo.TaskOrchestrationPlanReference.fields = {};
exports.TypeInfo.TaskPackageMetadata.fields = {};
exports.TypeInfo.TaskReference.fields = {};
exports.TypeInfo.TaskSourceDefinition.fields = {};
exports.TypeInfo.TaskVersion.fields = {};
exports.TypeInfo.Timeline.fields = {
    lastChangedOn: {
        isDate: true,
    },
    records: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimelineRecord
    },
};
exports.TypeInfo.TimelineRecord.fields = {
    details: {
        typeInfo: exports.TypeInfo.TimelineReference
    },
    finishTime: {
        isDate: true,
    },
    issues: {
        isArray: true,
        typeInfo: exports.TypeInfo.Issue
    },
    lastModified: {
        isDate: true,
    },
    log: {
        typeInfo: exports.TypeInfo.TaskLogReference
    },
    result: {
        enumType: exports.TypeInfo.TaskResult
    },
    startTime: {
        isDate: true,
    },
    state: {
        enumType: exports.TypeInfo.TimelineRecordState
    },
};
exports.TypeInfo.TimelineReference.fields = {};
