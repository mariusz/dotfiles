/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var TfsCoreInterfaces = require("../interfaces/CoreInterfaces");
var VSSInterfaces = require("../interfaces/common/VSSInterfaces");
(function (AgentStatus) {
    /**
     * Indicates that the build agent cannot be contacted.
     */
    AgentStatus[AgentStatus["Unavailable"] = 0] = "Unavailable";
    /**
     * Indicates that the build agent is currently available.
     */
    AgentStatus[AgentStatus["Available"] = 1] = "Available";
    /**
     * Indicates that the build agent has taken itself offline.
     */
    AgentStatus[AgentStatus["Offline"] = 2] = "Offline";
})(exports.AgentStatus || (exports.AgentStatus = {}));
var AgentStatus = exports.AgentStatus;
(function (AuditAction) {
    AuditAction[AuditAction["Add"] = 1] = "Add";
    AuditAction[AuditAction["Update"] = 2] = "Update";
    AuditAction[AuditAction["Delete"] = 3] = "Delete";
})(exports.AuditAction || (exports.AuditAction = {}));
var AuditAction = exports.AuditAction;
(function (BuildAuthorizationScope) {
    /**
     * The identity used should have build service account permissions scoped to the project collection. This is useful when resources for a single build are spread across multiple projects.
     */
    BuildAuthorizationScope[BuildAuthorizationScope["ProjectCollection"] = 1] = "ProjectCollection";
    /**
     * The identity used should have build service account permissions scoped to the project in which the build definition resides. This is useful for isolation of build jobs to a particular team project to avoid any unintentional escalation of privilege attacks during a build.
     */
    BuildAuthorizationScope[BuildAuthorizationScope["Project"] = 2] = "Project";
})(exports.BuildAuthorizationScope || (exports.BuildAuthorizationScope = {}));
var BuildAuthorizationScope = exports.BuildAuthorizationScope;
(function (BuildOptionInputType) {
    BuildOptionInputType[BuildOptionInputType["String"] = 0] = "String";
    BuildOptionInputType[BuildOptionInputType["Boolean"] = 1] = "Boolean";
    BuildOptionInputType[BuildOptionInputType["StringList"] = 2] = "StringList";
    BuildOptionInputType[BuildOptionInputType["Radio"] = 3] = "Radio";
    BuildOptionInputType[BuildOptionInputType["PickList"] = 4] = "PickList";
    BuildOptionInputType[BuildOptionInputType["MultiLine"] = 5] = "MultiLine";
})(exports.BuildOptionInputType || (exports.BuildOptionInputType = {}));
var BuildOptionInputType = exports.BuildOptionInputType;
(function (BuildPhaseStatus) {
    /**
     * The state is not known.
     */
    BuildPhaseStatus[BuildPhaseStatus["Unknown"] = 0] = "Unknown";
    /**
     * The build phase completed unsuccessfully.
     */
    BuildPhaseStatus[BuildPhaseStatus["Failed"] = 1] = "Failed";
    /**
     * The build phase completed successfully.
     */
    BuildPhaseStatus[BuildPhaseStatus["Succeeded"] = 2] = "Succeeded";
})(exports.BuildPhaseStatus || (exports.BuildPhaseStatus = {}));
var BuildPhaseStatus = exports.BuildPhaseStatus;
(function (BuildQueryOrder) {
    /**
     * Order by finish time ascending.
     */
    BuildQueryOrder[BuildQueryOrder["FinishTimeAscending"] = 2] = "FinishTimeAscending";
    /**
     * Order by finish time descending.
     */
    BuildQueryOrder[BuildQueryOrder["FinishTimeDescending"] = 3] = "FinishTimeDescending";
})(exports.BuildQueryOrder || (exports.BuildQueryOrder = {}));
var BuildQueryOrder = exports.BuildQueryOrder;
(function (BuildReason) {
    /**
     * No reason. This value should not be used.
     */
    BuildReason[BuildReason["None"] = 0] = "None";
    /**
     * The build was started manually.
     */
    BuildReason[BuildReason["Manual"] = 1] = "Manual";
    /**
     * The build was started for the trigger TriggerType.ContinuousIntegration.
     */
    BuildReason[BuildReason["IndividualCI"] = 2] = "IndividualCI";
    /**
     * The build was started for the trigger TriggerType.BatchedContinuousIntegration.
     */
    BuildReason[BuildReason["BatchedCI"] = 4] = "BatchedCI";
    /**
     * The build was started for the trigger TriggerType.Schedule.
     */
    BuildReason[BuildReason["Schedule"] = 8] = "Schedule";
    /**
     * The build was created by a user.
     */
    BuildReason[BuildReason["UserCreated"] = 32] = "UserCreated";
    /**
     * The build was started manually for private validation.
     */
    BuildReason[BuildReason["ValidateShelveset"] = 64] = "ValidateShelveset";
    /**
     * The build was started for the trigger ContinuousIntegrationType.Gated.
     */
    BuildReason[BuildReason["CheckInShelveset"] = 128] = "CheckInShelveset";
    /**
     * The build was started by a pull request. Added in resource version 3.
     */
    BuildReason[BuildReason["PullRequest"] = 256] = "PullRequest";
    /**
     * The build was triggered for retention policy purposes.
     */
    BuildReason[BuildReason["Triggered"] = 431] = "Triggered";
    /**
     * All reasons.
     */
    BuildReason[BuildReason["All"] = 495] = "All";
})(exports.BuildReason || (exports.BuildReason = {}));
var BuildReason = exports.BuildReason;
(function (BuildResult) {
    /**
     * No result
     */
    BuildResult[BuildResult["None"] = 0] = "None";
    /**
     * The build completed successfully.
     */
    BuildResult[BuildResult["Succeeded"] = 2] = "Succeeded";
    /**
     * The build completed compilation successfully but had other errors.
     */
    BuildResult[BuildResult["PartiallySucceeded"] = 4] = "PartiallySucceeded";
    /**
     * The build completed unsuccessfully.
     */
    BuildResult[BuildResult["Failed"] = 8] = "Failed";
    /**
     * The build was canceled before starting.
     */
    BuildResult[BuildResult["Canceled"] = 32] = "Canceled";
})(exports.BuildResult || (exports.BuildResult = {}));
var BuildResult = exports.BuildResult;
(function (BuildStatus) {
    /**
     * No status.
     */
    BuildStatus[BuildStatus["None"] = 0] = "None";
    /**
     * The build is currently in progress.
     */
    BuildStatus[BuildStatus["InProgress"] = 1] = "InProgress";
    /**
     * The build has completed.
     */
    BuildStatus[BuildStatus["Completed"] = 2] = "Completed";
    /**
     * The build is cancelling
     */
    BuildStatus[BuildStatus["Cancelling"] = 4] = "Cancelling";
    /**
     * The build is inactive in the queue.
     */
    BuildStatus[BuildStatus["Postponed"] = 8] = "Postponed";
    /**
     * The build has not yet started.
     */
    BuildStatus[BuildStatus["NotStarted"] = 32] = "NotStarted";
    /**
     * All status.
     */
    BuildStatus[BuildStatus["All"] = 47] = "All";
})(exports.BuildStatus || (exports.BuildStatus = {}));
var BuildStatus = exports.BuildStatus;
(function (ControllerStatus) {
    /**
     * Indicates that the build controller cannot be contacted.
     */
    ControllerStatus[ControllerStatus["Unavailable"] = 0] = "Unavailable";
    /**
     * Indicates that the build controller is currently available.
     */
    ControllerStatus[ControllerStatus["Available"] = 1] = "Available";
    /**
     * Indicates that the build controller has taken itself offline.
     */
    ControllerStatus[ControllerStatus["Offline"] = 2] = "Offline";
})(exports.ControllerStatus || (exports.ControllerStatus = {}));
var ControllerStatus = exports.ControllerStatus;
(function (DefinitionQuality) {
    DefinitionQuality[DefinitionQuality["Definition"] = 1] = "Definition";
    DefinitionQuality[DefinitionQuality["Draft"] = 2] = "Draft";
})(exports.DefinitionQuality || (exports.DefinitionQuality = {}));
var DefinitionQuality = exports.DefinitionQuality;
(function (DefinitionQueryOrder) {
    /**
     * No order
     */
    DefinitionQueryOrder[DefinitionQueryOrder["None"] = 0] = "None";
    /**
     * Order by created on/last modified time ascending.
     */
    DefinitionQueryOrder[DefinitionQueryOrder["LastModifiedAscending"] = 1] = "LastModifiedAscending";
    /**
     * Order by created on/last modified time descending.
     */
    DefinitionQueryOrder[DefinitionQueryOrder["LastModifiedDescending"] = 2] = "LastModifiedDescending";
    /**
     * Order by definition name ascending.
     */
    DefinitionQueryOrder[DefinitionQueryOrder["DefinitionNameAscending"] = 3] = "DefinitionNameAscending";
    /**
     * Order by definition name descending.
     */
    DefinitionQueryOrder[DefinitionQueryOrder["DefinitionNameDescending"] = 4] = "DefinitionNameDescending";
})(exports.DefinitionQueryOrder || (exports.DefinitionQueryOrder = {}));
var DefinitionQueryOrder = exports.DefinitionQueryOrder;
(function (DefinitionQueueStatus) {
    /**
     * When enabled the definition queue allows builds to be queued by users, the system will queue scheduled, gated and continuous integration builds, and the queued builds will be started by the system.
     */
    DefinitionQueueStatus[DefinitionQueueStatus["Enabled"] = 0] = "Enabled";
    /**
     * When paused the definition queue allows builds to be queued by users and the system will queue scheduled, gated and continuous integration builds. Builds in the queue will not be started by the system.
     */
    DefinitionQueueStatus[DefinitionQueueStatus["Paused"] = 1] = "Paused";
    /**
     * When disabled the definition queue will not allow builds to be queued by users and the system will not queue scheduled, gated or continuous integration builds. Builds already in the queue will not be started by the system.
     */
    DefinitionQueueStatus[DefinitionQueueStatus["Disabled"] = 2] = "Disabled";
})(exports.DefinitionQueueStatus || (exports.DefinitionQueueStatus = {}));
var DefinitionQueueStatus = exports.DefinitionQueueStatus;
(function (DefinitionTriggerType) {
    /**
     * Manual builds only.
     */
    DefinitionTriggerType[DefinitionTriggerType["None"] = 1] = "None";
    /**
     * A build should be started for each changeset.
     */
    DefinitionTriggerType[DefinitionTriggerType["ContinuousIntegration"] = 2] = "ContinuousIntegration";
    /**
     * A build should be started for multiple changesets at a time at a specified interval.
     */
    DefinitionTriggerType[DefinitionTriggerType["BatchedContinuousIntegration"] = 4] = "BatchedContinuousIntegration";
    /**
     * A build should be started on a specified schedule whether or not changesets exist.
     */
    DefinitionTriggerType[DefinitionTriggerType["Schedule"] = 8] = "Schedule";
    /**
     * A validation build should be started for each check-in.
     */
    DefinitionTriggerType[DefinitionTriggerType["GatedCheckIn"] = 16] = "GatedCheckIn";
    /**
     * A validation build should be started for each batch of check-ins.
     */
    DefinitionTriggerType[DefinitionTriggerType["BatchedGatedCheckIn"] = 32] = "BatchedGatedCheckIn";
    /**
     * All types.
     */
    DefinitionTriggerType[DefinitionTriggerType["All"] = 63] = "All";
})(exports.DefinitionTriggerType || (exports.DefinitionTriggerType = {}));
var DefinitionTriggerType = exports.DefinitionTriggerType;
(function (DefinitionType) {
    DefinitionType[DefinitionType["Xaml"] = 1] = "Xaml";
    DefinitionType[DefinitionType["Build"] = 2] = "Build";
})(exports.DefinitionType || (exports.DefinitionType = {}));
var DefinitionType = exports.DefinitionType;
(function (DeleteOptions) {
    /**
     * No data should be deleted. This value should not be used.
     */
    DeleteOptions[DeleteOptions["None"] = 0] = "None";
    /**
     * The drop location should be deleted.
     */
    DeleteOptions[DeleteOptions["DropLocation"] = 1] = "DropLocation";
    /**
     * The test results should be deleted.
     */
    DeleteOptions[DeleteOptions["TestResults"] = 2] = "TestResults";
    /**
     * The version control label should be deleted.
     */
    DeleteOptions[DeleteOptions["Label"] = 4] = "Label";
    /**
     * The build should be deleted.
     */
    DeleteOptions[DeleteOptions["Details"] = 8] = "Details";
    /**
     * Published symbols should be deleted.
     */
    DeleteOptions[DeleteOptions["Symbols"] = 16] = "Symbols";
    /**
     * All data should be deleted.
     */
    DeleteOptions[DeleteOptions["All"] = 31] = "All";
})(exports.DeleteOptions || (exports.DeleteOptions = {}));
var DeleteOptions = exports.DeleteOptions;
(function (FolderQueryOrder) {
    /**
     * No order
     */
    FolderQueryOrder[FolderQueryOrder["None"] = 0] = "None";
    /**
     * Order by folder name and path ascending.
     */
    FolderQueryOrder[FolderQueryOrder["FolderAscending"] = 1] = "FolderAscending";
    /**
     * Order by folder name and path descending.
     */
    FolderQueryOrder[FolderQueryOrder["FolderDescending"] = 2] = "FolderDescending";
})(exports.FolderQueryOrder || (exports.FolderQueryOrder = {}));
var FolderQueryOrder = exports.FolderQueryOrder;
(function (GetOption) {
    /**
     * Use the latest changeset at the time the build is queued.
     */
    GetOption[GetOption["LatestOnQueue"] = 0] = "LatestOnQueue";
    /**
     * Use the latest changeset at the time the build is started.
     */
    GetOption[GetOption["LatestOnBuild"] = 1] = "LatestOnBuild";
    /**
     * A user-specified version has been supplied.
     */
    GetOption[GetOption["Custom"] = 2] = "Custom";
})(exports.GetOption || (exports.GetOption = {}));
var GetOption = exports.GetOption;
(function (IssueType) {
    IssueType[IssueType["Error"] = 1] = "Error";
    IssueType[IssueType["Warning"] = 2] = "Warning";
})(exports.IssueType || (exports.IssueType = {}));
var IssueType = exports.IssueType;
(function (ProcessTemplateType) {
    /**
     * Indicates a custom template.
     */
    ProcessTemplateType[ProcessTemplateType["Custom"] = 0] = "Custom";
    /**
     * Indicates a default template.
     */
    ProcessTemplateType[ProcessTemplateType["Default"] = 1] = "Default";
    /**
     * Indicates an upgrade template.
     */
    ProcessTemplateType[ProcessTemplateType["Upgrade"] = 2] = "Upgrade";
})(exports.ProcessTemplateType || (exports.ProcessTemplateType = {}));
var ProcessTemplateType = exports.ProcessTemplateType;
(function (QueryDeletedOption) {
    /**
     * Include only non-deleted builds.
     */
    QueryDeletedOption[QueryDeletedOption["ExcludeDeleted"] = 0] = "ExcludeDeleted";
    /**
     * Include deleted and non-deleted builds.
     */
    QueryDeletedOption[QueryDeletedOption["IncludeDeleted"] = 1] = "IncludeDeleted";
    /**
     * Include only deleted builds.
     */
    QueryDeletedOption[QueryDeletedOption["OnlyDeleted"] = 2] = "OnlyDeleted";
})(exports.QueryDeletedOption || (exports.QueryDeletedOption = {}));
var QueryDeletedOption = exports.QueryDeletedOption;
(function (QueueOptions) {
    /**
     * No queue options
     */
    QueueOptions[QueueOptions["None"] = 0] = "None";
    /**
     * Create a plan Id for the build, do not run it
     */
    QueueOptions[QueueOptions["DoNotRun"] = 1] = "DoNotRun";
})(exports.QueueOptions || (exports.QueueOptions = {}));
var QueueOptions = exports.QueueOptions;
(function (QueuePriority) {
    /**
     * Low priority.
     */
    QueuePriority[QueuePriority["Low"] = 5] = "Low";
    /**
     * Below normal priority.
     */
    QueuePriority[QueuePriority["BelowNormal"] = 4] = "BelowNormal";
    /**
     * Normal priority.
     */
    QueuePriority[QueuePriority["Normal"] = 3] = "Normal";
    /**
     * Above normal priority.
     */
    QueuePriority[QueuePriority["AboveNormal"] = 2] = "AboveNormal";
    /**
     * High priority.
     */
    QueuePriority[QueuePriority["High"] = 1] = "High";
})(exports.QueuePriority || (exports.QueuePriority = {}));
var QueuePriority = exports.QueuePriority;
(function (ScheduleDays) {
    /**
     * Do not run.
     */
    ScheduleDays[ScheduleDays["None"] = 0] = "None";
    /**
     * Run on Monday.
     */
    ScheduleDays[ScheduleDays["Monday"] = 1] = "Monday";
    /**
     * Run on Tuesday.
     */
    ScheduleDays[ScheduleDays["Tuesday"] = 2] = "Tuesday";
    /**
     * Run on Wednesday.
     */
    ScheduleDays[ScheduleDays["Wednesday"] = 4] = "Wednesday";
    /**
     * Run on Thursday.
     */
    ScheduleDays[ScheduleDays["Thursday"] = 8] = "Thursday";
    /**
     * Run on Friday.
     */
    ScheduleDays[ScheduleDays["Friday"] = 16] = "Friday";
    /**
     * Run on Saturday.
     */
    ScheduleDays[ScheduleDays["Saturday"] = 32] = "Saturday";
    /**
     * Run on Sunday.
     */
    ScheduleDays[ScheduleDays["Sunday"] = 64] = "Sunday";
    /**
     * Run on all days of the week.
     */
    ScheduleDays[ScheduleDays["All"] = 127] = "All";
})(exports.ScheduleDays || (exports.ScheduleDays = {}));
var ScheduleDays = exports.ScheduleDays;
(function (ServiceHostStatus) {
    /**
     * The service host is currently connected and accepting commands.
     */
    ServiceHostStatus[ServiceHostStatus["Online"] = 1] = "Online";
    /**
     * The service host is currently disconnected and not accepting commands.
     */
    ServiceHostStatus[ServiceHostStatus["Offline"] = 2] = "Offline";
})(exports.ServiceHostStatus || (exports.ServiceHostStatus = {}));
var ServiceHostStatus = exports.ServiceHostStatus;
(function (TaskResult) {
    TaskResult[TaskResult["Succeeded"] = 0] = "Succeeded";
    TaskResult[TaskResult["SucceededWithIssues"] = 1] = "SucceededWithIssues";
    TaskResult[TaskResult["Failed"] = 2] = "Failed";
    TaskResult[TaskResult["Canceled"] = 3] = "Canceled";
    TaskResult[TaskResult["Skipped"] = 4] = "Skipped";
    TaskResult[TaskResult["Abandoned"] = 5] = "Abandoned";
})(exports.TaskResult || (exports.TaskResult = {}));
var TaskResult = exports.TaskResult;
(function (TimelineRecordState) {
    TimelineRecordState[TimelineRecordState["Pending"] = 0] = "Pending";
    TimelineRecordState[TimelineRecordState["InProgress"] = 1] = "InProgress";
    TimelineRecordState[TimelineRecordState["Completed"] = 2] = "Completed";
})(exports.TimelineRecordState || (exports.TimelineRecordState = {}));
var TimelineRecordState = exports.TimelineRecordState;
(function (ValidationResult) {
    ValidationResult[ValidationResult["OK"] = 0] = "OK";
    ValidationResult[ValidationResult["Warning"] = 1] = "Warning";
    ValidationResult[ValidationResult["Error"] = 2] = "Error";
})(exports.ValidationResult || (exports.ValidationResult = {}));
var ValidationResult = exports.ValidationResult;
(function (WorkspaceMappingType) {
    /**
     * The path is mapped in the workspace.
     */
    WorkspaceMappingType[WorkspaceMappingType["Map"] = 0] = "Map";
    /**
     * The path is cloaked in the workspace.
     */
    WorkspaceMappingType[WorkspaceMappingType["Cloak"] = 1] = "Cloak";
})(exports.WorkspaceMappingType || (exports.WorkspaceMappingType = {}));
var WorkspaceMappingType = exports.WorkspaceMappingType;
exports.TypeInfo = {
    AgentPoolQueue: {
        fields: null
    },
    AgentStatus: {
        enumValues: {
            "unavailable": 0,
            "available": 1,
            "offline": 2,
        }
    },
    ArtifactResource: {
        fields: null
    },
    AuditAction: {
        enumValues: {
            "add": 1,
            "update": 2,
            "delete": 3,
        }
    },
    Build: {
        fields: null
    },
    BuildAgent: {
        fields: null
    },
    BuildArtifact: {
        fields: null
    },
    BuildArtifactAddedEvent: {
        fields: null
    },
    BuildAuthorizationScope: {
        enumValues: {
            "projectCollection": 1,
            "project": 2,
        }
    },
    BuildBadge: {
        fields: null
    },
    BuildChangesCalculatedEvent: {
        fields: null
    },
    BuildCompletedEvent: {
        fields: null
    },
    BuildController: {
        fields: null
    },
    BuildDefinition: {
        fields: null
    },
    BuildDefinitionChangedEvent: {
        fields: null
    },
    BuildDefinitionChangingEvent: {
        fields: null
    },
    BuildDefinitionReference: {
        fields: null
    },
    BuildDefinitionRevision: {
        fields: null
    },
    BuildDefinitionSourceProvider: {
        fields: null
    },
    BuildDefinitionStep: {
        fields: null
    },
    BuildDefinitionTemplate: {
        fields: null
    },
    BuildDefinitionVariable: {
        fields: null
    },
    BuildDeletedEvent: {
        fields: null
    },
    BuildDeployment: {
        fields: null
    },
    BuildDestroyedEvent: {
        fields: null
    },
    BuildLog: {
        fields: null
    },
    BuildLogReference: {
        fields: null
    },
    BuildMetric: {
        fields: null
    },
    BuildOption: {
        fields: null
    },
    BuildOptionDefinition: {
        fields: null
    },
    BuildOptionDefinitionReference: {
        fields: null
    },
    BuildOptionGroupDefinition: {
        fields: null
    },
    BuildOptionInputDefinition: {
        fields: null
    },
    BuildOptionInputType: {
        enumValues: {
            "string": 0,
            "boolean": 1,
            "stringList": 2,
            "radio": 3,
            "pickList": 4,
            "multiLine": 5,
        }
    },
    BuildPhaseStatus: {
        enumValues: {
            "unknown": 0,
            "failed": 1,
            "succeeded": 2,
        }
    },
    BuildPollingSummaryEvent: {
        fields: null
    },
    BuildProcessTemplate: {
        fields: null
    },
    BuildQueryOrder: {
        enumValues: {
            "finishTimeAscending": 2,
            "finishTimeDescending": 3,
        }
    },
    BuildQueuedEvent: {
        fields: null
    },
    BuildReason: {
        enumValues: {
            "none": 0,
            "manual": 1,
            "individualCI": 2,
            "batchedCI": 4,
            "schedule": 8,
            "userCreated": 32,
            "validateShelveset": 64,
            "checkInShelveset": 128,
            "pullRequest": 256,
            "triggered": 431,
            "all": 495,
        }
    },
    BuildReference: {
        fields: null
    },
    BuildReportMetadata: {
        fields: null
    },
    BuildRepository: {
        fields: null
    },
    BuildRequestValidationResult: {
        fields: null
    },
    BuildResourceUsage: {
        fields: null
    },
    BuildResult: {
        enumValues: {
            "none": 0,
            "succeeded": 2,
            "partiallySucceeded": 4,
            "failed": 8,
            "canceled": 32,
        }
    },
    BuildServer: {
        fields: null
    },
    BuildSettings: {
        fields: null
    },
    BuildStartedEvent: {
        fields: null
    },
    BuildStatus: {
        enumValues: {
            "none": 0,
            "inProgress": 1,
            "completed": 2,
            "cancelling": 4,
            "postponed": 8,
            "notStarted": 32,
            "all": 47,
        }
    },
    BuildSummary: {
        fields: null
    },
    BuildTrigger: {
        fields: null
    },
    BuildUpdatedEvent: {
        fields: null
    },
    BuildWorkspace: {
        fields: null
    },
    Change: {
        fields: null
    },
    ConsoleLogEvent: {
        fields: null
    },
    ContinuousDeploymentDefinition: {
        fields: null
    },
    ContinuousIntegrationTrigger: {
        fields: null
    },
    ControllerStatus: {
        enumValues: {
            "unavailable": 0,
            "available": 1,
            "offline": 2,
        }
    },
    DefinitionQuality: {
        enumValues: {
            "definition": 1,
            "draft": 2,
        }
    },
    DefinitionQueryOrder: {
        enumValues: {
            "none": 0,
            "lastModifiedAscending": 1,
            "lastModifiedDescending": 2,
            "definitionNameAscending": 3,
            "definitionNameDescending": 4,
        }
    },
    DefinitionQueueStatus: {
        enumValues: {
            "enabled": 0,
            "paused": 1,
            "disabled": 2,
        }
    },
    DefinitionReference: {
        fields: null
    },
    DefinitionTriggerType: {
        enumValues: {
            "none": 1,
            "continuousIntegration": 2,
            "batchedContinuousIntegration": 4,
            "schedule": 8,
            "gatedCheckIn": 16,
            "batchedGatedCheckIn": 32,
            "all": 63,
        }
    },
    DefinitionType: {
        enumValues: {
            "xaml": 1,
            "build": 2,
        }
    },
    DeleteOptions: {
        enumValues: {
            "none": 0,
            "dropLocation": 1,
            "testResults": 2,
            "label": 4,
            "details": 8,
            "symbols": 16,
            "all": 31,
        }
    },
    Deployment: {
        fields: null
    },
    DeploymentBuild: {
        fields: null
    },
    DeploymentDeploy: {
        fields: null
    },
    DeploymentTest: {
        fields: null
    },
    Folder: {
        fields: null
    },
    FolderQueryOrder: {
        enumValues: {
            "none": 0,
            "folderAscending": 1,
            "folderDescending": 2,
        }
    },
    GatedCheckInTrigger: {
        fields: null
    },
    GetOption: {
        enumValues: {
            "latestOnQueue": 0,
            "latestOnBuild": 1,
            "custom": 2,
        }
    },
    InformationNode: {
        fields: null
    },
    Issue: {
        fields: null
    },
    IssueType: {
        enumValues: {
            "error": 1,
            "warning": 2,
        }
    },
    MappingDetails: {
        fields: null
    },
    ProcessTemplateType: {
        enumValues: {
            "custom": 0,
            "default": 1,
            "upgrade": 2,
        }
    },
    PropertyValue: {
        fields: null
    },
    QueryDeletedOption: {
        enumValues: {
            "excludeDeleted": 0,
            "includeDeleted": 1,
            "onlyDeleted": 2,
        }
    },
    QueueOptions: {
        enumValues: {
            "none": 0,
            "doNotRun": 1,
        }
    },
    QueuePriority: {
        enumValues: {
            "low": 5,
            "belowNormal": 4,
            "normal": 3,
            "aboveNormal": 2,
            "high": 1,
        }
    },
    RealtimeBuildEvent: {
        fields: null
    },
    RequestReference: {
        fields: null
    },
    RetentionPolicy: {
        fields: null
    },
    Schedule: {
        fields: null
    },
    ScheduleDays: {
        enumValues: {
            "none": 0,
            "monday": 1,
            "tuesday": 2,
            "wednesday": 4,
            "thursday": 8,
            "friday": 16,
            "saturday": 32,
            "sunday": 64,
            "all": 127,
        }
    },
    ScheduleTrigger: {
        fields: null
    },
    ServiceHostStatus: {
        enumValues: {
            "online": 1,
            "offline": 2,
        }
    },
    ShallowReference: {
        fields: null
    },
    SvnMappingDetails: {
        fields: null
    },
    SvnWorkspace: {
        fields: null
    },
    SyncBuildCompletedEvent: {
        fields: null
    },
    SyncBuildStartedEvent: {
        fields: null
    },
    TaskAgentPoolReference: {
        fields: null
    },
    TaskDefinitionReference: {
        fields: null
    },
    TaskOrchestrationPlanReference: {
        fields: null
    },
    TaskResult: {
        enumValues: {
            "succeeded": 0,
            "succeededWithIssues": 1,
            "failed": 2,
            "canceled": 3,
            "skipped": 4,
            "abandoned": 5,
        }
    },
    Timeline: {
        fields: null
    },
    TimelineRecord: {
        fields: null
    },
    TimelineRecordState: {
        enumValues: {
            "pending": 0,
            "inProgress": 1,
            "completed": 2,
        }
    },
    TimelineRecordsUpdatedEvent: {
        fields: null
    },
    TimelineReference: {
        fields: null
    },
    ValidationResult: {
        enumValues: {
            "oK": 0,
            "warning": 1,
            "error": 2,
        }
    },
    WorkspaceMapping: {
        fields: null
    },
    WorkspaceMappingType: {
        enumValues: {
            "map": 0,
            "cloak": 1,
        }
    },
    WorkspaceTemplate: {
        fields: null
    },
    XamlBuildDefinition: {
        fields: null
    },
};
exports.TypeInfo.AgentPoolQueue.fields = {
    pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
    },
};
exports.TypeInfo.ArtifactResource.fields = {};
exports.TypeInfo.Build.fields = {
    controller: {
        typeInfo: exports.TypeInfo.BuildController
    },
    definition: {
        typeInfo: exports.TypeInfo.DefinitionReference
    },
    deletedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    deletedDate: {
        isDate: true,
    },
    finishTime: {
        isDate: true,
    },
    lastChangedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    lastChangedDate: {
        isDate: true,
    },
    logs: {
        typeInfo: exports.TypeInfo.BuildLogReference
    },
    orchestrationPlan: {
        typeInfo: exports.TypeInfo.TaskOrchestrationPlanReference
    },
    plans: {
        isArray: true,
        typeInfo: exports.TypeInfo.TaskOrchestrationPlanReference
    },
    priority: {
        enumType: exports.TypeInfo.QueuePriority
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
    queue: {
        typeInfo: exports.TypeInfo.AgentPoolQueue
    },
    queueOptions: {
        enumType: exports.TypeInfo.QueueOptions
    },
    queueTime: {
        isDate: true,
    },
    reason: {
        enumType: exports.TypeInfo.BuildReason
    },
    repository: {
        typeInfo: exports.TypeInfo.BuildRepository
    },
    requestedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    requestedFor: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    result: {
        enumType: exports.TypeInfo.BuildResult
    },
    startTime: {
        isDate: true,
    },
    status: {
        enumType: exports.TypeInfo.BuildStatus
    },
    validationResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildRequestValidationResult
    },
};
exports.TypeInfo.BuildAgent.fields = {
    controller: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    createdDate: {
        isDate: true,
    },
    server: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    status: {
        enumType: exports.TypeInfo.AgentStatus
    },
    updatedDate: {
        isDate: true,
    },
};
exports.TypeInfo.BuildArtifact.fields = {
    resource: {
        typeInfo: exports.TypeInfo.ArtifactResource
    },
};
exports.TypeInfo.BuildArtifactAddedEvent.fields = {
    artifact: {
        typeInfo: exports.TypeInfo.BuildArtifact
    },
    build: {
        typeInfo: exports.TypeInfo.Build
    },
};
exports.TypeInfo.BuildBadge.fields = {};
exports.TypeInfo.BuildChangesCalculatedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    },
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.Change
    },
};
exports.TypeInfo.BuildCompletedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    },
};
exports.TypeInfo.BuildController.fields = {
    createdDate: {
        isDate: true,
    },
    status: {
        enumType: exports.TypeInfo.ControllerStatus
    },
    updatedDate: {
        isDate: true,
    },
};
exports.TypeInfo.BuildDefinition.fields = {
    authoredBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    build: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildDefinitionStep
    },
    createdDate: {
        isDate: true,
    },
    draftOf: {
        typeInfo: exports.TypeInfo.DefinitionReference
    },
    jobAuthorizationScope: {
        enumType: exports.TypeInfo.BuildAuthorizationScope
    },
    metrics: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildMetric
    },
    options: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildOption
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
    quality: {
        enumType: exports.TypeInfo.DefinitionQuality
    },
    queue: {
        typeInfo: exports.TypeInfo.AgentPoolQueue
    },
    queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
    },
    repository: {
        typeInfo: exports.TypeInfo.BuildRepository
    },
    retentionRules: {
        isArray: true,
        typeInfo: exports.TypeInfo.RetentionPolicy
    },
    triggers: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildTrigger
    },
    type: {
        enumType: exports.TypeInfo.DefinitionType
    },
    variables: {},
};
exports.TypeInfo.BuildDefinitionChangedEvent.fields = {
    changeType: {
        enumType: exports.TypeInfo.AuditAction
    },
    definition: {
        typeInfo: exports.TypeInfo.BuildDefinition
    },
};
exports.TypeInfo.BuildDefinitionChangingEvent.fields = {
    changeType: {
        enumType: exports.TypeInfo.AuditAction
    },
    newDefinition: {
        typeInfo: exports.TypeInfo.BuildDefinition
    },
    originalDefinition: {
        typeInfo: exports.TypeInfo.BuildDefinition
    },
};
exports.TypeInfo.BuildDefinitionReference.fields = {
    authoredBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdDate: {
        isDate: true,
    },
    draftOf: {
        typeInfo: exports.TypeInfo.DefinitionReference
    },
    metrics: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildMetric
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
    quality: {
        enumType: exports.TypeInfo.DefinitionQuality
    },
    queue: {
        typeInfo: exports.TypeInfo.AgentPoolQueue
    },
    queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
    },
    type: {
        enumType: exports.TypeInfo.DefinitionType
    },
};
exports.TypeInfo.BuildDefinitionRevision.fields = {
    changedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    changedDate: {
        isDate: true,
    },
    changeType: {
        enumType: exports.TypeInfo.AuditAction
    },
};
exports.TypeInfo.BuildDefinitionSourceProvider.fields = {
    lastModified: {
        isDate: true,
    },
    supportedTriggerTypes: {
        enumType: exports.TypeInfo.DefinitionTriggerType
    },
};
exports.TypeInfo.BuildDefinitionStep.fields = {
    task: {
        typeInfo: exports.TypeInfo.TaskDefinitionReference
    },
};
exports.TypeInfo.BuildDefinitionTemplate.fields = {
    template: {
        typeInfo: exports.TypeInfo.BuildDefinition
    },
};
exports.TypeInfo.BuildDefinitionVariable.fields = {};
exports.TypeInfo.BuildDeletedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    },
};
exports.TypeInfo.BuildDeployment.fields = {
    deployment: {
        typeInfo: exports.TypeInfo.BuildSummary
    },
    sourceBuild: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
};
exports.TypeInfo.BuildDestroyedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    },
};
exports.TypeInfo.BuildLog.fields = {
    createdOn: {
        isDate: true,
    },
    lastChangedOn: {
        isDate: true,
    },
};
exports.TypeInfo.BuildLogReference.fields = {};
exports.TypeInfo.BuildMetric.fields = {
    date: {
        isDate: true,
    },
};
exports.TypeInfo.BuildOption.fields = {
    definition: {
        typeInfo: exports.TypeInfo.BuildOptionDefinitionReference
    },
};
exports.TypeInfo.BuildOptionDefinition.fields = {
    groups: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildOptionGroupDefinition
    },
    inputs: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildOptionInputDefinition
    },
};
exports.TypeInfo.BuildOptionDefinitionReference.fields = {};
exports.TypeInfo.BuildOptionGroupDefinition.fields = {};
exports.TypeInfo.BuildOptionInputDefinition.fields = {
    type: {
        enumType: exports.TypeInfo.BuildOptionInputType
    },
};
exports.TypeInfo.BuildPollingSummaryEvent.fields = {};
exports.TypeInfo.BuildProcessTemplate.fields = {
    supportedReasons: {
        enumType: exports.TypeInfo.BuildReason
    },
    templateType: {
        enumType: exports.TypeInfo.ProcessTemplateType
    },
};
exports.TypeInfo.BuildQueuedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    },
};
exports.TypeInfo.BuildReference.fields = {
    finishTime: {
        isDate: true,
    },
    queueTime: {
        isDate: true,
    },
    requestedFor: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    result: {
        enumType: exports.TypeInfo.BuildResult
    },
    startTime: {
        isDate: true,
    },
    status: {
        enumType: exports.TypeInfo.BuildStatus
    },
};
exports.TypeInfo.BuildReportMetadata.fields = {};
exports.TypeInfo.BuildRepository.fields = {};
exports.TypeInfo.BuildRequestValidationResult.fields = {
    result: {
        enumType: exports.TypeInfo.ValidationResult
    },
};
exports.TypeInfo.BuildResourceUsage.fields = {};
exports.TypeInfo.BuildServer.fields = {
    agents: {
        isArray: true,
        typeInfo: exports.TypeInfo.ShallowReference
    },
    controller: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    status: {
        enumType: exports.TypeInfo.ServiceHostStatus
    },
    statusChangedDate: {
        isDate: true,
    },
};
exports.TypeInfo.BuildSettings.fields = {
    defaultRetentionPolicy: {
        typeInfo: exports.TypeInfo.RetentionPolicy
    },
    maximumRetentionPolicy: {
        typeInfo: exports.TypeInfo.RetentionPolicy
    },
};
exports.TypeInfo.BuildStartedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    },
};
exports.TypeInfo.BuildSummary.fields = {
    build: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    finishTime: {
        isDate: true,
    },
    reason: {
        enumType: exports.TypeInfo.BuildReason
    },
    requestedFor: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    startTime: {
        isDate: true,
    },
    status: {
        enumType: exports.TypeInfo.BuildStatus
    },
};
exports.TypeInfo.BuildTrigger.fields = {
    triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
    },
};
exports.TypeInfo.BuildUpdatedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    },
};
exports.TypeInfo.BuildWorkspace.fields = {
    mappings: {
        isArray: true,
        typeInfo: exports.TypeInfo.MappingDetails
    },
};
exports.TypeInfo.Change.fields = {
    author: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    timestamp: {
        isDate: true,
    },
};
exports.TypeInfo.ConsoleLogEvent.fields = {};
exports.TypeInfo.ContinuousDeploymentDefinition.fields = {
    connectedService: {
        typeInfo: TfsCoreInterfaces.TypeInfo.WebApiConnectedServiceRef
    },
    definition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
};
exports.TypeInfo.ContinuousIntegrationTrigger.fields = {
    triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
    },
};
exports.TypeInfo.DefinitionReference.fields = {
    createdDate: {
        isDate: true,
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
    queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
    },
    type: {
        enumType: exports.TypeInfo.DefinitionType
    },
};
exports.TypeInfo.Deployment.fields = {};
exports.TypeInfo.DeploymentBuild.fields = {};
exports.TypeInfo.DeploymentDeploy.fields = {};
exports.TypeInfo.DeploymentTest.fields = {};
exports.TypeInfo.Folder.fields = {
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true,
    },
    lastChangedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    lastChangedDate: {
        isDate: true,
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
};
exports.TypeInfo.GatedCheckInTrigger.fields = {
    triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
    },
};
exports.TypeInfo.InformationNode.fields = {
    lastModifiedDate: {
        isDate: true,
    },
};
exports.TypeInfo.Issue.fields = {
    type: {
        enumType: exports.TypeInfo.IssueType
    },
};
exports.TypeInfo.MappingDetails.fields = {};
exports.TypeInfo.PropertyValue.fields = {
    changedDate: {
        isDate: true,
    },
};
exports.TypeInfo.RealtimeBuildEvent.fields = {};
exports.TypeInfo.RequestReference.fields = {
    requestedFor: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.RetentionPolicy.fields = {};
exports.TypeInfo.Schedule.fields = {
    daysToBuild: {
        enumType: exports.TypeInfo.ScheduleDays
    },
};
exports.TypeInfo.ScheduleTrigger.fields = {
    schedules: {
        isArray: true,
        typeInfo: exports.TypeInfo.Schedule
    },
    triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
    },
};
exports.TypeInfo.ShallowReference.fields = {};
exports.TypeInfo.SvnMappingDetails.fields = {};
exports.TypeInfo.SvnWorkspace.fields = {
    mappings: {
        isArray: true,
        typeInfo: exports.TypeInfo.SvnMappingDetails
    },
};
exports.TypeInfo.SyncBuildCompletedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    },
};
exports.TypeInfo.SyncBuildStartedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    },
};
exports.TypeInfo.TaskAgentPoolReference.fields = {};
exports.TypeInfo.TaskDefinitionReference.fields = {};
exports.TypeInfo.TaskOrchestrationPlanReference.fields = {};
exports.TypeInfo.Timeline.fields = {
    lastChangedOn: {
        isDate: true,
    },
    records: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimelineRecord
    },
};
exports.TypeInfo.TimelineRecord.fields = {
    details: {
        typeInfo: exports.TypeInfo.TimelineReference
    },
    finishTime: {
        isDate: true,
    },
    issues: {
        isArray: true,
        typeInfo: exports.TypeInfo.Issue
    },
    lastModified: {
        isDate: true,
    },
    log: {
        typeInfo: exports.TypeInfo.BuildLogReference
    },
    result: {
        enumType: exports.TypeInfo.TaskResult
    },
    startTime: {
        isDate: true,
    },
    state: {
        enumType: exports.TypeInfo.TimelineRecordState
    },
};
exports.TypeInfo.TimelineRecordsUpdatedEvent.fields = {
    timelineRecords: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimelineRecord
    },
};
exports.TypeInfo.TimelineReference.fields = {};
exports.TypeInfo.WorkspaceMapping.fields = {
    mappingType: {
        enumType: exports.TypeInfo.WorkspaceMappingType
    },
};
exports.TypeInfo.WorkspaceTemplate.fields = {
    lastModifiedDate: {
        isDate: true,
    },
    mappings: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkspaceMapping
    },
};
exports.TypeInfo.XamlBuildDefinition.fields = {
    controller: {
        typeInfo: exports.TypeInfo.BuildController
    },
    createdDate: {
        isDate: true,
    },
    createdOn: {
        isDate: true,
    },
    lastBuild: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
    queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
    },
    repository: {
        typeInfo: exports.TypeInfo.BuildRepository
    },
    supportedReasons: {
        enumType: exports.TypeInfo.BuildReason
    },
    triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
    },
    type: {
        enumType: exports.TypeInfo.DefinitionType
    },
};
