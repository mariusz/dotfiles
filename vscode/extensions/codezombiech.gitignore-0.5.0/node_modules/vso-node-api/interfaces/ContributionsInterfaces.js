/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var GalleryInterfaces = require("../interfaces/GalleryInterfaces");
var VSSInterfaces = require("../interfaces/common/VSSInterfaces");
(function (AcquisitionOperationState) {
    /**
     * Not allowed to use this AcquisitionOperation
     */
    AcquisitionOperationState[AcquisitionOperationState["Disallow"] = 0] = "Disallow";
    /**
     * Allowed to use this AcquisitionOperation
     */
    AcquisitionOperationState[AcquisitionOperationState["Allow"] = 1] = "Allow";
    /**
     * Operation has already been completed and is no longer available
     */
    AcquisitionOperationState[AcquisitionOperationState["Completed"] = 3] = "Completed";
})(exports.AcquisitionOperationState || (exports.AcquisitionOperationState = {}));
var AcquisitionOperationState = exports.AcquisitionOperationState;
(function (AcquisitionOperationType) {
    /**
     * Not yet used
     */
    AcquisitionOperationType[AcquisitionOperationType["Get"] = 0] = "Get";
    /**
     * Install this extension into the host provided
     */
    AcquisitionOperationType[AcquisitionOperationType["Install"] = 1] = "Install";
    /**
     * Buy licenses for this extension and install into the host provided
     */
    AcquisitionOperationType[AcquisitionOperationType["Buy"] = 2] = "Buy";
    /**
     * Not yet used
     */
    AcquisitionOperationType[AcquisitionOperationType["Try"] = 3] = "Try";
    /**
     * Not yet used
     */
    AcquisitionOperationType[AcquisitionOperationType["Request"] = 4] = "Request";
    /**
     * No action found
     */
    AcquisitionOperationType[AcquisitionOperationType["None"] = 5] = "None";
})(exports.AcquisitionOperationType || (exports.AcquisitionOperationType = {}));
var AcquisitionOperationType = exports.AcquisitionOperationType;
(function (ContributedFeatureEnabledValue) {
    /**
     * The state of the feature is not set for the specified scope
     */
    ContributedFeatureEnabledValue[ContributedFeatureEnabledValue["Undefined"] = -1] = "Undefined";
    /**
     * The feature is disabled at the specified scope
     */
    ContributedFeatureEnabledValue[ContributedFeatureEnabledValue["Disabled"] = 0] = "Disabled";
    /**
     * The feature is enabled at the specified scope
     */
    ContributedFeatureEnabledValue[ContributedFeatureEnabledValue["Enabled"] = 1] = "Enabled";
})(exports.ContributedFeatureEnabledValue || (exports.ContributedFeatureEnabledValue = {}));
var ContributedFeatureEnabledValue = exports.ContributedFeatureEnabledValue;
(function (ContributionPropertyType) {
    /**
     * Contribution type is unknown (value may be anything)
     */
    ContributionPropertyType[ContributionPropertyType["Unknown"] = 0] = "Unknown";
    /**
     * Value is a string
     */
    ContributionPropertyType[ContributionPropertyType["String"] = 1] = "String";
    /**
     * Value is a Uri
     */
    ContributionPropertyType[ContributionPropertyType["Uri"] = 2] = "Uri";
    /**
     * Value is a GUID
     */
    ContributionPropertyType[ContributionPropertyType["Guid"] = 4] = "Guid";
    /**
     * Value is True or False
     */
    ContributionPropertyType[ContributionPropertyType["Boolean"] = 8] = "Boolean";
    /**
     * Value is an integer
     */
    ContributionPropertyType[ContributionPropertyType["Integer"] = 16] = "Integer";
    /**
     * Value is a double
     */
    ContributionPropertyType[ContributionPropertyType["Double"] = 32] = "Double";
    /**
     * Value is a DateTime object
     */
    ContributionPropertyType[ContributionPropertyType["DateTime"] = 64] = "DateTime";
    /**
     * Value is a generic Dictionary/JObject/property bag
     */
    ContributionPropertyType[ContributionPropertyType["Dictionary"] = 128] = "Dictionary";
    /**
     * Value is an array
     */
    ContributionPropertyType[ContributionPropertyType["Array"] = 256] = "Array";
    /**
     * Value is an arbitrary/custom object
     */
    ContributionPropertyType[ContributionPropertyType["Object"] = 512] = "Object";
})(exports.ContributionPropertyType || (exports.ContributionPropertyType = {}));
var ContributionPropertyType = exports.ContributionPropertyType;
(function (ExtensionFlags) {
    /**
     * A built-in extension is installed for all VSTS accounts by default
     */
    ExtensionFlags[ExtensionFlags["BuiltIn"] = 1] = "BuiltIn";
    /**
     * The extension comes from a fully-trusted publisher
     */
    ExtensionFlags[ExtensionFlags["Trusted"] = 2] = "Trusted";
})(exports.ExtensionFlags || (exports.ExtensionFlags = {}));
var ExtensionFlags = exports.ExtensionFlags;
(function (ExtensionRequestState) {
    /**
     * The request has been opened, but not yet responded to
     */
    ExtensionRequestState[ExtensionRequestState["Open"] = 0] = "Open";
    /**
     * The request was accepted (extension installed or license assigned)
     */
    ExtensionRequestState[ExtensionRequestState["Accepted"] = 1] = "Accepted";
    /**
     * The request was rejected (extension not installed or license not assigned)
     */
    ExtensionRequestState[ExtensionRequestState["Rejected"] = 2] = "Rejected";
})(exports.ExtensionRequestState || (exports.ExtensionRequestState = {}));
var ExtensionRequestState = exports.ExtensionRequestState;
(function (ExtensionStateFlags) {
    /**
     * No flags set
     */
    ExtensionStateFlags[ExtensionStateFlags["None"] = 0] = "None";
    /**
     * Extension is disabled
     */
    ExtensionStateFlags[ExtensionStateFlags["Disabled"] = 1] = "Disabled";
    /**
     * Extension is a built in
     */
    ExtensionStateFlags[ExtensionStateFlags["BuiltIn"] = 2] = "BuiltIn";
    /**
     * Extension has multiple versions
     */
    ExtensionStateFlags[ExtensionStateFlags["MultiVersion"] = 4] = "MultiVersion";
    /**
     * Extension is not installed.  This is for builtin extensions only and can not otherwise be set.
     */
    ExtensionStateFlags[ExtensionStateFlags["UnInstalled"] = 8] = "UnInstalled";
    /**
     * Error performing version check
     */
    ExtensionStateFlags[ExtensionStateFlags["VersionCheckError"] = 16] = "VersionCheckError";
    /**
     * Trusted extensions are ones that are given special capabilities. These tend to come from Microsoft and can't be published by the general public.  Note: BuiltIn extensions are always trusted.
     */
    ExtensionStateFlags[ExtensionStateFlags["Trusted"] = 32] = "Trusted";
    /**
     * Extension is currently in an error state
     */
    ExtensionStateFlags[ExtensionStateFlags["Error"] = 64] = "Error";
    /**
     * Extension scopes have changed and the extension requires re-authorization
     */
    ExtensionStateFlags[ExtensionStateFlags["NeedsReauthorization"] = 128] = "NeedsReauthorization";
    /**
     * Error performing auto-upgrade. For example, if the new version has demands not supported the extension cannot be auto-upgraded.
     */
    ExtensionStateFlags[ExtensionStateFlags["AutoUpgradeError"] = 256] = "AutoUpgradeError";
    /**
     * Extension is currently in a warning state, that can cause a degraded experience. The degraded experience can be caused for example by some installation issues detected such as implicit demands not supported.
     */
    ExtensionStateFlags[ExtensionStateFlags["Warning"] = 512] = "Warning";
})(exports.ExtensionStateFlags || (exports.ExtensionStateFlags = {}));
var ExtensionStateFlags = exports.ExtensionStateFlags;
(function (InstalledExtensionStateIssueType) {
    /**
     * Represents an installation warning, for example an implicit demand not supported
     */
    InstalledExtensionStateIssueType[InstalledExtensionStateIssueType["Warning"] = 0] = "Warning";
    /**
     * Represents an installation error, for example an explicit demand not supported
     */
    InstalledExtensionStateIssueType[InstalledExtensionStateIssueType["Error"] = 1] = "Error";
})(exports.InstalledExtensionStateIssueType || (exports.InstalledExtensionStateIssueType = {}));
var InstalledExtensionStateIssueType = exports.InstalledExtensionStateIssueType;
exports.TypeInfo = {
    AcquisitionOperation: {
        fields: null
    },
    AcquisitionOperationDisallowReason: {
        fields: null
    },
    AcquisitionOperationState: {
        enumValues: {
            "disallow": 0,
            "allow": 1,
            "completed": 3,
        }
    },
    AcquisitionOperationType: {
        enumValues: {
            "get": 0,
            "install": 1,
            "buy": 2,
            "try": 3,
            "request": 4,
            "none": 5,
        }
    },
    ContributedFeature: {
        fields: null
    },
    ContributedFeatureDefaultValueRule: {
        fields: null
    },
    ContributedFeatureEnabledValue: {
        enumValues: {
            "undefined": -1,
            "disabled": 0,
            "enabled": 1,
        }
    },
    ContributedFeatureSettingScope: {
        fields: null
    },
    ContributedFeatureState: {
        fields: null
    },
    Contribution: {
        fields: null
    },
    ContributionBase: {
        fields: null
    },
    ContributionConstraint: {
        fields: null
    },
    ContributionPropertyDescription: {
        fields: null
    },
    ContributionPropertyType: {
        enumValues: {
            "unknown": 0,
            "string": 1,
            "uri": 2,
            "guid": 4,
            "boolean": 8,
            "integer": 16,
            "double": 32,
            "dateTime": 64,
            "dictionary": 128,
            "array": 256,
            "object": 512,
        }
    },
    ContributionType: {
        fields: null
    },
    DataProviderContext: {
        fields: null
    },
    DataProviderQuery: {
        fields: null
    },
    DataProviderResult: {
        fields: null
    },
    ExtensionAuditAction: {
        fields: null
    },
    ExtensionAuditLog: {
        fields: null
    },
    ExtensionAuditLogEntry: {
        fields: null
    },
    ExtensionAuthorization: {
        fields: null
    },
    ExtensionDataCollection: {
        fields: null
    },
    ExtensionDataCollectionQuery: {
        fields: null
    },
    ExtensionEventCallback: {
        fields: null
    },
    ExtensionEventCallbackCollection: {
        fields: null
    },
    ExtensionFlags: {
        enumValues: {
            "builtIn": 1,
            "trusted": 2,
        }
    },
    ExtensionManifest: {
        fields: null
    },
    ExtensionRequest: {
        fields: null
    },
    ExtensionRequestedEvent: {
        fields: null
    },
    ExtensionRequestState: {
        enumValues: {
            "open": 0,
            "accepted": 1,
            "rejected": 2,
        }
    },
    ExtensionState: {
        fields: null
    },
    ExtensionStateFlags: {
        enumValues: {
            "none": 0,
            "disabled": 1,
            "builtIn": 2,
            "multiVersion": 4,
            "unInstalled": 8,
            "versionCheckError": 16,
            "trusted": 32,
            "error": 64,
            "needsReauthorization": 128,
            "autoUpgradeError": 256,
            "warning": 512,
        }
    },
    InstalledExtension: {
        fields: null
    },
    InstalledExtensionState: {
        fields: null
    },
    InstalledExtensionStateIssue: {
        fields: null
    },
    InstalledExtensionStateIssueType: {
        enumValues: {
            "warning": 0,
            "error": 1,
        }
    },
    RequestedExtension: {
        fields: null
    },
    ResolvedDataProvider: {
        fields: null
    },
    Scope: {
        fields: null
    },
    SupportedExtension: {
        fields: null
    },
};
exports.TypeInfo.AcquisitionOperation.fields = {
    operationState: {
        enumType: exports.TypeInfo.AcquisitionOperationState
    },
    operationType: {
        enumType: exports.TypeInfo.AcquisitionOperationType
    },
    reasons: {
        isArray: true,
        typeInfo: exports.TypeInfo.AcquisitionOperationDisallowReason
    },
};
exports.TypeInfo.AcquisitionOperationDisallowReason.fields = {};
exports.TypeInfo.ContributedFeature.fields = {
    defaultValueRules: {
        isArray: true,
        typeInfo: exports.TypeInfo.ContributedFeatureDefaultValueRule
    },
    scopes: {
        isArray: true,
        typeInfo: exports.TypeInfo.ContributedFeatureSettingScope
    },
};
exports.TypeInfo.ContributedFeatureDefaultValueRule.fields = {};
exports.TypeInfo.ContributedFeatureSettingScope.fields = {};
exports.TypeInfo.ContributedFeatureState.fields = {
    scope: {
        typeInfo: exports.TypeInfo.ContributedFeatureSettingScope
    },
    state: {
        enumType: exports.TypeInfo.ContributedFeatureEnabledValue
    },
};
exports.TypeInfo.Contribution.fields = {
    constraints: {
        isArray: true,
        typeInfo: exports.TypeInfo.ContributionConstraint
    },
};
exports.TypeInfo.ContributionBase.fields = {};
exports.TypeInfo.ContributionConstraint.fields = {};
exports.TypeInfo.ContributionPropertyDescription.fields = {
    type: {
        enumType: exports.TypeInfo.ContributionPropertyType
    },
};
exports.TypeInfo.ContributionType.fields = {
    properties: {},
};
exports.TypeInfo.DataProviderContext.fields = {};
exports.TypeInfo.DataProviderQuery.fields = {
    context: {
        typeInfo: exports.TypeInfo.DataProviderContext
    },
};
exports.TypeInfo.DataProviderResult.fields = {
    resolvedProviders: {
        isArray: true,
        typeInfo: exports.TypeInfo.ResolvedDataProvider
    },
};
exports.TypeInfo.ExtensionAuditAction.fields = {};
exports.TypeInfo.ExtensionAuditLog.fields = {
    entries: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionAuditLogEntry
    },
};
exports.TypeInfo.ExtensionAuditLogEntry.fields = {
    auditDate: {
        isDate: true,
    },
    updatedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.ExtensionAuthorization.fields = {};
exports.TypeInfo.ExtensionDataCollection.fields = {};
exports.TypeInfo.ExtensionDataCollectionQuery.fields = {
    collections: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionDataCollection
    },
};
exports.TypeInfo.ExtensionEventCallback.fields = {};
exports.TypeInfo.ExtensionEventCallbackCollection.fields = {
    postDisable: {
        typeInfo: exports.TypeInfo.ExtensionEventCallback
    },
    postEnable: {
        typeInfo: exports.TypeInfo.ExtensionEventCallback
    },
    postInstall: {
        typeInfo: exports.TypeInfo.ExtensionEventCallback
    },
    postUninstall: {
        typeInfo: exports.TypeInfo.ExtensionEventCallback
    },
    postUpdate: {
        typeInfo: exports.TypeInfo.ExtensionEventCallback
    },
    preInstall: {
        typeInfo: exports.TypeInfo.ExtensionEventCallback
    },
    versionCheck: {
        typeInfo: exports.TypeInfo.ExtensionEventCallback
    },
};
exports.TypeInfo.ExtensionManifest.fields = {
    contributions: {
        isArray: true,
        typeInfo: exports.TypeInfo.Contribution
    },
    contributionTypes: {
        isArray: true,
        typeInfo: exports.TypeInfo.ContributionType
    },
    eventCallbacks: {
        typeInfo: exports.TypeInfo.ExtensionEventCallbackCollection
    },
};
exports.TypeInfo.ExtensionRequest.fields = {
    requestDate: {
        isDate: true,
    },
    requestedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    requestState: {
        enumType: exports.TypeInfo.ExtensionRequestState
    },
    resolveDate: {
        isDate: true,
    },
    resolvedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
};
exports.TypeInfo.ExtensionRequestedEvent.fields = {
    extensionRequest: {
        typeInfo: exports.TypeInfo.ExtensionRequest
    },
    publishedExtension: {
        typeInfo: GalleryInterfaces.TypeInfo.PublishedExtension
    },
};
exports.TypeInfo.ExtensionState.fields = {
    flags: {
        enumType: exports.TypeInfo.ExtensionStateFlags
    },
    installationIssues: {
        isArray: true,
        typeInfo: exports.TypeInfo.InstalledExtensionStateIssue
    },
    lastUpdated: {
        isDate: true,
    },
    lastVersionCheck: {
        isDate: true,
    },
};
exports.TypeInfo.InstalledExtension.fields = {
    contributions: {
        isArray: true,
        typeInfo: exports.TypeInfo.Contribution
    },
    contributionTypes: {
        isArray: true,
        typeInfo: exports.TypeInfo.ContributionType
    },
    eventCallbacks: {
        typeInfo: exports.TypeInfo.ExtensionEventCallbackCollection
    },
    files: {
        isArray: true,
        typeInfo: GalleryInterfaces.TypeInfo.ExtensionFile
    },
    flags: {
        enumType: exports.TypeInfo.ExtensionFlags
    },
    installState: {
        typeInfo: exports.TypeInfo.InstalledExtensionState
    },
    lastPublished: {
        isDate: true,
    },
};
exports.TypeInfo.InstalledExtensionState.fields = {
    flags: {
        enumType: exports.TypeInfo.ExtensionStateFlags
    },
    installationIssues: {
        isArray: true,
        typeInfo: exports.TypeInfo.InstalledExtensionStateIssue
    },
    lastUpdated: {
        isDate: true,
    },
};
exports.TypeInfo.InstalledExtensionStateIssue.fields = {
    type: {
        enumType: exports.TypeInfo.InstalledExtensionStateIssueType
    },
};
exports.TypeInfo.RequestedExtension.fields = {
    extensionRequests: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionRequest
    },
};
exports.TypeInfo.ResolvedDataProvider.fields = {};
exports.TypeInfo.Scope.fields = {};
exports.TypeInfo.SupportedExtension.fields = {};
