import basem = require('./ClientApiBases');
import VsoBaseInterfaces = require('./interfaces/common/VsoBaseInterfaces');
import ContributionsInterfaces = require("./interfaces/ContributionsInterfaces");
export interface IContributionsApi extends basem.ClientApiBase {
    queryDataProviders(query: ContributionsInterfaces.DataProviderQuery): Promise<ContributionsInterfaces.DataProviderResult>;
    getInstalledExtensions(contributionIds?: string[], includeDisabledApps?: boolean, assetTypes?: string[]): Promise<ContributionsInterfaces.InstalledExtension[]>;
    getInstalledExtensionByName(publisherName: string, extensionName: string, assetTypes?: string[]): Promise<ContributionsInterfaces.InstalledExtension>;
}
export declare class ContributionsApi extends basem.ClientApiBase implements IContributionsApi {
    constructor(baseUrl: string, handlers: VsoBaseInterfaces.IRequestHandler[]);
    /**
    * @param {ContributionsInterfaces.DataProviderQuery} query
    */
    queryDataProviders(query: ContributionsInterfaces.DataProviderQuery): Promise<ContributionsInterfaces.DataProviderResult>;
    /**
    * @param {string[]} contributionIds
    * @param {boolean} includeDisabledApps
    * @param {string[]} assetTypes
    */
    getInstalledExtensions(contributionIds?: string[], includeDisabledApps?: boolean, assetTypes?: string[]): Promise<ContributionsInterfaces.InstalledExtension[]>;
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string[]} assetTypes
    */
    getInstalledExtensionByName(publisherName: string, extensionName: string, assetTypes?: string[]): Promise<ContributionsInterfaces.InstalledExtension>;
}
