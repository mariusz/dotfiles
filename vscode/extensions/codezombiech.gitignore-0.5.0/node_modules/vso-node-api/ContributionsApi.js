/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// Licensed under the MIT license.  See LICENSE file in the project root for full license information.
var Q = require('q');
var basem = require('./ClientApiBases');
var ContributionsInterfaces = require("./interfaces/ContributionsInterfaces");
var ContributionsApi = (function (_super) {
    __extends(ContributionsApi, _super);
    function ContributionsApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Contributions-api');
    }
    /**
    * @param {ContributionsInterfaces.DataProviderQuery} query
    */
    ContributionsApi.prototype.queryDataProviders = function (query) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, dataProvidersQuery) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(dataProvidersQuery);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "Contribution", "738368db-35ee-4b85-9f94-77ed34af2b0d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, query, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string[]} contributionIds
    * @param {boolean} includeDisabledApps
    * @param {string[]} assetTypes
    */
    ContributionsApi.prototype.getInstalledExtensions = function (contributionIds, includeDisabledApps, assetTypes) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, InstalledApps) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(InstalledApps);
            }
        };
        var routeValues = {};
        var queryValues = {
            contributionIds: contributionIds && contributionIds.join(";"),
            includeDisabledApps: includeDisabledApps,
            assetTypes: assetTypes && assetTypes.join(":"),
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Contribution", "2648442b-fd63-4b9a-902f-0c913510f139", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ContributionsInterfaces.TypeInfo.InstalledExtension, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string[]} assetTypes
    */
    ContributionsApi.prototype.getInstalledExtensionByName = function (publisherName, extensionName, assetTypes) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, InstalledApp) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(InstalledApp);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        var queryValues = {
            assetTypes: assetTypes && assetTypes.join(":"),
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Contribution", "3e2f6668-0798-4dcb-b592-bfe2fa57fde2", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ContributionsInterfaces.TypeInfo.InstalledExtension, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    return ContributionsApi;
}(basem.ClientApiBase));
exports.ContributionsApi = ContributionsApi;
