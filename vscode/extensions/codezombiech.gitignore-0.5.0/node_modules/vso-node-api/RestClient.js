// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
"use strict";
var fs = require("fs");
var Serialization = require('./Serialization');
/**
 * getJSON:  REST get request returning JSON object(s)
 * @param options: http options object
 * @param callback: callback to pass the results JSON object(s) back
 */
var getJsonResponse = function (contents) {
    var json = JSON.parse(contents);
    return json;
};
var httpCodes = {
    300: "Multiple Choices",
    301: "Moved Permanantly",
    302: "Resource Moved",
    304: "Not Modified",
    305: "Use Proxy",
    306: "Switch Proxy",
    307: "Temporary Redirect",
    308: "Permanent Redirect",
    400: "Bad Request",
    401: "Unauthorized",
    402: "Payment Required",
    403: "Forbidden",
    404: "Not Found",
    405: "Method Not Allowed",
    406: "Not Acceptable",
    407: "Proxy Authentication Required",
    408: "Request Timeout",
    409: "Conflict",
    410: "Gone",
    500: "Internal Server Error",
    501: "Not Implemented",
    502: "Bad Gateway",
    503: "Service Unavailable",
    504: "Gateway Timeout"
};
function processResponse(url, res, contents, serializationData, onResult) {
    if (res.statusCode > 299) {
        // not success
        var msg = httpCodes[res.statusCode] ? "Failed Request: " + httpCodes[res.statusCode] : "Failed Request";
        msg += '(' + res.statusCode + ') - ';
        if (contents && contents.length > 0) {
            var jsonObj = null;
            try {
                jsonObj = JSON.parse(contents);
            }
            catch (e) { }
            if (jsonObj && jsonObj.message) {
                msg += jsonObj.message;
            }
            else {
                msg += url;
            }
        }
        onResult(new Error(msg), res.statusCode, null);
    }
    else {
        try {
            var jsonObj = null;
            if (contents && contents.length > 0) {
                jsonObj = JSON.parse(contents);
                if (serializationData) {
                    jsonObj = Serialization.ContractSerializer.deserialize(jsonObj, serializationData.responseTypeMetadata, false, serializationData.responseIsCollection);
                }
            }
        }
        catch (e) {
            onResult(new Error('Invalid Resource'), res.statusCode, null);
            return;
        }
        onResult(null, res.statusCode, jsonObj);
    }
}
exports.processResponse = processResponse;
;
function enumToString(enumType, enumValue, camelCase) {
    var valueString = enumType[enumValue];
    if (valueString && camelCase) {
        if (valueString.length <= 1) {
            valueString = valueString.toLowerCase();
        }
        else {
            valueString = valueString.substring(0, 1).toLowerCase() + valueString.substring(1);
        }
    }
    return valueString;
}
exports.enumToString = enumToString;
var RestClient = (function () {
    function RestClient(httpClient) {
        this.httpClient = httpClient;
    }
    RestClient.prototype.getJson = function (url, apiVersion, customHeaders, serializationData, onResult) {
        this._getJson('GET', url, apiVersion, customHeaders, serializationData, onResult);
    };
    RestClient.prototype.options = function (url, onResult) {
        this._getJson('OPTIONS', url, "", null, null, onResult);
    };
    RestClient.prototype.delete = function (url, apiVersion, customHeaders, serializationData, onResult) {
        this._getJson('DELETE', url, apiVersion, customHeaders, serializationData, onResult);
    };
    RestClient.prototype.create = function (url, apiVersion, resources, customHeaders, serializationData, onResult) {
        this._sendJson('POST', url, apiVersion, resources, customHeaders, serializationData, onResult);
    };
    RestClient.prototype.update = function (url, apiVersion, resources, customHeaders, serializationData, onResult) {
        this._sendJson('PATCH', url, apiVersion, resources, customHeaders, serializationData, onResult);
    };
    RestClient.prototype.uploadFile = function (verb, url, apiVersion, filePath, customHeaders, serializationData, onResult) {
        var _this = this;
        fs.stat(filePath, function (err, stats) {
            if (err) {
                onResult(err, 400, null);
                return;
            }
            var headers = customHeaders || {};
            headers["Content-Length"] = stats.size;
            var contentStream = fs.createReadStream(filePath);
            _this.uploadStream(verb, url, apiVersion, contentStream, headers, serializationData, onResult);
        });
    };
    RestClient.prototype.uploadStream = function (verb, url, apiVersion, contentStream, customHeaders, serializationData, onResult) {
        var headers = customHeaders || {};
        headers["Accept"] = this.httpClient.makeAcceptHeader('application/json', apiVersion);
        this.httpClient.sendFile(verb, url, contentStream, headers, function (err, res, contents) {
            if (err) {
                onResult(err, err.statusCode, contents);
                return;
            }
            processResponse(url, res, contents, serializationData, onResult);
        });
    };
    RestClient.prototype.replace = function (url, apiVersion, resources, customHeaders, serializationData, onResult) {
        this._sendJson('PUT', url, apiVersion, resources, customHeaders, serializationData, onResult);
    };
    RestClient.prototype._getJson = function (verb, url, apiVersion, customHeaders, serializationData, onResult) {
        var headers = {};
        headers["Accept"] = this.httpClient.makeAcceptHeader('application/json', apiVersion);
        this.httpClient.get(verb, url, headers, function (err, res, contents) {
            if (err) {
                onResult(err, err.statusCode, null);
                return;
            }
            processResponse(url, res, contents, serializationData, onResult);
        });
    };
    RestClient.prototype._sendJson = function (verb, url, apiVersion, data, customHeaders, serializationData, onResult) {
        var headers = customHeaders || {};
        headers["Accept"] = this.httpClient.makeAcceptHeader('application/json', apiVersion);
        headers["Content-Type"] = headers["Content-Type"] || 'application/json; charset=utf-8';
        if (serializationData) {
            data = Serialization.ContractSerializer.serialize(data, serializationData.requestTypeMetadata, true);
        }
        this.httpClient.send(verb, url, data, headers, function (err, res, contents) {
            if (err) {
                onResult(err, err.statusCode, null);
                return;
            }
            processResponse(url, res, contents, serializationData, onResult);
        });
    };
    return RestClient;
}());
exports.RestClient = RestClient;
