// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
"use strict";
var buildm = require('./BuildApi');
var contributionsm = require("./ContributionsApi");
var corem = require('./CoreApi');
var extmgmtm = require("./ExtensionManagementApi");
var featuremgmtm = require("./FeatureManagementApi");
var filecontainerm = require('./FileContainerApi');
var gallerym = require('./GalleryApi');
var gitm = require('./GitApi');
var taskagentm = require('./TaskAgentApi');
var taskm = require('./TaskApi');
var testm = require('./TestApi');
var tfvcm = require('./TfvcApi');
var workitemtrackingm = require('./WorkItemTrackingApi');
var releasem = require('./ReleaseApi');
var apivm = require('./handlers/apiversion');
var basicm = require('./handlers/basiccreds');
var bearm = require('./handlers/bearertoken');
var ntlmm = require('./handlers/ntlm');
var patm = require('./handlers/personalaccesstoken');
/**
 * Methods to return handler objects (see handlers folder)
 */
function getVersionHandler(apiVersion) {
    return new apivm.ApiVersionHandler(apiVersion);
}
exports.getVersionHandler = getVersionHandler;
function getBasicHandler(username, password) {
    return new basicm.BasicCredentialHandler(username, password);
}
exports.getBasicHandler = getBasicHandler;
function getNtlmHandler(username, password, workstation, domain) {
    return new ntlmm.NtlmCredentialHandler(username, password, workstation, domain);
}
exports.getNtlmHandler = getNtlmHandler;
function getBearerHandler(token) {
    return new bearm.BearerCredentialHandler(token);
}
exports.getBearerHandler = getBearerHandler;
function getPersonalAccessTokenHandler(token) {
    return new patm.PersonalAccessTokenCredentialHandler(token);
}
exports.getPersonalAccessTokenHandler = getPersonalAccessTokenHandler;
// ---------------------------------------------------------------------------
// Factory to return client apis
// When new APIs are added, two methods must be added here to instantiate the
// API and its corresponding Q Promise-wrapped API
//----------------------------------------------------------------------------
var WebApi = (function () {
    /*
     * Factory to return client apis and handlers
     * @param defaultServerUrl default server url to use when creating new apis from factory methods
     * @param defaultAuthHandler default authentication credentials to use when creating new apis from factory methods
     */
    function WebApi(serverUrl, authHandler) {
        this.serverUrl = serverUrl;
        this.authHandler = authHandler;
    }
    /**
     * Each factory method can take a serverUrl and a list of handlers
     * if these aren't provided, the default url and auth handler given to the constructor for this class will be used
     */
    WebApi.prototype.getBuildApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new buildm.BuildApi(serverUrl, handlers);
    };
    /**
     * Each API has a method here to create the client.
     */
    WebApi.prototype.getCoreApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new corem.CoreApi(serverUrl, handlers);
    };
    WebApi.prototype.getContributionsApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new contributionsm.ContributionsApi(serverUrl, handlers);
    };
    WebApi.prototype.getExtensionManagementApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new extmgmtm.ExtensionManagementApi(serverUrl, handlers);
    };
    WebApi.prototype.getFeatureManagementApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new featuremgmtm.FeatureManagementApi(serverUrl, handlers);
    };
    WebApi.prototype.getFileContainerApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new filecontainerm.FileContainerApi(serverUrl, handlers);
    };
    WebApi.prototype.getGalleryApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new gallerym.GalleryApi(serverUrl, handlers);
    };
    WebApi.prototype.getGitApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new gitm.GitApi(serverUrl, handlers);
    };
    WebApi.prototype.getTaskApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new taskm.TaskApi(serverUrl, handlers);
    };
    WebApi.prototype.getTaskAgentApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new taskagentm.TaskAgentApi(serverUrl, handlers);
    };
    WebApi.prototype.getTestApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new testm.TestApi(serverUrl, handlers);
    };
    WebApi.prototype.getTfvcApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new tfvcm.TfvcApi(serverUrl, handlers);
    };
    WebApi.prototype.getWorkItemTrackingApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new workitemtrackingm.WorkItemTrackingApi(serverUrl, handlers);
    };
    WebApi.prototype.getReleaseApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new releasem.ReleaseApi(serverUrl, handlers);
    };
    return WebApi;
}());
exports.WebApi = WebApi;
