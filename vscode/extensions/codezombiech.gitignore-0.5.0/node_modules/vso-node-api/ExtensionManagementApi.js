/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// Licensed under the MIT license.  See LICENSE file in the project root for full license information.
var Q = require('q');
var basem = require('./ClientApiBases');
var ExtensionManagementInterfaces = require("./interfaces/ExtensionManagementInterfaces");
var GalleryInterfaces = require("./interfaces/GalleryInterfaces");
var ExtensionManagementApi = (function (_super) {
    __extends(ExtensionManagementApi, _super);
    function ExtensionManagementApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-ExtensionManagement-api');
    }
    /**
    * @param {string} itemId
    * @param {boolean} testCommerce
    * @param {boolean} isFreeOrTrialInstall
    */
    ExtensionManagementApi.prototype.getAcquisitionOptions = function (itemId, testCommerce, isFreeOrTrialInstall) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, AcquisitionOption) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(AcquisitionOption);
            }
        };
        var routeValues = {};
        var queryValues = {
            itemId: itemId,
            testCommerce: testCommerce,
            isFreeOrTrialInstall: isFreeOrTrialInstall,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "288dff58-d13b-468e-9671-0fb754e9398c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ExtensionManagementInterfaces.TypeInfo.AcquisitionOptions, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {ExtensionManagementInterfaces.ExtensionAcquisitionRequest} acquisitionRequest
    */
    ExtensionManagementApi.prototype.requestAcquisition = function (acquisitionRequest) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, AcquisitionRequest) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(AcquisitionRequest);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "da616457-eed3-4672-92d7-18d21f5c1658", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ExtensionManagementInterfaces.TypeInfo.ExtensionAcquisitionRequest, responseTypeMetadata: ExtensionManagementInterfaces.TypeInfo.ExtensionAcquisitionRequest, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, acquisitionRequest, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} registrationId
    */
    ExtensionManagementApi.prototype.registerAuthorization = function (publisherName, extensionName, registrationId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Authorization) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Authorization);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            registrationId: registrationId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "f21cfc80-d2d2-4248-98bb-7820c74c4606", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {any} doc
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} scopeType
    * @param {string} scopeValue
    * @param {string} collectionName
    */
    ExtensionManagementApi.prototype.createDocumentByName = function (doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Data) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Data);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            scopeType: scopeType,
            scopeValue: scopeValue,
            collectionName: collectionName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, doc, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} scopeType
    * @param {string} scopeValue
    * @param {string} collectionName
    * @param {string} documentId
    */
    ExtensionManagementApi.prototype.deleteDocumentByName = function (publisherName, extensionName, scopeType, scopeValue, collectionName, documentId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            scopeType: scopeType,
            scopeValue: scopeValue,
            collectionName: collectionName,
            documentId: documentId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} scopeType
    * @param {string} scopeValue
    * @param {string} collectionName
    * @param {string} documentId
    */
    ExtensionManagementApi.prototype.getDocumentByName = function (publisherName, extensionName, scopeType, scopeValue, collectionName, documentId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Data) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Data);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            scopeType: scopeType,
            scopeValue: scopeValue,
            collectionName: collectionName,
            documentId: documentId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} scopeType
    * @param {string} scopeValue
    * @param {string} collectionName
    */
    ExtensionManagementApi.prototype.getDocumentsByName = function (publisherName, extensionName, scopeType, scopeValue, collectionName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Data) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Data);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            scopeType: scopeType,
            scopeValue: scopeValue,
            collectionName: collectionName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {any} doc
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} scopeType
    * @param {string} scopeValue
    * @param {string} collectionName
    */
    ExtensionManagementApi.prototype.setDocumentByName = function (doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Data) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Data);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            scopeType: scopeType,
            scopeValue: scopeValue,
            collectionName: collectionName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, doc, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {any} doc
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} scopeType
    * @param {string} scopeValue
    * @param {string} collectionName
    */
    ExtensionManagementApi.prototype.updateDocumentByName = function (doc, publisherName, extensionName, scopeType, scopeValue, collectionName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Data) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Data);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            scopeType: scopeType,
            scopeValue: scopeValue,
            collectionName: collectionName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "bbe06c18-1c8b-4fcd-b9c6-1535aaab8749", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.update(url, apiVersion, doc, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {ExtensionManagementInterfaces.ExtensionDataCollectionQuery} collectionQuery
    * @param {string} publisherName
    * @param {string} extensionName
    */
    ExtensionManagementApi.prototype.queryCollectionsByName = function (collectionQuery, publisherName, extensionName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ExtensionDataCollectionQuery) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ExtensionDataCollectionQuery);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "56c331f1-ce53-4318-adfd-4db5c52a7a2e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.create(url, apiVersion, collectionQuery, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {boolean} includeDisabled
    * @param {boolean} includeErrors
    * @param {boolean} includeInstallationIssues
    */
    ExtensionManagementApi.prototype.getStates = function (includeDisabled, includeErrors, includeInstallationIssues) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ExtensionStates) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ExtensionStates);
            }
        };
        var routeValues = {};
        var queryValues = {
            includeDisabled: includeDisabled,
            includeErrors: includeErrors,
            includeInstallationIssues: includeInstallationIssues,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "92755d3d-9a8a-42b3-8a4d-87359fe5aa93", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ExtensionManagementInterfaces.TypeInfo.ExtensionState, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {ExtensionManagementInterfaces.InstalledExtensionQuery} query
    */
    ExtensionManagementApi.prototype.queryExtensions = function (query) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, InstalledExtensionQuery) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(InstalledExtensionQuery);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "046c980f-1345-4ce2-bf85-b46d10ff4cfd", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ExtensionManagementInterfaces.TypeInfo.InstalledExtension, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, query, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {boolean} includeDisabledExtensions
    * @param {boolean} includeErrors
    * @param {string[]} assetTypes
    * @param {boolean} includeInstallationIssues
    */
    ExtensionManagementApi.prototype.getInstalledExtensions = function (includeDisabledExtensions, includeErrors, assetTypes, includeInstallationIssues) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, InstalledExtensions) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(InstalledExtensions);
            }
        };
        var routeValues = {};
        var queryValues = {
            includeDisabledExtensions: includeDisabledExtensions,
            includeErrors: includeErrors,
            assetTypes: assetTypes && assetTypes.join(":"),
            includeInstallationIssues: includeInstallationIssues,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "275424d0-c844-4fe2-bda6-04933a1357d8", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ExtensionManagementInterfaces.TypeInfo.InstalledExtension, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {ExtensionManagementInterfaces.InstalledExtension} extension
    */
    ExtensionManagementApi.prototype.updateInstalledExtension = function (extension) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, InstalledExtension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(InstalledExtension);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "275424d0-c844-4fe2-bda6-04933a1357d8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: ExtensionManagementInterfaces.TypeInfo.InstalledExtension, responseTypeMetadata: ExtensionManagementInterfaces.TypeInfo.InstalledExtension, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, extension, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string[]} assetTypes
    */
    ExtensionManagementApi.prototype.getInstalledExtensionByName = function (publisherName, extensionName, assetTypes) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, InstalledExtensionsByName) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(InstalledExtensionsByName);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        var queryValues = {
            assetTypes: assetTypes && assetTypes.join(":"),
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "fb0da285-f23e-4b56-8b53-3ef5f9f6de66", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ExtensionManagementInterfaces.TypeInfo.InstalledExtension, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} version
    */
    ExtensionManagementApi.prototype.installExtensionByName = function (publisherName, extensionName, version) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, InstalledExtensionsByName) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(InstalledExtensionsByName);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            version: version
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "fb0da285-f23e-4b56-8b53-3ef5f9f6de66", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ExtensionManagementInterfaces.TypeInfo.InstalledExtension, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} reason
    * @param {string} reasonCode
    */
    ExtensionManagementApi.prototype.uninstallExtensionByName = function (publisherName, extensionName, reason, reasonCode) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        var queryValues = {
            reason: reason,
            reasonCode: reasonCode,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "fb0da285-f23e-4b56-8b53-3ef5f9f6de66", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} userId
    */
    ExtensionManagementApi.prototype.getPolicies = function (userId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Policie) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Policie);
            }
        };
        var routeValues = {
            userId: userId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "e5cc8c09-407b-4867-8319-2ae3338cbf6f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.UserExtensionPolicy, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} rejectMessage
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} requesterId
    * @param {ExtensionManagementInterfaces.ExtensionRequestState} state
    */
    ExtensionManagementApi.prototype.resolveRequest = function (rejectMessage, publisherName, extensionName, requesterId, state) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, RequestedExtension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(RequestedExtension);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            requesterId: requesterId
        };
        var queryValues = {
            state: state,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "aa93e1f3-511c-4364-8b9c-eb98818f2e0b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.update(url, apiVersion, rejectMessage, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    */
    ExtensionManagementApi.prototype.getRequests = function () {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, RequestedExtensions) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(RequestedExtensions);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "216b978f-b164-424e-ada2-b77561e842b7", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ExtensionManagementInterfaces.TypeInfo.RequestedExtension, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} rejectMessage
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {ExtensionManagementInterfaces.ExtensionRequestState} state
    */
    ExtensionManagementApi.prototype.resolveAllRequests = function (rejectMessage, publisherName, extensionName, state) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, RequestedExtension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(RequestedExtension);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        var queryValues = {
            state: state,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "ba93e1f3-511c-4364-8b9c-eb98818f2e0b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.update(url, apiVersion, rejectMessage, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    */
    ExtensionManagementApi.prototype.deleteRequest = function (publisherName, extensionName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "f5afca1e-a728-4294-aa2d-4af0173431b5", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} requestMessage
    */
    ExtensionManagementApi.prototype.requestExtension = function (publisherName, extensionName, requestMessage) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, RequestedExtension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(RequestedExtension);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "f5afca1e-a728-4294-aa2d-4af0173431b5", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: ExtensionManagementInterfaces.TypeInfo.RequestedExtension, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, requestMessage, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    */
    ExtensionManagementApi.prototype.getToken = function () {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Token) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Token);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "ExtensionManagement", "3a2e24ed-1d6f-4cb2-9f3b-45a96bbfaf50", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    return ExtensionManagementApi;
}(basem.ClientApiBase));
exports.ExtensionManagementApi = ExtensionManagementApi;
