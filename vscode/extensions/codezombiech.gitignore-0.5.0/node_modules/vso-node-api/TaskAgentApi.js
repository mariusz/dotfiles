"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var taskagentbasem = require('./TaskAgentApiBase');
var url = require('url');
var Q = require("q");
var TaskAgentApi = (function (_super) {
    __extends(TaskAgentApi, _super);
    function TaskAgentApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers);
        // hang on to the handlers in case we need to fall back to an account-level client
        this._handlers = handlers;
    }
    /**
     * @param {string} taskId
     * @param onResult callback function
     */
    TaskAgentApi.prototype.deleteTaskDefinition = function (taskId) {
        var _this = this;
        var promise = this.vsoClient.beginGetLocation("distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd")
            .then(function (location) {
            if (location) {
                // the resource exists at the url we were given. go!
                return _super.prototype.deleteTaskDefinition.call(_this, taskId);
            }
            else {
                // this is the case when the server doesn't support collection-level task definitions
                var fallbackClient = _this._getFallbackClient(_this.baseUrl);
                if (!fallbackClient) {
                    // couldn't convert
                    throw new Error("Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd");
                }
                else {
                    // use the fallback client 
                    return fallbackClient.deleteTaskDefinition(taskId);
                }
            }
        });
        return promise;
    };
    /**
     * @param {string} taskId
     * @param {string} versionString
     * @param {string[]} visibility
     * @param {boolean} scopeLocal
     * @param onResult callback function with the resulting ArrayBuffer
     */
    TaskAgentApi.prototype.getTaskContentZip = function (taskId, versionString, visibility, scopeLocal) {
        var _this = this;
        var promise = this.vsoClient.beginGetLocation("distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd")
            .then(function (location) {
            if (location) {
                // the resource exists at the url we were given. go!
                return _super.prototype.getTaskContentZip.call(_this, taskId, versionString, visibility, scopeLocal);
            }
            else {
                // this is the case when the server doesn't support collection-level task definitions
                var fallbackClient = _this._getFallbackClient(_this.baseUrl);
                if (!fallbackClient) {
                    // couldn't convert
                    throw new Error("Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd");
                }
                else {
                    // use the fallback client 
                    return fallbackClient.getTaskContentZip(taskId, versionString, visibility, scopeLocal);
                }
            }
        });
        return promise;
    };
    /**
     * @param {string} taskId
     * @param {string} versionString
     * @param {string[]} visibility
     * @param {boolean} scopeLocal
     * @param onResult callback function with the resulting TaskAgentInterfaces.TaskDefinition
     */
    TaskAgentApi.prototype.getTaskDefinition = function (taskId, versionString, visibility, scopeLocal) {
        var _this = this;
        var promise = this.vsoClient.beginGetLocation("distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd")
            .then(function (location) {
            if (location) {
                // the resource exists at the url we were given. go!
                return _super.prototype.getTaskDefinition.call(_this, taskId, versionString, visibility, scopeLocal);
            }
            else {
                // this is the case when the server doesn't support collection-level task definitions
                var fallbackClient = _this._getFallbackClient(_this.baseUrl);
                if (!fallbackClient) {
                    // couldn't convert
                    throw new Error("Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd");
                }
                else {
                    // use the fallback client 
                    return fallbackClient.getTaskDefinition(taskId, versionString, visibility, scopeLocal);
                }
            }
        });
        return promise;
    };
    /**
     * @param {string} taskId
     * @param {string[]} visibility
     * @param {boolean} scopeLocal
     * @param onResult callback function with the resulting TaskAgentInterfaces.TaskDefinition[]
     */
    TaskAgentApi.prototype.getTaskDefinitions = function (taskId, visibility, scopeLocal) {
        var _this = this;
        var promise = this.vsoClient.beginGetLocation("distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd")
            .then(function (location) {
            if (location) {
                // the resource exists at the url we were given. go!
                return _super.prototype.getTaskDefinitions.call(_this, taskId, visibility, scopeLocal);
            }
            else {
                // this is the case when the server doesn't support collection-level task definitions
                var fallbackClient = _this._getFallbackClient(_this.baseUrl);
                if (!fallbackClient) {
                    // couldn't convert
                    throw new Error("Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd");
                }
                else {
                    // use the fallback client 
                    return fallbackClient.getTaskDefinitions(taskId, visibility, scopeLocal);
                }
            }
        });
        return promise;
    };
    /**
     * @param {NodeJS.ReadableStream} contentStream
     * @param {string} taskId
     * @param {boolean} overwrite
     * @param onResult callback function
     */
    TaskAgentApi.prototype.uploadTaskDefinition = function (customHeaders, contentStream, taskId, overwrite) {
        var _this = this;
        var promise = this.vsoClient.beginGetLocation("distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd")
            .then(function (location) {
            if (location) {
                // the resource exists at the url we were given. go!
                return _this._uploadTaskDefinition(customHeaders, contentStream, taskId, overwrite);
            }
            else {
                // this is the case when the server doesn't support collection-level task definitions
                var fallbackClient = _this._getFallbackClient(_this.baseUrl);
                if (!fallbackClient) {
                    // couldn't convert
                    throw new Error("Failed to find api location for area: distributedtask id: 60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd");
                }
                else {
                    // use the fallback client 
                    return fallbackClient._uploadTaskDefinition(customHeaders, contentStream, taskId, overwrite);
                }
            }
        });
        return promise;
    };
    /**
     * @param {NodeJS.ReadableStream} contentStream
     * @param {string} taskId
     * @param {boolean} overwrite
     * @param onResult callback function
     */
    TaskAgentApi.prototype._uploadTaskDefinition = function (customHeaders, contentStream, taskId, overwrite) {
        var _this = this;
        var routeValues = {
            taskId: taskId
        };
        var queryValues = {
            overwrite: overwrite,
        };
        customHeaders = customHeaders || {};
        customHeaders["Content-Type"] = "application/octet-stream";
        var deferred = Q.defer();
        this.vsoClient.getVersioningData("3.0-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.uploadStream('PUT', url, apiVersion, contentStream, customHeaders, serializationData, function (err, statusCode, obj) {
                if (err) {
                    err.statusCode = statusCode;
                    deferred.reject(err);
                }
                else {
                    deferred.resolve(null);
                }
            });
        });
        return deferred.promise;
    };
    TaskAgentApi.prototype._getFallbackClient = function (baseUrl) {
        if (!this._fallbackClient) {
            var accountUrl = this._getAccountUrl(baseUrl);
            if (accountUrl) {
                this._fallbackClient = new TaskAgentApi(accountUrl, this._handlers);
            }
        }
        return this._fallbackClient;
    };
    TaskAgentApi.prototype._getAccountUrl = function (collectionUrl) {
        // converts a collection URL to an account URL
        // returns null if the conversion can't be made
        var purl = url.parse(collectionUrl);
        if (!purl.protocol || !purl.host) {
            return null;
        }
        var accountUrl = purl.protocol + '//' + purl.host;
        // purl.path is something like /DefaultCollection or /tfs/DefaultCollection or /DefaultCollection/
        var splitPath = purl.path.split('/').slice(1);
        if (splitPath.length === 0 || (splitPath.length === 1 && splitPath[0] === '')) {
            return null;
        }
        // if the first segment of the path is tfs, the second is the collection. if the url ends in / there will be a third, empty entry
        if (splitPath[0] === 'tfs' && (splitPath.length === 2 || (splitPath.length === 3 && splitPath[2].length === 0))) {
            //on prem
            accountUrl += '/' + 'tfs';
        }
        else if (splitPath.length === 2 && splitPath[0] === '') {
            // /DefaultCollection/
            return accountUrl;
        }
        else if (splitPath.length > 1) {
            return null;
        }
        return accountUrl;
    };
    return TaskAgentApi;
}(taskagentbasem.TaskAgentApiBase));
exports.TaskAgentApi = TaskAgentApi;
