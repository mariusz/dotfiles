/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// Licensed under the MIT license.  See LICENSE file in the project root for full license information.
var Q = require('q');
var basem = require('./ClientApiBases');
var FeatureManagementInterfaces = require("./interfaces/FeatureManagementInterfaces");
var FeatureManagementApi = (function (_super) {
    __extends(FeatureManagementApi, _super);
    function FeatureManagementApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-FeatureManagement-api');
    }
    /**
    * Get a specific feature by its id
    *
    * @param {string} featureId - The contribution id of the feature
    */
    FeatureManagementApi.prototype.getFeature = function (featureId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Feature) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Feature);
            }
        };
        var routeValues = {
            featureId: featureId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "FeatureManagement", "c4209f25-7a27-41dd-9f04-06080c7b6afd", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    */
    FeatureManagementApi.prototype.getFeatures = function () {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Features) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Features);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "FeatureManagement", "c4209f25-7a27-41dd-9f04-06080c7b6afd", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get the state of the specified feature for the given user/all-users scope
    *
    * @param {string} featureId - Contribution id of the feature
    * @param {string} userScope - User-Scope at which to get the value. Should be "me" for the current user or "host" for all users.
    */
    FeatureManagementApi.prototype.getFeatureState = function (featureId, userScope) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, FeatureState) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(FeatureState);
            }
        };
        var routeValues = {
            featureId: featureId,
            userScope: userScope
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "FeatureManagement", "98911314-3f9b-4eaf-80e8-83900d8e85d9", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Set the state of a feature
    *
    * @param {FeatureManagementInterfaces.ContributedFeatureState} feature - Posted feature state object. Should specify the effective value.
    * @param {string} featureId - Contribution id of the feature
    * @param {string} userScope - User-Scope at which to set the value. Should be "me" for the current user or "host" for all users.
    * @param {string} reason - Reason for changing the state
    * @param {string} reasonCode - Short reason code
    */
    FeatureManagementApi.prototype.setFeatureState = function (feature, featureId, userScope, reason, reasonCode) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, FeatureState) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(FeatureState);
            }
        };
        var routeValues = {
            featureId: featureId,
            userScope: userScope
        };
        var queryValues = {
            reason: reason,
            reasonCode: reasonCode,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "FeatureManagement", "98911314-3f9b-4eaf-80e8-83900d8e85d9", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, responseTypeMetadata: FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, feature, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get the state of the specified feature for the given named scope
    *
    * @param {string} featureId - Contribution id of the feature
    * @param {string} userScope - User-Scope at which to get the value. Should be "me" for the current user or "host" for all users.
    * @param {string} scopeName - Scope at which to get the feature setting for (e.g. "project" or "team")
    * @param {string} scopeValue - Value of the scope (e.g. the project or team id)
    */
    FeatureManagementApi.prototype.getFeatureStateForScope = function (featureId, userScope, scopeName, scopeValue) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, FeatureState) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(FeatureState);
            }
        };
        var routeValues = {
            featureId: featureId,
            userScope: userScope,
            scopeName: scopeName,
            scopeValue: scopeValue
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "FeatureManagement", "dd291e43-aa9f-4cee-8465-a93c78e414a4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Set the state of a feature at a specific scope
    *
    * @param {FeatureManagementInterfaces.ContributedFeatureState} feature - Posted feature state object. Should specify the effective value.
    * @param {string} featureId - Contribution id of the feature
    * @param {string} userScope - User-Scope at which to set the value. Should be "me" for the current user or "host" for all users.
    * @param {string} scopeName - Scope at which to get the feature setting for (e.g. "project" or "team")
    * @param {string} scopeValue - Value of the scope (e.g. the project or team id)
    * @param {string} reason - Reason for changing the state
    * @param {string} reasonCode - Short reason code
    */
    FeatureManagementApi.prototype.setFeatureStateForScope = function (feature, featureId, userScope, scopeName, scopeValue, reason, reasonCode) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, FeatureState) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(FeatureState);
            }
        };
        var routeValues = {
            featureId: featureId,
            userScope: userScope,
            scopeName: scopeName,
            scopeValue: scopeValue
        };
        var queryValues = {
            reason: reason,
            reasonCode: reasonCode,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "FeatureManagement", "dd291e43-aa9f-4cee-8465-a93c78e414a4", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, responseTypeMetadata: FeatureManagementInterfaces.TypeInfo.ContributedFeatureState, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, feature, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    return FeatureManagementApi;
}(basem.ClientApiBase));
exports.FeatureManagementApi = FeatureManagementApi;
