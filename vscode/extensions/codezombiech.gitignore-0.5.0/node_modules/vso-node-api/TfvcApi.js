/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// Licensed under the MIT license.  See LICENSE file in the project root for full license information.
var Q = require('q');
var basem = require('./ClientApiBases');
var TfvcInterfaces = require("./interfaces/TfvcInterfaces");
var TfvcApi = (function (_super) {
    __extends(TfvcApi, _super);
    function TfvcApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Tfvc-api');
    }
    /**
    * Get a single branch hierarchy at the given path with parents or children (if specified)
    *
    * @param {string} path
    * @param {string} project - Project ID or project name
    * @param {boolean} includeParent
    * @param {boolean} includeChildren
    */
    TfvcApi.prototype.getBranch = function (path, project, includeParent, includeChildren) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Branche) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Branche);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            path: path,
            includeParent: includeParent,
            includeChildren: includeChildren,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "bc1f417e-239d-42e7-85e1-76e80cb2d6eb", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcBranch, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get a collection of branch roots -- first-level children, branches with no parents
    *
    * @param {string} project - Project ID or project name
    * @param {boolean} includeParent
    * @param {boolean} includeChildren
    * @param {boolean} includeDeleted
    * @param {boolean} includeLinks
    */
    TfvcApi.prototype.getBranches = function (project, includeParent, includeChildren, includeDeleted, includeLinks) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Branches) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Branches);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            includeParent: includeParent,
            includeChildren: includeChildren,
            includeDeleted: includeDeleted,
            includeLinks: includeLinks,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "bc1f417e-239d-42e7-85e1-76e80cb2d6eb", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcBranch, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get branch hierarchies below the specified scopePath
    *
    * @param {string} scopePath
    * @param {string} project - Project ID or project name
    * @param {boolean} includeDeleted
    * @param {boolean} includeLinks
    */
    TfvcApi.prototype.getBranchRefs = function (scopePath, project, includeDeleted, includeLinks) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Branches) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Branches);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            scopePath: scopePath,
            includeDeleted: includeDeleted,
            includeLinks: includeLinks,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "bc1f417e-239d-42e7-85e1-76e80cb2d6eb", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcBranchRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Retrieve Tfvc changes for a given changeset
    *
    * @param {number} id
    * @param {number} skip
    * @param {number} top
    */
    TfvcApi.prototype.getChangesetChanges = function (id, skip, top) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ChangesetChanges) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ChangesetChanges);
            }
        };
        var routeValues = {
            id: id
        };
        var queryValues = {
            '$skip': skip,
            '$top': top,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "f32b86f2-15b9-4fe6-81b1-6f8938617ee5", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChange, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TfvcInterfaces.TfvcChangeset} changeset
    * @param {string} project - Project ID or project name
    */
    TfvcApi.prototype.createChangeset = function (changeset, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Changeset) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Changeset);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "tfvc", "0bc8f0a4-6bfb-42a9-ba84-139da7b99c49", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChangeset, responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChangesetRef, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, changeset, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Retrieve a Tfvc Changeset
    *
    * @param {number} id
    * @param {string} project - Project ID or project name
    * @param {number} maxChangeCount
    * @param {boolean} includeDetails
    * @param {boolean} includeWorkItems
    * @param {number} maxCommentLength
    * @param {boolean} includeSourceRename
    * @param {number} skip
    * @param {number} top
    * @param {string} orderby
    * @param {TfvcInterfaces.TfvcChangesetSearchCriteria} searchCriteria
    */
    TfvcApi.prototype.getChangeset = function (id, project, maxChangeCount, includeDetails, includeWorkItems, maxCommentLength, includeSourceRename, skip, top, orderby, searchCriteria) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Changeset) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Changeset);
            }
        };
        var routeValues = {
            project: project,
            id: id
        };
        var queryValues = {
            maxChangeCount: maxChangeCount,
            includeDetails: includeDetails,
            includeWorkItems: includeWorkItems,
            maxCommentLength: maxCommentLength,
            includeSourceRename: includeSourceRename,
            '$skip': skip,
            '$top': top,
            '$orderby': orderby,
            searchCriteria: searchCriteria,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "tfvc", "0bc8f0a4-6bfb-42a9-ba84-139da7b99c49", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChangeset, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Retrieve Tfvc changesets
    *
    * @param {string} project - Project ID or project name
    * @param {number} maxCommentLength
    * @param {number} skip
    * @param {number} top
    * @param {string} orderby
    * @param {TfvcInterfaces.TfvcChangesetSearchCriteria} searchCriteria
    */
    TfvcApi.prototype.getChangesets = function (project, maxCommentLength, skip, top, orderby, searchCriteria) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Changesets) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Changesets);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            maxCommentLength: maxCommentLength,
            '$skip': skip,
            '$top': top,
            '$orderby': orderby,
            searchCriteria: searchCriteria,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "tfvc", "0bc8f0a4-6bfb-42a9-ba84-139da7b99c49", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChangesetRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TfvcInterfaces.TfvcChangesetsRequestData} changesetsRequestData
    */
    TfvcApi.prototype.getBatchedChangesets = function (changesetsRequestData) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ChangesetsBatch) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ChangesetsBatch);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "b7e7c173-803c-4fea-9ec8-31ee35c5502a", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChangesetRef, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, changesetsRequestData, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {number} id
    */
    TfvcApi.prototype.getChangesetWorkItems = function (id) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ChangesetWorkItems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ChangesetWorkItems);
            }
        };
        var routeValues = {
            id: id
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "64ae0bea-1d71-47c9-a9e5-fe73f5ea0ff4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Post for retrieving a set of items given a list of paths or a long path. Allows for specifying the recursionLevel and version descriptors for each path.
    *
    * @param {TfvcInterfaces.TfvcItemRequestData} itemRequestData
    * @param {string} project - Project ID or project name
    */
    TfvcApi.prototype.getItemsBatch = function (itemRequestData, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ItemBatch) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ItemBatch);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "fe6f827b-5f64-480f-b8af-1eca3b80e833", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItemRequestData, responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItem, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, itemRequestData, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Post for retrieving a set of items given a list of paths or a long path. Allows for specifying the recursionLevel and version descriptors for each path.
    *
    * @param {TfvcInterfaces.TfvcItemRequestData} itemRequestData
    * @param {string} project - Project ID or project name
    */
    TfvcApi.prototype.getItemsBatchZip = function (itemRequestData, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ItemBatch) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ItemBatch);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "fe6f827b-5f64-480f-b8af-1eca3b80e833", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItemRequestData, responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get Item Metadata and/or Content. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
    *
    * @param {string} path
    * @param {string} project - Project ID or project name
    * @param {string} fileName
    * @param {boolean} download
    * @param {string} scopePath
    * @param {TfvcInterfaces.VersionControlRecursionType} recursionLevel
    * @param {TfvcInterfaces.TfvcVersionDescriptor} versionDescriptor
    */
    TfvcApi.prototype.getItem = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            path: path,
            fileName: fileName,
            download: download,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            versionDescriptor: versionDescriptor,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItem, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get Item Metadata and/or Content. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
    *
    * @param {string} path
    * @param {string} project - Project ID or project name
    * @param {string} fileName
    * @param {boolean} download
    * @param {string} scopePath
    * @param {TfvcInterfaces.VersionControlRecursionType} recursionLevel
    * @param {TfvcInterfaces.TfvcVersionDescriptor} versionDescriptor
    */
    TfvcApi.prototype.getItemContent = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            path: path,
            fileName: fileName,
            download: download,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            versionDescriptor: versionDescriptor,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get a list of Tfvc items
    *
    * @param {string} project - Project ID or project name
    * @param {string} scopePath
    * @param {TfvcInterfaces.VersionControlRecursionType} recursionLevel
    * @param {boolean} includeLinks
    * @param {TfvcInterfaces.TfvcVersionDescriptor} versionDescriptor
    */
    TfvcApi.prototype.getItems = function (project, scopePath, recursionLevel, includeLinks, versionDescriptor) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Items) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Items);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            includeLinks: includeLinks,
            versionDescriptor: versionDescriptor,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get Item Metadata and/or Content. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
    *
    * @param {string} path
    * @param {string} project - Project ID or project name
    * @param {string} fileName
    * @param {boolean} download
    * @param {string} scopePath
    * @param {TfvcInterfaces.VersionControlRecursionType} recursionLevel
    * @param {TfvcInterfaces.TfvcVersionDescriptor} versionDescriptor
    */
    TfvcApi.prototype.getItemText = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            path: path,
            fileName: fileName,
            download: download,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            versionDescriptor: versionDescriptor,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "text/plain", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get Item Metadata and/or Content. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
    *
    * @param {string} path
    * @param {string} project - Project ID or project name
    * @param {string} fileName
    * @param {boolean} download
    * @param {string} scopePath
    * @param {TfvcInterfaces.VersionControlRecursionType} recursionLevel
    * @param {TfvcInterfaces.TfvcVersionDescriptor} versionDescriptor
    */
    TfvcApi.prototype.getItemZip = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            path: path,
            fileName: fileName,
            download: download,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            versionDescriptor: versionDescriptor,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get items under a label.
    *
    * @param {string} labelId - Unique identifier of label
    * @param {number} top - Max number of items to return
    * @param {number} skip - Number of items to skip
    */
    TfvcApi.prototype.getLabelItems = function (labelId, top, skip) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, LabelItems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(LabelItems);
            }
        };
        var routeValues = {
            labelId: labelId
        };
        var queryValues = {
            '$top': top,
            '$skip': skip,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "06166e34-de17-4b60-8cd1-23182a346fda", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get a single deep label.
    *
    * @param {string} labelId - Unique identifier of label
    * @param {TfvcInterfaces.TfvcLabelRequestData} requestData - maxItemCount
    * @param {string} project - Project ID or project name
    */
    TfvcApi.prototype.getLabel = function (labelId, requestData, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Label) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Label);
            }
        };
        var routeValues = {
            project: project,
            labelId: labelId
        };
        var queryValues = {
            requestData: requestData,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "a5d9bd7f-b661-4d0e-b9be-d9c16affae54", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcLabel, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get a collection of shallow label references.
    *
    * @param {TfvcInterfaces.TfvcLabelRequestData} requestData - labelScope, name, owner, and itemLabelFilter
    * @param {string} project - Project ID or project name
    * @param {number} top - Max number of labels to return
    * @param {number} skip - Number of labels to skip
    */
    TfvcApi.prototype.getLabels = function (requestData, project, top, skip) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Labels) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Labels);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            requestData: requestData,
            '$top': top,
            '$skip': skip,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "a5d9bd7f-b661-4d0e-b9be-d9c16affae54", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcLabelRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get changes included in a shelveset.
    *
    * @param {string} shelvesetId - Shelveset's unique ID
    * @param {number} top - Max number of changes to return
    * @param {number} skip - Number of changes to skip
    */
    TfvcApi.prototype.getShelvesetChanges = function (shelvesetId, top, skip) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ShelvesetChanges) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ShelvesetChanges);
            }
        };
        var routeValues = {};
        var queryValues = {
            shelvesetId: shelvesetId,
            '$top': top,
            '$skip': skip,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "dbaf075b-0445-4c34-9e5b-82292f856522", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChange, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get a single deep shelveset.
    *
    * @param {string} shelvesetId - Shelveset's unique ID
    * @param {TfvcInterfaces.TfvcShelvesetRequestData} requestData - includeDetails, includeWorkItems, maxChangeCount, and maxCommentLength
    */
    TfvcApi.prototype.getShelveset = function (shelvesetId, requestData) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Shelveset) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Shelveset);
            }
        };
        var routeValues = {};
        var queryValues = {
            shelvesetId: shelvesetId,
            requestData: requestData,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "e36d44fb-e907-4b0a-b194-f83f1ed32ad3", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcShelveset, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Return a collection of shallow shelveset references.
    *
    * @param {TfvcInterfaces.TfvcShelvesetRequestData} requestData - name, owner, and maxCommentLength
    * @param {number} top - Max number of shelvesets to return
    * @param {number} skip - Number of shelvesets to skip
    */
    TfvcApi.prototype.getShelvesets = function (requestData, top, skip) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Shelvesets) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Shelvesets);
            }
        };
        var routeValues = {};
        var queryValues = {
            requestData: requestData,
            '$top': top,
            '$skip': skip,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "e36d44fb-e907-4b0a-b194-f83f1ed32ad3", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcShelvesetRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Get work items associated with a shelveset.
    *
    * @param {string} shelvesetId - Shelveset's unique ID
    */
    TfvcApi.prototype.getShelvesetWorkItems = function (shelvesetId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ShelvesetWorkItems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ShelvesetWorkItems);
            }
        };
        var routeValues = {};
        var queryValues = {
            shelvesetId: shelvesetId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "tfvc", "a7a0c1c1-373e-425a-b031-a519474d743d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    return TfvcApi;
}(basem.ClientApiBase));
exports.TfvcApi = TfvcApi;
