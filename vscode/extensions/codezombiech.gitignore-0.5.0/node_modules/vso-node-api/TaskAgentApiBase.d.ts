import basem = require('./ClientApiBases');
import VsoBaseInterfaces = require('./interfaces/common/VsoBaseInterfaces');
import TaskAgentInterfaces = require("./interfaces/TaskAgentInterfaces");
import VSSInterfaces = require("./interfaces/common/VSSInterfaces");
export interface ITaskAgentApiBase extends basem.ClientApiBase {
    addAgent(agent: TaskAgentInterfaces.TaskAgent, poolId: number): Promise<TaskAgentInterfaces.TaskAgent>;
    deleteAgent(poolId: number, agentId: number): Promise<void>;
    getAgent(poolId: number, agentId: number, includeCapabilities?: boolean, includeAssignedRequest?: boolean, propertyFilters?: string[]): Promise<TaskAgentInterfaces.TaskAgent>;
    getAgents(poolId: number, agentName?: string, includeCapabilities?: boolean, includeAssignedRequest?: boolean, propertyFilters?: string[], demands?: string[]): Promise<TaskAgentInterfaces.TaskAgent[]>;
    replaceAgent(agent: TaskAgentInterfaces.TaskAgent, poolId: number, agentId: number): Promise<TaskAgentInterfaces.TaskAgent>;
    updateAgent(agent: TaskAgentInterfaces.TaskAgent, poolId: number, agentId: number): Promise<TaskAgentInterfaces.TaskAgent>;
    getAzureSubscriptions(scopeIdentifier: string): Promise<TaskAgentInterfaces.AzureSubscriptionQueryResult>;
    queryEndpoint(endpoint: TaskAgentInterfaces.TaskDefinitionEndpoint): Promise<string[]>;
    deleteAgentRequest(poolId: number, requestId: number, lockToken: string): Promise<void>;
    getAgentRequest(poolId: number, requestId: number): Promise<TaskAgentInterfaces.TaskAgentJobRequest>;
    getAgentRequestsForAgent(poolId: number, agentId: number, completedRequestCount?: number): Promise<TaskAgentInterfaces.TaskAgentJobRequest[]>;
    getAgentRequestsForAgents(poolId: number, agentIds: number[], completedRequestCount?: number): Promise<TaskAgentInterfaces.TaskAgentJobRequest[]>;
    getAgentRequestsForPlan(poolId: number, planId: string, jobId?: string): Promise<TaskAgentInterfaces.TaskAgentJobRequest[]>;
    queueAgentRequest(request: TaskAgentInterfaces.TaskAgentJobRequest, poolId: number): Promise<TaskAgentInterfaces.TaskAgentJobRequest>;
    updateAgentRequest(request: TaskAgentInterfaces.TaskAgentJobRequest, poolId: number, requestId: number, lockToken: string): Promise<TaskAgentInterfaces.TaskAgentJobRequest>;
    deleteMessage(poolId: number, messageId: number, sessionId: string): Promise<void>;
    getMessage(poolId: number, sessionId: string, lastMessageId?: number): Promise<TaskAgentInterfaces.TaskAgentMessage>;
    refreshAgent(poolId: number, agentId: number): Promise<void>;
    refreshAgents(poolId: number): Promise<void>;
    sendMessage(message: TaskAgentInterfaces.TaskAgentMessage, poolId: number, requestId: number): Promise<void>;
    addMetaTaskDefinition(definition: TaskAgentInterfaces.MetaTaskDefinition, project: string): Promise<TaskAgentInterfaces.MetaTaskDefinition>;
    deleteMetaTaskDefinition(project: string, metaTaskDefinitionId: string): Promise<void>;
    getMetaTaskDefinitions(project: string, metaTaskDefinitionId?: string, expanded?: boolean): Promise<TaskAgentInterfaces.MetaTaskDefinition[]>;
    updateMetaTaskDefinition(definition: TaskAgentInterfaces.MetaTaskDefinition, project: string): Promise<TaskAgentInterfaces.MetaTaskDefinition>;
    getPackage(packageType: string, platform: string, version: string): Promise<TaskAgentInterfaces.PackageMetadata>;
    getPackages(packageType?: string, platform?: string, top?: number): Promise<TaskAgentInterfaces.PackageMetadata[]>;
    getAgentPoolRoles(poolId?: number): Promise<VSSInterfaces.IdentityRef[]>;
    addAgentPool(pool: TaskAgentInterfaces.TaskAgentPool): Promise<TaskAgentInterfaces.TaskAgentPool>;
    deleteAgentPool(poolId: number): Promise<void>;
    getAgentPool(poolId: number, properties?: string[]): Promise<TaskAgentInterfaces.TaskAgentPool>;
    getAgentPools(poolName?: string, properties?: string[]): Promise<TaskAgentInterfaces.TaskAgentPool[]>;
    updateAgentPool(pool: TaskAgentInterfaces.TaskAgentPool, poolId: number): Promise<TaskAgentInterfaces.TaskAgentPool>;
    getAgentQueueRoles(queueId?: number): Promise<VSSInterfaces.IdentityRef[]>;
    addAgentQueue(queue: TaskAgentInterfaces.TaskAgentQueue, project?: string): Promise<TaskAgentInterfaces.TaskAgentQueue>;
    createQueuesForAgentPools(project?: string): Promise<void>;
    deleteAgentQueue(queueId: number, project?: string): Promise<void>;
    getAgentQueue(queueId: number, project?: string, actionFilter?: TaskAgentInterfaces.TaskAgentQueueActionFilter): Promise<TaskAgentInterfaces.TaskAgentQueue>;
    getAgentQueues(project?: string, queueName?: string, actionFilter?: TaskAgentInterfaces.TaskAgentQueueActionFilter): Promise<TaskAgentInterfaces.TaskAgentQueue[]>;
    queryDataProvider(binding: TaskAgentInterfaces.DataSourceBinding, scopeIdentifier: string, endpointId: string): Promise<any>;
    queryServiceEndpoint(binding: TaskAgentInterfaces.DataSourceBinding, scopeIdentifier: string): Promise<string[]>;
    createServiceEndpoint(endpoint: TaskAgentInterfaces.ServiceEndpoint, scopeIdentifier: string): Promise<TaskAgentInterfaces.ServiceEndpoint>;
    deleteServiceEndpoint(scopeIdentifier: string, endpointId: string): Promise<void>;
    getServiceEndpointDetails(scopeIdentifier: string, endpointId: string): Promise<TaskAgentInterfaces.ServiceEndpoint>;
    getServiceEndpoints(scopeIdentifier: string, type?: string, authSchemes?: string[], endpointIds?: string[]): Promise<TaskAgentInterfaces.ServiceEndpoint[]>;
    updateServiceEndpoint(endpoint: TaskAgentInterfaces.ServiceEndpoint, scopeIdentifier: string, endpointId: string): Promise<TaskAgentInterfaces.ServiceEndpoint>;
    getServiceEndpointTypes(scopeIdentifier: string, type?: string, scheme?: string): Promise<TaskAgentInterfaces.ServiceEndpointType[]>;
    createAgentSession(session: TaskAgentInterfaces.TaskAgentSession, poolId: number): Promise<TaskAgentInterfaces.TaskAgentSession>;
    deleteAgentSession(poolId: number, sessionId: string): Promise<void>;
    deleteTaskDefinition(taskId: string): Promise<void>;
    getTaskContentZip(taskId: string, versionString: string, visibility?: string[], scopeLocal?: boolean): Promise<NodeJS.ReadableStream>;
    getTaskDefinition(taskId: string, versionString: string, visibility?: string[], scopeLocal?: boolean): Promise<TaskAgentInterfaces.TaskDefinition>;
    getTaskDefinitions(taskId?: string, visibility?: string[], scopeLocal?: boolean): Promise<TaskAgentInterfaces.TaskDefinition[]>;
    updateAgentUserCapabilities(userCapabilities: {
        [key: string]: string;
    }, poolId: number, agentId: number): Promise<TaskAgentInterfaces.TaskAgent>;
}
export declare class TaskAgentApiBase extends basem.ClientApiBase implements ITaskAgentApiBase {
    constructor(baseUrl: string, handlers: VsoBaseInterfaces.IRequestHandler[]);
    /**
    * @param {TaskAgentInterfaces.TaskAgent} agent
    * @param {number} poolId
    */
    addAgent(agent: TaskAgentInterfaces.TaskAgent, poolId: number): Promise<TaskAgentInterfaces.TaskAgent>;
    /**
    * @param {number} poolId
    * @param {number} agentId
    */
    deleteAgent(poolId: number, agentId: number): Promise<void>;
    /**
    * @param {number} poolId
    * @param {number} agentId
    * @param {boolean} includeCapabilities
    * @param {boolean} includeAssignedRequest
    * @param {string[]} propertyFilters
    */
    getAgent(poolId: number, agentId: number, includeCapabilities?: boolean, includeAssignedRequest?: boolean, propertyFilters?: string[]): Promise<TaskAgentInterfaces.TaskAgent>;
    /**
    * @param {number} poolId
    * @param {string} agentName
    * @param {boolean} includeCapabilities
    * @param {boolean} includeAssignedRequest
    * @param {string[]} propertyFilters
    * @param {string[]} demands
    */
    getAgents(poolId: number, agentName?: string, includeCapabilities?: boolean, includeAssignedRequest?: boolean, propertyFilters?: string[], demands?: string[]): Promise<TaskAgentInterfaces.TaskAgent[]>;
    /**
    * @param {TaskAgentInterfaces.TaskAgent} agent
    * @param {number} poolId
    * @param {number} agentId
    */
    replaceAgent(agent: TaskAgentInterfaces.TaskAgent, poolId: number, agentId: number): Promise<TaskAgentInterfaces.TaskAgent>;
    /**
    * @param {TaskAgentInterfaces.TaskAgent} agent
    * @param {number} poolId
    * @param {number} agentId
    */
    updateAgent(agent: TaskAgentInterfaces.TaskAgent, poolId: number, agentId: number): Promise<TaskAgentInterfaces.TaskAgent>;
    /**
    * @param {string} scopeIdentifier - The project GUID to scope the request
    */
    getAzureSubscriptions(scopeIdentifier: string): Promise<TaskAgentInterfaces.AzureSubscriptionQueryResult>;
    /**
    * Proxy for a GET request defined by an 'endpoint'. The request is authorized using a service connection. The response is filtered using an XPath/Json based selector.
    *
    * @param {TaskAgentInterfaces.TaskDefinitionEndpoint} endpoint - Describes the URL to fetch.
    */
    queryEndpoint(endpoint: TaskAgentInterfaces.TaskDefinitionEndpoint): Promise<string[]>;
    /**
    * @param {number} poolId
    * @param {number} requestId
    * @param {string} lockToken
    */
    deleteAgentRequest(poolId: number, requestId: number, lockToken: string): Promise<void>;
    /**
    * @param {number} poolId
    * @param {number} requestId
    */
    getAgentRequest(poolId: number, requestId: number): Promise<TaskAgentInterfaces.TaskAgentJobRequest>;
    /**
    * @param {number} poolId
    * @param {number} agentId
    * @param {number} completedRequestCount
    */
    getAgentRequestsForAgent(poolId: number, agentId: number, completedRequestCount?: number): Promise<TaskAgentInterfaces.TaskAgentJobRequest[]>;
    /**
    * @param {number} poolId
    * @param {number[]} agentIds
    * @param {number} completedRequestCount
    */
    getAgentRequestsForAgents(poolId: number, agentIds: number[], completedRequestCount?: number): Promise<TaskAgentInterfaces.TaskAgentJobRequest[]>;
    /**
    * @param {number} poolId
    * @param {string} planId
    * @param {string} jobId
    */
    getAgentRequestsForPlan(poolId: number, planId: string, jobId?: string): Promise<TaskAgentInterfaces.TaskAgentJobRequest[]>;
    /**
    * @param {TaskAgentInterfaces.TaskAgentJobRequest} request
    * @param {number} poolId
    */
    queueAgentRequest(request: TaskAgentInterfaces.TaskAgentJobRequest, poolId: number): Promise<TaskAgentInterfaces.TaskAgentJobRequest>;
    /**
    * @param {TaskAgentInterfaces.TaskAgentJobRequest} request
    * @param {number} poolId
    * @param {number} requestId
    * @param {string} lockToken
    */
    updateAgentRequest(request: TaskAgentInterfaces.TaskAgentJobRequest, poolId: number, requestId: number, lockToken: string): Promise<TaskAgentInterfaces.TaskAgentJobRequest>;
    /**
    * @param {number} poolId
    * @param {number} messageId
    * @param {string} sessionId
    */
    deleteMessage(poolId: number, messageId: number, sessionId: string): Promise<void>;
    /**
    * @param {number} poolId
    * @param {string} sessionId
    * @param {number} lastMessageId
    */
    getMessage(poolId: number, sessionId: string, lastMessageId?: number): Promise<TaskAgentInterfaces.TaskAgentMessage>;
    /**
    * @param {number} poolId
    * @param {number} agentId
    */
    refreshAgent(poolId: number, agentId: number): Promise<void>;
    /**
    * @param {number} poolId
    */
    refreshAgents(poolId: number): Promise<void>;
    /**
    * @param {TaskAgentInterfaces.TaskAgentMessage} message
    * @param {number} poolId
    * @param {number} requestId
    */
    sendMessage(message: TaskAgentInterfaces.TaskAgentMessage, poolId: number, requestId: number): Promise<void>;
    /**
    * @param {TaskAgentInterfaces.MetaTaskDefinition} definition
    * @param {string} project - Project ID or project name
    */
    addMetaTaskDefinition(definition: TaskAgentInterfaces.MetaTaskDefinition, project: string): Promise<TaskAgentInterfaces.MetaTaskDefinition>;
    /**
    * @param {string} project - Project ID or project name
    * @param {string} metaTaskDefinitionId
    */
    deleteMetaTaskDefinition(project: string, metaTaskDefinitionId: string): Promise<void>;
    /**
    * @param {string} project - Project ID or project name
    * @param {string} metaTaskDefinitionId
    * @param {boolean} expanded
    */
    getMetaTaskDefinitions(project: string, metaTaskDefinitionId?: string, expanded?: boolean): Promise<TaskAgentInterfaces.MetaTaskDefinition[]>;
    /**
    * @param {TaskAgentInterfaces.MetaTaskDefinition} definition
    * @param {string} project - Project ID or project name
    */
    updateMetaTaskDefinition(definition: TaskAgentInterfaces.MetaTaskDefinition, project: string): Promise<TaskAgentInterfaces.MetaTaskDefinition>;
    /**
    * @param {string} packageType
    * @param {string} platform
    * @param {string} version
    */
    getPackage(packageType: string, platform: string, version: string): Promise<TaskAgentInterfaces.PackageMetadata>;
    /**
    * @param {string} packageType
    * @param {string} platform
    * @param {number} top
    */
    getPackages(packageType?: string, platform?: string, top?: number): Promise<TaskAgentInterfaces.PackageMetadata[]>;
    /**
    * @param {number} poolId
    */
    getAgentPoolRoles(poolId?: number): Promise<VSSInterfaces.IdentityRef[]>;
    /**
    * @param {TaskAgentInterfaces.TaskAgentPool} pool
    */
    addAgentPool(pool: TaskAgentInterfaces.TaskAgentPool): Promise<TaskAgentInterfaces.TaskAgentPool>;
    /**
    * @param {number} poolId
    */
    deleteAgentPool(poolId: number): Promise<void>;
    /**
    * @param {number} poolId
    * @param {string[]} properties
    */
    getAgentPool(poolId: number, properties?: string[]): Promise<TaskAgentInterfaces.TaskAgentPool>;
    /**
    * @param {string} poolName
    * @param {string[]} properties
    */
    getAgentPools(poolName?: string, properties?: string[]): Promise<TaskAgentInterfaces.TaskAgentPool[]>;
    /**
    * @param {TaskAgentInterfaces.TaskAgentPool} pool
    * @param {number} poolId
    */
    updateAgentPool(pool: TaskAgentInterfaces.TaskAgentPool, poolId: number): Promise<TaskAgentInterfaces.TaskAgentPool>;
    /**
    * @param {number} queueId
    */
    getAgentQueueRoles(queueId?: number): Promise<VSSInterfaces.IdentityRef[]>;
    /**
    * @param {TaskAgentInterfaces.TaskAgentQueue} queue
    * @param {string} project - Project ID or project name
    */
    addAgentQueue(queue: TaskAgentInterfaces.TaskAgentQueue, project?: string): Promise<TaskAgentInterfaces.TaskAgentQueue>;
    /**
    * @param {string} project - Project ID or project name
    */
    createQueuesForAgentPools(project?: string): Promise<void>;
    /**
    * @param {number} queueId
    * @param {string} project - Project ID or project name
    */
    deleteAgentQueue(queueId: number, project?: string): Promise<void>;
    /**
    * @param {number} queueId
    * @param {string} project - Project ID or project name
    * @param {TaskAgentInterfaces.TaskAgentQueueActionFilter} actionFilter
    */
    getAgentQueue(queueId: number, project?: string, actionFilter?: TaskAgentInterfaces.TaskAgentQueueActionFilter): Promise<TaskAgentInterfaces.TaskAgentQueue>;
    /**
    * @param {string} project - Project ID or project name
    * @param {string} queueName
    * @param {TaskAgentInterfaces.TaskAgentQueueActionFilter} actionFilter
    */
    getAgentQueues(project?: string, queueName?: string, actionFilter?: TaskAgentInterfaces.TaskAgentQueueActionFilter): Promise<TaskAgentInterfaces.TaskAgentQueue[]>;
    /**
    * @param {TaskAgentInterfaces.DataSourceBinding} binding
    * @param {string} scopeIdentifier - The project GUID to scope the request
    * @param {string} endpointId
    */
    queryDataProvider(binding: TaskAgentInterfaces.DataSourceBinding, scopeIdentifier: string, endpointId: string): Promise<any>;
    /**
    * Proxy for a GET request defined by an service endpoint. The request is authorized using a data source in service endpoint. The response is filtered using an XPath/Json based selector.
    *
    * @param {TaskAgentInterfaces.DataSourceBinding} binding - Describes the data source to fetch.
    * @param {string} scopeIdentifier - The project GUID to scope the request
    */
    queryServiceEndpoint(binding: TaskAgentInterfaces.DataSourceBinding, scopeIdentifier: string): Promise<string[]>;
    /**
    * @param {TaskAgentInterfaces.ServiceEndpoint} endpoint
    * @param {string} scopeIdentifier - The project GUID to scope the request
    */
    createServiceEndpoint(endpoint: TaskAgentInterfaces.ServiceEndpoint, scopeIdentifier: string): Promise<TaskAgentInterfaces.ServiceEndpoint>;
    /**
    * @param {string} scopeIdentifier - The project GUID to scope the request
    * @param {string} endpointId
    */
    deleteServiceEndpoint(scopeIdentifier: string, endpointId: string): Promise<void>;
    /**
    * @param {string} scopeIdentifier - The project GUID to scope the request
    * @param {string} endpointId
    */
    getServiceEndpointDetails(scopeIdentifier: string, endpointId: string): Promise<TaskAgentInterfaces.ServiceEndpoint>;
    /**
    * @param {string} scopeIdentifier - The project GUID to scope the request
    * @param {string} type
    * @param {string[]} authSchemes
    * @param {string[]} endpointIds
    */
    getServiceEndpoints(scopeIdentifier: string, type?: string, authSchemes?: string[], endpointIds?: string[]): Promise<TaskAgentInterfaces.ServiceEndpoint[]>;
    /**
    * @param {TaskAgentInterfaces.ServiceEndpoint} endpoint
    * @param {string} scopeIdentifier - The project GUID to scope the request
    * @param {string} endpointId
    */
    updateServiceEndpoint(endpoint: TaskAgentInterfaces.ServiceEndpoint, scopeIdentifier: string, endpointId: string): Promise<TaskAgentInterfaces.ServiceEndpoint>;
    /**
    * @param {string} scopeIdentifier - The project GUID to scope the request
    * @param {string} type
    * @param {string} scheme
    */
    getServiceEndpointTypes(scopeIdentifier: string, type?: string, scheme?: string): Promise<TaskAgentInterfaces.ServiceEndpointType[]>;
    /**
    * @param {TaskAgentInterfaces.TaskAgentSession} session
    * @param {number} poolId
    */
    createAgentSession(session: TaskAgentInterfaces.TaskAgentSession, poolId: number): Promise<TaskAgentInterfaces.TaskAgentSession>;
    /**
    * @param {number} poolId
    * @param {string} sessionId
    */
    deleteAgentSession(poolId: number, sessionId: string): Promise<void>;
    /**
    * @param {string} taskId
    */
    deleteTaskDefinition(taskId: string): Promise<void>;
    /**
    * @param {string} taskId
    * @param {string} versionString
    * @param {string[]} visibility
    * @param {boolean} scopeLocal
    */
    getTaskContentZip(taskId: string, versionString: string, visibility?: string[], scopeLocal?: boolean): Promise<NodeJS.ReadableStream>;
    /**
    * @param {string} taskId
    * @param {string} versionString
    * @param {string[]} visibility
    * @param {boolean} scopeLocal
    */
    getTaskDefinition(taskId: string, versionString: string, visibility?: string[], scopeLocal?: boolean): Promise<TaskAgentInterfaces.TaskDefinition>;
    /**
    * @param {string} taskId
    * @param {string[]} visibility
    * @param {boolean} scopeLocal
    */
    getTaskDefinitions(taskId?: string, visibility?: string[], scopeLocal?: boolean): Promise<TaskAgentInterfaces.TaskDefinition[]>;
    /**
    * @param {{ [key: string] : string; }} userCapabilities
    * @param {number} poolId
    * @param {number} agentId
    */
    updateAgentUserCapabilities(userCapabilities: {
        [key: string]: string;
    }, poolId: number, agentId: number): Promise<TaskAgentInterfaces.TaskAgent>;
}
