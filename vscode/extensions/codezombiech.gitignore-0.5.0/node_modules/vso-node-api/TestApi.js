/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// Licensed under the MIT license.  See LICENSE file in the project root for full license information.
var Q = require('q');
var basem = require('./ClientApiBases');
var TestInterfaces = require("./interfaces/TestInterfaces");
var TestApi = (function (_super) {
    __extends(TestApi, _super);
    function TestApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Test-api');
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} testCaseResultId
    * @param {number} iterationId
    * @param {string} actionPath
    */
    TestApi.prototype.getActionResults = function (project, runId, testCaseResultId, iterationId, actionPath) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ActionResults) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ActionResults);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId,
            iterationId: iterationId,
            actionPath: actionPath
        };
        this.vsoClient.getVersioningData("3.0-preview.3", "Test", "eaf40c31-ff84-4062-aafd-d5664be11a37", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestActionResultModel, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestAttachmentRequestModel} attachmentRequestModel
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} testCaseResultId
    * @param {number} iterationId
    * @param {string} actionPath
    */
    TestApi.prototype.createTestIterationResultAttachment = function (attachmentRequestModel, project, runId, testCaseResultId, iterationId, actionPath) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId
        };
        var queryValues = {
            iterationId: iterationId,
            actionPath: actionPath,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, attachmentRequestModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestAttachmentRequestModel} attachmentRequestModel
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} testCaseResultId
    */
    TestApi.prototype.createTestResultAttachment = function (attachmentRequestModel, project, runId, testCaseResultId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, attachmentRequestModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Returns a test result attachment
    *
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} testCaseResultId
    * @param {number} attachmentId
    */
    TestApi.prototype.getTestResultAttachmentContent = function (project, runId, testCaseResultId, attachmentId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId,
            attachmentId: attachmentId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Returns attachment references for test result.
    *
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} testCaseResultId
    */
    TestApi.prototype.getTestResultAttachments = function (project, runId, testCaseResultId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Attachments) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachments);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestAttachment, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Returns a test result attachment
    *
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} testCaseResultId
    * @param {number} attachmentId
    */
    TestApi.prototype.getTestResultAttachmentZip = function (project, runId, testCaseResultId, attachmentId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId,
            attachmentId: attachmentId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestAttachmentRequestModel} attachmentRequestModel
    * @param {string} project - Project ID or project name
    * @param {number} runId
    */
    TestApi.prototype.createTestRunAttachment = function (attachmentRequestModel, project, runId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        };
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "4f004af4-a507-489c-9b13-cb62060beb11", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, attachmentRequestModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Returns a test run attachment
    *
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} attachmentId
    */
    TestApi.prototype.getTestRunAttachmentContent = function (project, runId, attachmentId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            attachmentId: attachmentId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "4f004af4-a507-489c-9b13-cb62060beb11", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Returns attachment references for test run.
    *
    * @param {string} project - Project ID or project name
    * @param {number} runId
    */
    TestApi.prototype.getTestRunAttachments = function (project, runId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Attachments) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachments);
            }
        };
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "4f004af4-a507-489c-9b13-cb62060beb11", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestAttachment, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Returns a test run attachment
    *
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} attachmentId
    */
    TestApi.prototype.getTestRunAttachmentZip = function (project, runId, attachmentId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            attachmentId: attachmentId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "4f004af4-a507-489c-9b13-cb62060beb11", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} testCaseResultId
    */
    TestApi.prototype.getBugsLinkedToTestResult = function (project, runId, testCaseResultId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Bugs) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Bugs);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "6de20ca2-67de-4faf-97fa-38c5d585eb00", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} cloneOperationId
    * @param {boolean} includeDetails
    */
    TestApi.prototype.getCloneInformation = function (project, cloneOperationId, includeDetails) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, CloneOperation) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(CloneOperation);
            }
        };
        var routeValues = {
            project: project,
            cloneOperationId: cloneOperationId
        };
        var queryValues = {
            '$includeDetails': includeDetails,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "5b9d6320-abed-47a5-a151-cd6dc3798be6", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.CloneOperationInformation, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestPlanCloneRequest} cloneRequestBody
    * @param {string} project - Project ID or project name
    * @param {number} planId
    */
    TestApi.prototype.cloneTestPlan = function (cloneRequestBody, project, planId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, CloneOperation) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(CloneOperation);
            }
        };
        var routeValues = {
            project: project,
            planId: planId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "edc3ef4b-8460-4e86-86fa-8e4f5e9be831", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestPlanCloneRequest, responseTypeMetadata: TestInterfaces.TypeInfo.CloneOperationInformation, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, cloneRequestBody, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestSuiteCloneRequest} cloneRequestBody
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} sourceSuiteId
    */
    TestApi.prototype.cloneTestSuite = function (cloneRequestBody, project, planId, sourceSuiteId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, CloneOperation) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(CloneOperation);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            sourceSuiteId: sourceSuiteId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "751e4ab5-5bf6-4fb5-9d5d-19ef347662dd", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.CloneOperationInformation, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, cloneRequestBody, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} buildId
    * @param {number} flags
    */
    TestApi.prototype.getBuildCodeCoverage = function (project, buildId, flags) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, CodeCoverage) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(CodeCoverage);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            buildId: buildId,
            flags: flags,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "77560e8a-4e8c-4d59-894e-a5f264c24444", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} buildId
    * @param {number} deltaBuildId
    */
    TestApi.prototype.getCodeCoverageSummary = function (project, buildId, deltaBuildId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, CodeCoverage) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(CodeCoverage);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            buildId: buildId,
            deltaBuildId: deltaBuildId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "77560e8a-4e8c-4d59-894e-a5f264c24444", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * http://(tfsserver):8080/tfs/DefaultCollection/_apis/test/CodeCoverage?buildId=10 Request: Json of code coverage summary
    *
    * @param {TestInterfaces.CodeCoverageData} coverageData
    * @param {string} project - Project ID or project name
    * @param {number} buildId
    */
    TestApi.prototype.updateCodeCoverageSummary = function (coverageData, project, buildId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            buildId: buildId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "77560e8a-4e8c-4d59-894e-a5f264c24444", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, coverageData, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} flags
    */
    TestApi.prototype.getTestRunCodeCoverage = function (project, runId, flags) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, CodeCoverage) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(CodeCoverage);
            }
        };
        var routeValues = {
            project: project,
            runId: runId
        };
        var queryValues = {
            flags: flags,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "9629116f-3b89-4ed8-b358-d4694efda160", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestConfiguration} testConfiguration
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.createTestConfiguration = function (testConfiguration, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Configuration) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Configuration);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "d667591b-b9fd-4263-997a-9a084cca848f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestConfiguration, responseTypeMetadata: TestInterfaces.TypeInfo.TestConfiguration, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, testConfiguration, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} testConfigurationId
    */
    TestApi.prototype.deleteTestConfiguration = function (project, testConfigurationId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            project: project,
            testConfigurationId: testConfigurationId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "d667591b-b9fd-4263-997a-9a084cca848f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} testConfigurationId
    */
    TestApi.prototype.getTestConfigurationById = function (project, testConfigurationId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Configuration) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Configuration);
            }
        };
        var routeValues = {
            project: project,
            testConfigurationId: testConfigurationId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "d667591b-b9fd-4263-997a-9a084cca848f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestConfiguration, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} skip
    * @param {number} top
    * @param {boolean} includeAllProperties
    */
    TestApi.prototype.getTestConfigurations = function (project, skip, top, includeAllProperties) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Configurations) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Configurations);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            '$skip': skip,
            '$top': top,
            includeAllProperties: includeAllProperties,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "d667591b-b9fd-4263-997a-9a084cca848f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestConfiguration, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestConfiguration} testConfiguration
    * @param {string} project - Project ID or project name
    * @param {number} testConfigurationId
    */
    TestApi.prototype.updateTestConfiguration = function (testConfiguration, project, testConfigurationId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Configuration) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Configuration);
            }
        };
        var routeValues = {
            project: project,
            testConfigurationId: testConfigurationId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "d667591b-b9fd-4263-997a-9a084cca848f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestConfiguration, responseTypeMetadata: TestInterfaces.TypeInfo.TestConfiguration, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, testConfiguration, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.CustomTestFieldDefinition[]} newFields
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.addCustomFields = function (newFields, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ExtensionFields) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ExtensionFields);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "8ce1923b-f4c7-4e22-b93b-f6284e525ec2", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.CustomTestFieldDefinition, responseTypeMetadata: TestInterfaces.TypeInfo.CustomTestFieldDefinition, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, newFields, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {TestInterfaces.CustomTestFieldScope} scopeFilter
    */
    TestApi.prototype.queryCustomFields = function (project, scopeFilter) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ExtensionFields) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ExtensionFields);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            scopeFilter: scopeFilter,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "8ce1923b-f4c7-4e22-b93b-f6284e525ec2", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.CustomTestFieldDefinition, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.ResultsFilter} filter
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.queryTestResultHistory = function (filter, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, History) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(History);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "234616f5-429c-4e7b-9192-affd76731dfd", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.ResultsFilter, responseTypeMetadata: TestInterfaces.TypeInfo.TestResultHistory, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, filter, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} testCaseResultId
    * @param {number} iterationId
    * @param {boolean} includeActionResults
    */
    TestApi.prototype.getTestIteration = function (project, runId, testCaseResultId, iterationId, includeActionResults) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Iteration) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Iteration);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId,
            iterationId: iterationId
        };
        var queryValues = {
            includeActionResults: includeActionResults,
        };
        this.vsoClient.getVersioningData("3.0-preview.3", "Test", "73eb9074-3446-4c44-8296-2f811950ff8d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestIterationDetailsModel, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} testCaseResultId
    * @param {boolean} includeActionResults
    */
    TestApi.prototype.getTestIterations = function (project, runId, testCaseResultId, includeActionResults) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Iterations) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Iterations);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId
        };
        var queryValues = {
            includeActionResults: includeActionResults,
        };
        this.vsoClient.getVersioningData("3.0-preview.3", "Test", "73eb9074-3446-4c44-8296-2f811950ff8d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestIterationDetailsModel, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    */
    TestApi.prototype.getTestRunLogs = function (project, runId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, MessageLogs) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(MessageLogs);
            }
        };
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "a1e55200-637e-42e9-a7c0-7e5bfdedb1b3", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestMessageLogDetails, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} testCaseResultId
    * @param {number} iterationId
    * @param {string} paramName
    */
    TestApi.prototype.getResultParameters = function (project, runId, testCaseResultId, iterationId, paramName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ParameterResults) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ParameterResults);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId,
            iterationId: iterationId
        };
        var queryValues = {
            paramName: paramName,
        };
        this.vsoClient.getVersioningData("3.0-preview.3", "Test", "7c69810d-3354-4af3-844a-180bd25db08a", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.PlanUpdateModel} testPlan
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.createTestPlan = function (testPlan, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Plan) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Plan);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "51712106-7278-4208-8563-1c96f40cf5e4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestPlan, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, testPlan, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} planId
    */
    TestApi.prototype.deleteTestPlan = function (project, planId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            project: project,
            planId: planId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "51712106-7278-4208-8563-1c96f40cf5e4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} planId
    */
    TestApi.prototype.getPlanById = function (project, planId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Plan) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Plan);
            }
        };
        var routeValues = {
            project: project,
            planId: planId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "51712106-7278-4208-8563-1c96f40cf5e4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestPlan, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} owner
    * @param {number} skip
    * @param {number} top
    * @param {boolean} includePlanDetails
    * @param {boolean} filterActivePlans
    */
    TestApi.prototype.getPlans = function (project, owner, skip, top, includePlanDetails, filterActivePlans) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Plans) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Plans);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            owner: owner,
            '$skip': skip,
            '$top': top,
            includePlanDetails: includePlanDetails,
            filterActivePlans: filterActivePlans,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "51712106-7278-4208-8563-1c96f40cf5e4", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestPlan, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.PlanUpdateModel} planUpdateModel
    * @param {string} project - Project ID or project name
    * @param {number} planId
    */
    TestApi.prototype.updateTestPlan = function (planUpdateModel, project, planId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Plan) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Plan);
            }
        };
        var routeValues = {
            project: project,
            planId: planId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "51712106-7278-4208-8563-1c96f40cf5e4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestPlan, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, planUpdateModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} suiteId
    * @param {number} pointIds
    * @param {string} witFields
    */
    TestApi.prototype.getPoint = function (project, planId, suiteId, pointIds, witFields) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Point) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Point);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId,
            pointIds: pointIds
        };
        var queryValues = {
            witFields: witFields,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "3bcfd5c8-be62-488e-b1da-b8289ce9299c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestPoint, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} suiteId
    * @param {string} witFields
    * @param {string} configurationId
    * @param {string} testCaseId
    * @param {string} testPointIds
    * @param {boolean} includePointDetails
    * @param {number} skip
    * @param {number} top
    */
    TestApi.prototype.getPoints = function (project, planId, suiteId, witFields, configurationId, testCaseId, testPointIds, includePointDetails, skip, top) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Points) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Points);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        var queryValues = {
            witFields: witFields,
            configurationId: configurationId,
            testCaseId: testCaseId,
            testPointIds: testPointIds,
            includePointDetails: includePointDetails,
            '$skip': skip,
            '$top': top,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "3bcfd5c8-be62-488e-b1da-b8289ce9299c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestPoint, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.PointUpdateModel} pointUpdateModel
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} suiteId
    * @param {string} pointIds
    */
    TestApi.prototype.updateTestPoints = function (pointUpdateModel, project, planId, suiteId, pointIds) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Point) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Point);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId,
            pointIds: pointIds
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "3bcfd5c8-be62-488e-b1da-b8289ce9299c", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestPoint, responseIsCollection: true };
            _this.restClient.update(url, apiVersion, pointUpdateModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} buildId
    * @param {string} publishContext
    * @param {string} groupBy
    * @param {string} filter
    * @param {string} orderby
    */
    TestApi.prototype.getTestResultDetailsForBuild = function (project, buildId, publishContext, groupBy, filter, orderby) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ResultDetailsByBuild) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultDetailsByBuild);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            buildId: buildId,
            publishContext: publishContext,
            groupBy: groupBy,
            '$filter': filter,
            '$orderby': orderby,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "efb387b0-10d5-42e7-be40-95e06ee9430f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestResultsDetails, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} releaseEnvId
    * @param {string} publishContext
    * @param {string} groupBy
    * @param {string} filter
    * @param {string} orderby
    */
    TestApi.prototype.getTestResultDetailsForRelease = function (project, releaseId, releaseEnvId, publishContext, groupBy, filter, orderby) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ResultDetailsByRelease) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultDetailsByRelease);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            releaseId: releaseId,
            releaseEnvId: releaseEnvId,
            publishContext: publishContext,
            groupBy: groupBy,
            '$filter': filter,
            '$orderby': orderby,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "b834ec7e-35bb-450f-a3c8-802e70ca40dd", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestResultsDetails, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.getResultRetentionSettings = function (project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ResultRetentionSetting) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultRetentionSetting);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "a3206d9e-fa8d-42d3-88cb-f75c51e69cde", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.ResultRetentionSettings, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.ResultRetentionSettings} retentionSettings
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.updateResultRetentionSettings = function (retentionSettings, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ResultRetentionSetting) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultRetentionSetting);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "a3206d9e-fa8d-42d3-88cb-f75c51e69cde", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.ResultRetentionSettings, responseTypeMetadata: TestInterfaces.TypeInfo.ResultRetentionSettings, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, retentionSettings, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestCaseResult[]} results
    * @param {string} project - Project ID or project name
    * @param {number} runId
    */
    TestApi.prototype.addTestResultsToTestRun = function (results, project, runId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        };
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("3.0-preview.4", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, results, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {number} testCaseResultId
    * @param {TestInterfaces.ResultDetails} detailsToInclude
    */
    TestApi.prototype.getTestResultById = function (project, runId, testCaseResultId, detailsToInclude) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Result) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Result);
            }
        };
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId
        };
        var queryValues = {
            detailsToInclude: detailsToInclude,
        };
        this.vsoClient.getVersioningData("3.0-preview.4", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    * @param {TestInterfaces.ResultDetails} detailsToInclude
    * @param {number} skip
    * @param {number} top
    */
    TestApi.prototype.getTestResults = function (project, runId, detailsToInclude, skip, top) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        };
        var routeValues = {
            project: project,
            runId: runId
        };
        var queryValues = {
            detailsToInclude: detailsToInclude,
            '$skip': skip,
            '$top': top,
        };
        this.vsoClient.getVersioningData("3.0-preview.4", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestCaseResult[]} results
    * @param {string} project - Project ID or project name
    * @param {number} runId
    */
    TestApi.prototype.updateTestResults = function (results, project, runId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        };
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("3.0-preview.4", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.update(url, apiVersion, results, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestResultsQuery} query
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.getTestResultsByQuery = function (query, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Result) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Result);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.4", "Test", "6711da49-8e6f-4d35-9f73-cef7a3c81a5b", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestResultsQuery, responseTypeMetadata: TestInterfaces.TypeInfo.TestResultsQuery, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, query, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} buildId
    * @param {string} publishContext
    * @param {boolean} includeFailureDetails
    * @param {TestInterfaces.BuildReference} buildToCompare
    */
    TestApi.prototype.queryTestResultsReportForBuild = function (project, buildId, publishContext, includeFailureDetails, buildToCompare) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ResultSummaryByBuild) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultSummaryByBuild);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            buildId: buildId,
            publishContext: publishContext,
            includeFailureDetails: includeFailureDetails,
            buildToCompare: buildToCompare,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "000ef77b-fea2-498d-a10d-ad1a037f559f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestResultSummary, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} releaseEnvId
    * @param {string} publishContext
    * @param {boolean} includeFailureDetails
    * @param {TestInterfaces.ReleaseReference} releaseToCompare
    */
    TestApi.prototype.queryTestResultsReportForRelease = function (project, releaseId, releaseEnvId, publishContext, includeFailureDetails, releaseToCompare) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ResultSummaryByRelease) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultSummaryByRelease);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            releaseId: releaseId,
            releaseEnvId: releaseEnvId,
            publishContext: publishContext,
            includeFailureDetails: includeFailureDetails,
            releaseToCompare: releaseToCompare,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "85765790-ac68-494e-b268-af36c3929744", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestResultSummary, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.ReleaseReference[]} releases
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.queryTestResultsSummaryForReleases = function (releases, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ResultSummaryByRelease) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultSummaryByRelease);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "85765790-ac68-494e-b268-af36c3929744", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestResultSummary, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, releases, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestResultsContext} resultsContext
    * @param {string} project - Project ID or project name
    * @param {number[]} workItemIds
    */
    TestApi.prototype.queryTestSummaryByRequirement = function (resultsContext, project, workItemIds) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ResultSummaryByRequirement) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultSummaryByRequirement);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            workItemIds: workItemIds && workItemIds.join(","),
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "cd08294e-308d-4460-a46e-4cfdefba0b4b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestResultsContext, responseTypeMetadata: TestInterfaces.TypeInfo.TestSummaryForWorkItem, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, resultsContext, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestResultTrendFilter} filter
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.queryResultTrendForBuild = function (filter, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, ResultTrendByBuild) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultTrendByBuild);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "fbc82a85-0786-4442-88bb-eb0fda6b01b0", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestResultTrendFilter, responseTypeMetadata: TestInterfaces.TypeInfo.AggregatedDataForResultTrend, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, filter, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    */
    TestApi.prototype.getTestRunStatistics = function (project, runId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Run) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Run);
            }
        };
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "0a42c424-d764-4a16-a2d5-5c85f87d0ae8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.RunCreateModel} testRun
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.createTestRun = function (testRun, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Run) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Run);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestRun, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, testRun, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    */
    TestApi.prototype.deleteTestRun = function (project, runId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} runId
    */
    TestApi.prototype.getTestRunById = function (project, runId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Run) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Run);
            }
        };
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestRun, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} buildUri
    * @param {string} owner
    * @param {string} tmiRunId
    * @param {number} planId
    * @param {boolean} includeRunDetails
    * @param {boolean} automated
    * @param {number} skip
    * @param {number} top
    */
    TestApi.prototype.getTestRuns = function (project, buildUri, owner, tmiRunId, planId, includeRunDetails, automated, skip, top) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Runs) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Runs);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            buildUri: buildUri,
            owner: owner,
            tmiRunId: tmiRunId,
            planId: planId,
            includeRunDetails: includeRunDetails,
            automated: automated,
            '$skip': skip,
            '$top': top,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestRun, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.RunUpdateModel} runUpdateModel
    * @param {string} project - Project ID or project name
    * @param {number} runId
    */
    TestApi.prototype.updateTestRun = function (runUpdateModel, project, runId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Run) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Run);
            }
        };
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.RunUpdateModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestRun, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, runUpdateModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestSession} testSession
    * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation
    */
    TestApi.prototype.createTestSession = function (testSession, teamContext) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Session) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Session);
            }
        };
        var project = teamContext.projectId || teamContext.project;
        var team = teamContext.teamId || teamContext.team;
        var routeValues = {
            project: project,
            team: team
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "1500b4b4-6c69-4ca6-9b18-35e9e97fe2ac", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestSession, responseTypeMetadata: TestInterfaces.TypeInfo.TestSession, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, testSession, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation
    * @param {number} period
    * @param {boolean} allSessions
    * @param {boolean} includeAllProperties
    * @param {TestInterfaces.TestSessionSource} source
    * @param {boolean} includeOnlyCompletedSessions
    */
    TestApi.prototype.getTestSessions = function (teamContext, period, allSessions, includeAllProperties, source, includeOnlyCompletedSessions) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Session) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Session);
            }
        };
        var project = teamContext.projectId || teamContext.project;
        var team = teamContext.teamId || teamContext.team;
        var routeValues = {
            project: project,
            team: team
        };
        var queryValues = {
            period: period,
            allSessions: allSessions,
            includeAllProperties: includeAllProperties,
            source: source,
            includeOnlyCompletedSessions: includeOnlyCompletedSessions,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "1500b4b4-6c69-4ca6-9b18-35e9e97fe2ac", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestSession, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestSession} testSession
    * @param {TfsCoreInterfaces.TeamContext} teamContext - The team context for the operation
    */
    TestApi.prototype.updateTestSession = function (testSession, teamContext) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Session) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Session);
            }
        };
        var project = teamContext.projectId || teamContext.project;
        var team = teamContext.teamId || teamContext.team;
        var routeValues = {
            project: project,
            team: team
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "1500b4b4-6c69-4ca6-9b18-35e9e97fe2ac", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestSession, responseTypeMetadata: TestInterfaces.TypeInfo.TestSession, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, testSession, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} suiteId
    */
    TestApi.prototype.getSuiteEntries = function (project, suiteId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, SuiteEntry) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(SuiteEntry);
            }
        };
        var routeValues = {
            project: project,
            suiteId: suiteId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "bf8b7f78-0c1f-49cb-89e9-d1a17bcaaad3", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.SuiteEntryUpdateModel[]} suiteEntries
    * @param {string} project - Project ID or project name
    * @param {number} suiteId
    */
    TestApi.prototype.reorderSuiteEntries = function (suiteEntries, project, suiteId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, SuiteEntry) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(SuiteEntry);
            }
        };
        var routeValues = {
            project: project,
            suiteId: suiteId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "bf8b7f78-0c1f-49cb-89e9-d1a17bcaaad3", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.update(url, apiVersion, suiteEntries, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} suiteId
    * @param {string} testCaseIds
    */
    TestApi.prototype.addTestCasesToSuite = function (project, planId, suiteId, testCaseIds) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Suites) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suites);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId,
            testCaseIds: testCaseIds
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} suiteId
    * @param {number} testCaseIds
    */
    TestApi.prototype.getTestCaseById = function (project, planId, suiteId, testCaseIds) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Suite) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suite);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId,
            testCaseIds: testCaseIds
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} suiteId
    */
    TestApi.prototype.getTestCases = function (project, planId, suiteId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Suites) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suites);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} suiteId
    * @param {string} testCaseIds
    */
    TestApi.prototype.removeTestCasesFromSuiteUrl = function (project, planId, suiteId, testCaseIds) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId,
            testCaseIds: testCaseIds
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.SuiteCreateModel} testSuite
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} suiteId
    */
    TestApi.prototype.createTestSuite = function (testSuite, project, planId, suiteId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Suite) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suite);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "7b7619a0-cb54-4ab3-bf22-194056f45dd1", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestSuite, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, testSuite, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} suiteId
    */
    TestApi.prototype.deleteTestSuite = function (project, planId, suiteId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "7b7619a0-cb54-4ab3-bf22-194056f45dd1", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} suiteId
    * @param {boolean} includeChildSuites
    */
    TestApi.prototype.getTestSuiteById = function (project, planId, suiteId, includeChildSuites) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Suite) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suite);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        var queryValues = {
            includeChildSuites: includeChildSuites,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "7b7619a0-cb54-4ab3-bf22-194056f45dd1", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestSuite, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {boolean} includeSuites
    * @param {number} skip
    * @param {number} top
    * @param {boolean} asTreeView
    */
    TestApi.prototype.getTestSuitesForPlan = function (project, planId, includeSuites, skip, top, asTreeView) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Suites) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suites);
            }
        };
        var routeValues = {
            project: project,
            planId: planId
        };
        var queryValues = {
            includeSuites: includeSuites,
            '$skip': skip,
            '$top': top,
            '$asTreeView': asTreeView,
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "7b7619a0-cb54-4ab3-bf22-194056f45dd1", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestSuite, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.SuiteUpdateModel} suiteUpdateModel
    * @param {string} project - Project ID or project name
    * @param {number} planId
    * @param {number} suiteId
    */
    TestApi.prototype.updateTestSuite = function (suiteUpdateModel, project, planId, suiteId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Suite) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suite);
            }
        };
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        this.vsoClient.getVersioningData("3.0-preview.2", "Test", "7b7619a0-cb54-4ab3-bf22-194056f45dd1", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestSuite, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, suiteUpdateModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {number} testCaseId
    */
    TestApi.prototype.getSuitesByTestCaseId = function (testCaseId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Suites) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suites);
            }
        };
        var routeValues = {};
        var queryValues = {
            testCaseId: testCaseId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "09a6167b-e969-4775-9247-b94cf3819caf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestSuite, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestSettings} testSettings
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.createTestSettings = function (testSettings, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, TestSetting) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(TestSetting);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "8133ce14-962f-42af-a5f9-6aa9defcb9c8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, testSettings, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} testSettingsId
    */
    TestApi.prototype.deleteTestSettings = function (project, testSettingsId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            project: project,
            testSettingsId: testSettingsId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "8133ce14-962f-42af-a5f9-6aa9defcb9c8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} testSettingsId
    */
    TestApi.prototype.getTestSettingsById = function (project, testSettingsId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, TestSetting) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(TestSetting);
            }
        };
        var routeValues = {
            project: project,
            testSettingsId: testSettingsId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "8133ce14-962f-42af-a5f9-6aa9defcb9c8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestVariable} testVariable
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.createTestVariable = function (testVariable, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Variable) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Variable);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "be3fcb2b-995b-47bf-90e5-ca3cf9980912", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, testVariable, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} testVariableId
    */
    TestApi.prototype.deleteTestVariable = function (project, testVariableId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            project: project,
            testVariableId: testVariableId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "be3fcb2b-995b-47bf-90e5-ca3cf9980912", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} testVariableId
    */
    TestApi.prototype.getTestVariableById = function (project, testVariableId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Variable) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Variable);
            }
        };
        var routeValues = {
            project: project,
            testVariableId: testVariableId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "be3fcb2b-995b-47bf-90e5-ca3cf9980912", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {number} skip
    * @param {number} top
    */
    TestApi.prototype.getTestVariables = function (project, skip, top) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Variables) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Variables);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            '$skip': skip,
            '$top': top,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "be3fcb2b-995b-47bf-90e5-ca3cf9980912", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.TestVariable} testVariable
    * @param {string} project - Project ID or project name
    * @param {number} testVariableId
    */
    TestApi.prototype.updateTestVariable = function (testVariable, project, testVariableId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, Variable) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Variable);
            }
        };
        var routeValues = {
            project: project,
            testVariableId: testVariableId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "be3fcb2b-995b-47bf-90e5-ca3cf9980912", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.update(url, apiVersion, testVariable, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {TestInterfaces.WorkItemToTestLinks} workItemToTestLinks
    * @param {string} project - Project ID or project name
    */
    TestApi.prototype.addWorkItemToTestLinks = function (workItemToTestLinks, project) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, WorkItem) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(WorkItem);
            }
        };
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "371b1655-ce05-412e-a113-64cc77bb78d2", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, workItemToTestLinks, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} testName
    * @param {number} workItemId
    */
    TestApi.prototype.deleteTestMethodToWorkItemLink = function (project, testName, workItemId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, WorkItem) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(WorkItem);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            testName: testName,
            workItemId: workItemId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "7b0bdee3-a354-47f9-a42c-89018d7808d5", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} testName
    */
    TestApi.prototype.queryTestMethodLinkedWorkItems = function (project, testName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, WorkItem) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(WorkItem);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            testName: testName,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "7b0bdee3-a354-47f9-a42c-89018d7808d5", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} project - Project ID or project name
    * @param {string} workItemCategory
    * @param {string} automatedTestName
    * @param {number} testCaseId
    * @param {Date} maxCompleteDate
    * @param {number} days
    * @param {number} workItemCount
    */
    TestApi.prototype.queryTestResultWorkItems = function (project, workItemCategory, automatedTestName, testCaseId, maxCompleteDate, days, workItemCount) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, WorkItems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(WorkItems);
            }
        };
        var routeValues = {
            project: project
        };
        var queryValues = {
            workItemCategory: workItemCategory,
            automatedTestName: automatedTestName,
            testCaseId: testCaseId,
            maxCompleteDate: maxCompleteDate,
            days: days,
            '$workItemCount': workItemCount,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "Test", "926ff5dc-137f-45f0-bd51-9412fa9810ce", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    return TestApi;
}(basem.ClientApiBase));
exports.TestApi = TestApi;
