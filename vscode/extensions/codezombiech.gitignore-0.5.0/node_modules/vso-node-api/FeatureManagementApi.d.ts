import basem = require('./ClientApiBases');
import VsoBaseInterfaces = require('./interfaces/common/VsoBaseInterfaces');
import FeatureManagementInterfaces = require("./interfaces/FeatureManagementInterfaces");
export interface IFeatureManagementApi extends basem.ClientApiBase {
    getFeature(featureId: string): Promise<FeatureManagementInterfaces.ContributedFeature>;
    getFeatures(): Promise<FeatureManagementInterfaces.ContributedFeature[]>;
    getFeatureState(featureId: string, userScope: string): Promise<FeatureManagementInterfaces.ContributedFeatureState>;
    setFeatureState(feature: FeatureManagementInterfaces.ContributedFeatureState, featureId: string, userScope: string, reason?: string, reasonCode?: string): Promise<FeatureManagementInterfaces.ContributedFeatureState>;
    getFeatureStateForScope(featureId: string, userScope: string, scopeName: string, scopeValue: string): Promise<FeatureManagementInterfaces.ContributedFeatureState>;
    setFeatureStateForScope(feature: FeatureManagementInterfaces.ContributedFeatureState, featureId: string, userScope: string, scopeName: string, scopeValue: string, reason?: string, reasonCode?: string): Promise<FeatureManagementInterfaces.ContributedFeatureState>;
}
export declare class FeatureManagementApi extends basem.ClientApiBase implements IFeatureManagementApi {
    constructor(baseUrl: string, handlers: VsoBaseInterfaces.IRequestHandler[]);
    /**
    * Get a specific feature by its id
    *
    * @param {string} featureId - The contribution id of the feature
    */
    getFeature(featureId: string): Promise<FeatureManagementInterfaces.ContributedFeature>;
    /**
    */
    getFeatures(): Promise<FeatureManagementInterfaces.ContributedFeature[]>;
    /**
    * Get the state of the specified feature for the given user/all-users scope
    *
    * @param {string} featureId - Contribution id of the feature
    * @param {string} userScope - User-Scope at which to get the value. Should be "me" for the current user or "host" for all users.
    */
    getFeatureState(featureId: string, userScope: string): Promise<FeatureManagementInterfaces.ContributedFeatureState>;
    /**
    * Set the state of a feature
    *
    * @param {FeatureManagementInterfaces.ContributedFeatureState} feature - Posted feature state object. Should specify the effective value.
    * @param {string} featureId - Contribution id of the feature
    * @param {string} userScope - User-Scope at which to set the value. Should be "me" for the current user or "host" for all users.
    * @param {string} reason - Reason for changing the state
    * @param {string} reasonCode - Short reason code
    */
    setFeatureState(feature: FeatureManagementInterfaces.ContributedFeatureState, featureId: string, userScope: string, reason?: string, reasonCode?: string): Promise<FeatureManagementInterfaces.ContributedFeatureState>;
    /**
    * Get the state of the specified feature for the given named scope
    *
    * @param {string} featureId - Contribution id of the feature
    * @param {string} userScope - User-Scope at which to get the value. Should be "me" for the current user or "host" for all users.
    * @param {string} scopeName - Scope at which to get the feature setting for (e.g. "project" or "team")
    * @param {string} scopeValue - Value of the scope (e.g. the project or team id)
    */
    getFeatureStateForScope(featureId: string, userScope: string, scopeName: string, scopeValue: string): Promise<FeatureManagementInterfaces.ContributedFeatureState>;
    /**
    * Set the state of a feature at a specific scope
    *
    * @param {FeatureManagementInterfaces.ContributedFeatureState} feature - Posted feature state object. Should specify the effective value.
    * @param {string} featureId - Contribution id of the feature
    * @param {string} userScope - User-Scope at which to set the value. Should be "me" for the current user or "host" for all users.
    * @param {string} scopeName - Scope at which to get the feature setting for (e.g. "project" or "team")
    * @param {string} scopeValue - Value of the scope (e.g. the project or team id)
    * @param {string} reason - Reason for changing the state
    * @param {string} reasonCode - Short reason code
    */
    setFeatureStateForScope(feature: FeatureManagementInterfaces.ContributedFeatureState, featureId: string, userScope: string, scopeName: string, scopeValue: string, reason?: string, reasonCode?: string): Promise<FeatureManagementInterfaces.ContributedFeatureState>;
}
