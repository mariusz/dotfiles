/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// Licensed under the MIT license.  See LICENSE file in the project root for full license information.
var Q = require('q');
var basem = require('./ClientApiBases');
var GalleryInterfaces = require("./interfaces/GalleryInterfaces");
var GalleryApi = (function (_super) {
    __extends(GalleryApi, _super);
    function GalleryApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Gallery-api');
    }
    /**
    * @param {string} extensionId
    * @param {string} accountName
    */
    GalleryApi.prototype.shareExtensionById = function (extensionId, accountName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            extensionId: extensionId,
            accountName: accountName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "1f19631b-a0b4-4a03-89c2-d79785d24360", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} extensionId
    * @param {string} accountName
    */
    GalleryApi.prototype.unshareExtensionById = function (extensionId, accountName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            extensionId: extensionId,
            accountName: accountName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "1f19631b-a0b4-4a03-89c2-d79785d24360", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} accountName
    */
    GalleryApi.prototype.shareExtension = function (publisherName, extensionName, accountName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            accountName: accountName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "a1e66d8f-f5de-4d16-8309-91a4e015ee46", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} accountName
    */
    GalleryApi.prototype.unshareExtension = function (publisherName, extensionName, accountName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            accountName: accountName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "a1e66d8f-f5de-4d16-8309-91a4e015ee46", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} itemId
    * @param {string} installationTarget
    * @param {boolean} testCommerce
    * @param {boolean} isFreeOrTrialInstall
    */
    GalleryApi.prototype.getAcquisitionOptions = function (itemId, installationTarget, testCommerce, isFreeOrTrialInstall) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, acquisitionoption) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(acquisitionoption);
            }
        };
        var routeValues = {
            itemId: itemId
        };
        var queryValues = {
            installationTarget: installationTarget,
            testCommerce: testCommerce,
            isFreeOrTrialInstall: isFreeOrTrialInstall,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "9d0a0105-075e-4760-aa15-8bcf54d1bd7d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.AcquisitionOptions, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.ExtensionAcquisitionRequest} acquisitionRequest
    */
    GalleryApi.prototype.requestAcquisition = function (acquisitionRequest) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, acquisitionrequest) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(acquisitionrequest);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "3adb1f2d-e328-446e-be73-9f6d98071c45", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionAcquisitionRequest, responseTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionAcquisitionRequest, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, acquisitionRequest, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} version
    * @param {string} assetType
    * @param {string} accountToken
    * @param {boolean} acceptDefault
    */
    GalleryApi.prototype.getAssetByName = function (publisherName, extensionName, version, assetType, accountToken, acceptDefault) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, assetbyname) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(assetbyname);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            version: version,
            assetType: assetType
        };
        var queryValues = {
            accountToken: accountToken,
            acceptDefault: acceptDefault,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "7529171f-a002-4180-93ba-685f358a0482", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} extensionId
    * @param {string} version
    * @param {string} assetType
    * @param {string} accountToken
    * @param {boolean} acceptDefault
    */
    GalleryApi.prototype.getAsset = function (extensionId, version, assetType, accountToken, acceptDefault) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, asset) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(asset);
            }
        };
        var routeValues = {
            extensionId: extensionId,
            version: version,
            assetType: assetType
        };
        var queryValues = {
            accountToken: accountToken,
            acceptDefault: acceptDefault,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "5d545f3d-ef47-488b-8be3-f5ee1517856c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} version
    * @param {string} assetType
    * @param {string} accountToken
    */
    GalleryApi.prototype.getAssetAuthenticated = function (publisherName, extensionName, version, assetType, accountToken) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, authenticatedasset) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(authenticatedasset);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            version: version,
            assetType: assetType
        };
        var queryValues = {
            accountToken: accountToken,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "506aff36-2622-4f70-8063-77cce6366d20", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} azurePublisherId
    */
    GalleryApi.prototype.associateAzurePublisher = function (publisherName, azurePublisherId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, azurepublisher) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(azurepublisher);
            }
        };
        var routeValues = {
            publisherName: publisherName
        };
        var queryValues = {
            azurePublisherId: azurePublisherId,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "efd202a6-9d87-4ebc-9229-d2b8ae2fdb6d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    */
    GalleryApi.prototype.queryAssociatedAzurePublisher = function (publisherName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, azurepublisher) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(azurepublisher);
            }
        };
        var routeValues = {
            publisherName: publisherName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "efd202a6-9d87-4ebc-9229-d2b8ae2fdb6d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} languages
    */
    GalleryApi.prototype.getCategories = function (languages) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, categories) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(categories);
            }
        };
        var routeValues = {};
        var queryValues = {
            languages: languages,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "e0a5a71e-3ac3-43a0-ae7d-0bb5c3046a2a", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} version
    */
    GalleryApi.prototype.getCertificate = function (publisherName, extensionName, version) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, certificate) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(certificate);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            version: version
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "e905ad6a-3f1f-4d08-9f6d-7d357ff8b7d0", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.ExtensionQuery} extensionQuery
    * @param {string} accountToken
    */
    GalleryApi.prototype.queryExtensions = function (extensionQuery, accountToken) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, extensionquery) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extensionquery);
            }
        };
        var routeValues = {};
        var queryValues = {
            accountToken: accountToken,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "eb9d5ee1-6d43-456b-b80e-8a96fbc014b6", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionQuery, responseTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionQueryResult, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, extensionQuery, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage
    */
    GalleryApi.prototype.createExtension = function (extensionPackage) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, extensionPackage, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} extensionId
    * @param {string} version
    */
    GalleryApi.prototype.deleteExtensionById = function (extensionId, version) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            extensionId: extensionId
        };
        var queryValues = {
            version: version,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} extensionId
    * @param {string} version
    * @param {GalleryInterfaces.ExtensionQueryFlags} flags
    */
    GalleryApi.prototype.getExtensionById = function (extensionId, version, flags) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        };
        var routeValues = {
            extensionId: extensionId
        };
        var queryValues = {
            version: version,
            flags: flags,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage
    * @param {string} extensionId
    */
    GalleryApi.prototype.updateExtensionById = function (extensionPackage, extensionId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        };
        var routeValues = {
            extensionId: extensionId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, extensionPackage, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage
    * @param {string} publisherName
    */
    GalleryApi.prototype.createExtensionWithPublisher = function (extensionPackage, publisherName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        };
        var routeValues = {
            publisherName: publisherName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, extensionPackage, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} version
    */
    GalleryApi.prototype.deleteExtension = function (publisherName, extensionName, version) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        var queryValues = {
            version: version,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} version
    * @param {GalleryInterfaces.ExtensionQueryFlags} flags
    * @param {string} accountToken
    */
    GalleryApi.prototype.getExtension = function (publisherName, extensionName, version, flags, accountToken) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        var queryValues = {
            version: version,
            flags: flags,
            accountToken: accountToken,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.ExtensionPackage} extensionPackage
    * @param {string} publisherName
    * @param {string} extensionName
    */
    GalleryApi.prototype.updateExtension = function (extensionPackage, publisherName, extensionName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, extensionPackage, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.AzureRestApiRequestModel} azureRestApiRequestModel
    */
    GalleryApi.prototype.extensionValidator = function (azureRestApiRequestModel) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "05e8a5e1-8c59-4c2c-8856-0ff087d1a844", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, azureRestApiRequestModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} version
    * @param {string} accountToken
    * @param {boolean} acceptDefault
    */
    GalleryApi.prototype.getPackage = function (publisherName, extensionName, version, accountToken, acceptDefault) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, _package) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(_package);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            version: version
        };
        var queryValues = {
            accountToken: accountToken,
            acceptDefault: acceptDefault,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "7cb576f8-1cae-4c4b-b7b1-e4af5759e965", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {string} extensionName
    * @param {string} version
    * @param {string} assetType
    * @param {string} assetToken
    * @param {string} accountToken
    * @param {boolean} acceptDefault
    */
    GalleryApi.prototype.getAssetWithToken = function (publisherName, extensionName, version, assetType, assetToken, accountToken, acceptDefault) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, privateasset) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(privateasset);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            version: version,
            assetType: assetType,
            assetToken: assetToken
        };
        var queryValues = {
            accountToken: accountToken,
            acceptDefault: acceptDefault,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "364415a1-0077-4a41-a7a0-06edd4497492", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.PublisherQuery} publisherQuery
    */
    GalleryApi.prototype.queryPublishers = function (publisherQuery) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, publisherquery) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(publisherquery);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "2ad6ee0a-b53f-4034-9d1d-d009fda1212e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.PublisherQuery, responseTypeMetadata: GalleryInterfaces.TypeInfo.PublisherQueryResult, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, publisherQuery, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.Publisher} publisher
    */
    GalleryApi.prototype.createPublisher = function (publisher) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, publisher) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(publisher);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.Publisher, responseTypeMetadata: GalleryInterfaces.TypeInfo.Publisher, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, publisher, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    */
    GalleryApi.prototype.deletePublisher = function (publisherName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            publisherName: publisherName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} publisherName
    * @param {number} flags
    */
    GalleryApi.prototype.getPublisher = function (publisherName, flags) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, publisher) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(publisher);
            }
        };
        var routeValues = {
            publisherName: publisherName
        };
        var queryValues = {
            flags: flags,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.Publisher, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.Publisher} publisher
    * @param {string} publisherName
    */
    GalleryApi.prototype.updatePublisher = function (publisher, publisherName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, publisher) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(publisher);
            }
        };
        var routeValues = {
            publisherName: publisherName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.Publisher, responseTypeMetadata: GalleryInterfaces.TypeInfo.Publisher, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, publisher, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Returns a list of reviews associated with an extension
    *
    * @param {string} publisherName - Name of the publisher who published the extension
    * @param {string} extensionName - Name of the extension
    * @param {number} count - Number of reviews to retrieve (defaults to 5)
    * @param {GalleryInterfaces.ReviewFilterOptions} filterOptions - FilterOptions to filter out empty reviews etcetera, defaults to none
    * @param {Date} beforeDate - Use if you want to fetch reviews older than the specified date, defaults to null
    * @param {Date} afterDate - Use if you want to fetch reviews newer than the specified date, defaults to null
    */
    GalleryApi.prototype.getReviews = function (publisherName, extensionName, count, filterOptions, beforeDate, afterDate) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, review) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(review);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        var queryValues = {
            count: count,
            filterOptions: filterOptions,
            beforeDate: beforeDate,
            afterDate: afterDate,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "5b3f819f-f247-42ad-8c00-dd9ab9ab246d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.ReviewsResult, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Creates a new review for an extension
    *
    * @param {GalleryInterfaces.Review} review - Review to be created for the extension
    * @param {string} pubName - Name of the publisher who published the extension
    * @param {string} extName - Name of the extension
    */
    GalleryApi.prototype.createReview = function (review, pubName, extName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, review) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(review);
            }
        };
        var routeValues = {
            pubName: pubName,
            extName: extName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.Review, responseTypeMetadata: GalleryInterfaces.TypeInfo.Review, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, review, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * Deletes a review
    *
    * @param {string} pubName - Name of the pubilsher who published the extension
    * @param {string} extName - Name of the extension
    * @param {number} reviewId - Id of the review which needs to be updated
    */
    GalleryApi.prototype.deleteReview = function (pubName, extName, reviewId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            pubName: pubName,
            extName: extName,
            reviewId: reviewId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * Updates or Flags a review
    *
    * @param {GalleryInterfaces.ReviewPatch} reviewPatch - ReviewPatch object which contains the changes to be applied to the review
    * @param {string} pubName - Name of the pubilsher who published the extension
    * @param {string} extName - Name of the extension
    * @param {number} reviewId - Id of the review which needs to be updated
    */
    GalleryApi.prototype.updateReview = function (reviewPatch, pubName, extName, reviewId) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, review) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(review);
            }
        };
        var routeValues = {
            pubName: pubName,
            extName: extName,
            reviewId: reviewId
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "e6e85b9d-aa70-40e6-aa28-d0fbf40b91a3", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.ReviewPatch, responseTypeMetadata: GalleryInterfaces.TypeInfo.ReviewPatch, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, reviewPatch, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.ExtensionCategory} category
    */
    GalleryApi.prototype.createCategory = function (category) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, securedCategorie) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(securedCategorie);
            }
        };
        var routeValues = {};
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "476531a3-7024-4516-a76a-ed64d3008ad6", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, category, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {string} keyType
    * @param {number} expireCurrentSeconds
    */
    GalleryApi.prototype.generateKey = function (keyType, expireCurrentSeconds) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            keyType: keyType
        };
        var queryValues = {
            expireCurrentSeconds: expireCurrentSeconds,
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "92ed5cf4-c38b-465a-9059-2f2fb7c624b5", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    /**
    * @param {string} keyType
    */
    GalleryApi.prototype.getSigningKey = function (keyType) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode, signingkey) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(signingkey);
            }
        };
        var routeValues = {
            keyType: keyType
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "92ed5cf4-c38b-465a-9059-2f2fb7c624b5", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
        return deferred.promise;
    };
    /**
    * @param {GalleryInterfaces.ExtensionStatisticUpdate} extensionStatisticsUpdate
    * @param {string} publisherName
    * @param {string} extensionName
    */
    GalleryApi.prototype.updateExtensionStatistics = function (extensionStatisticsUpdate, publisherName, extensionName) {
        var _this = this;
        var deferred = Q.defer();
        var onResult = function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        };
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        this.vsoClient.getVersioningData("3.0-preview.1", "gallery", "a0ea3204-11e9-422d-a9ca-45851cc41400", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionStatisticUpdate, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, extensionStatisticsUpdate, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
        return deferred.promise;
    };
    return GalleryApi;
}(basem.ClientApiBase));
exports.GalleryApi = GalleryApi;
