/// <reference types="node" />
import http = require("http");
import https = require("https");
import Config = require("./Config");
import Context = require("./Context");
import Contracts = require("../Declarations/Contracts");
import Channel = require("./Channel");
declare class Client {
    private _telemetryProcessors;
    config: Config;
    context: Context;
    commonProperties: {
        [key: string]: string;
    };
    channel: Channel;
    /**
     * Constructs a new client of the client
     * @param iKey the instrumentation key to use (read from environment variable if not specified)
     */
    constructor(iKey?: string);
    /**
     * Log a user action or other occurrence.
     * @param name              A string to identify this event in the portal.
     * @param properties        map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
     * @param measurements      map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
     * @param tagOverrides      the context tags to use for this telemetry which overwrite default context values
     * @param contextObjects    map[string, contextObject] - An event-specific context that will be passed to telemetry processors handling this event before it is sent. For a context spanning your entire operation, consider appInsights.getCorrelationContext
     */
    trackEvent(name: string, properties?: {
        [key: string]: string;
    }, measurements?: {
        [key: string]: number;
    }, tagOverrides?: {
        [key: string]: string;
    }, contextObjects?: {
        [name: string]: any;
    }): void;
    /**
     * Log a trace message
     * @param message        A string to identify this event in the portal.
     * @param properties     map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
     * @param tagOverrides   the context tags to use for this telemetry which overwrite default context values
     * @param contextObjects map[string, contextObject] - An event-specific context that will be passed to telemetry processors handling this event before it is sent. For a context spanning your entire operation, consider appInsights.getCorrelationContext
     */
    trackTrace(message: string, severityLevel?: Contracts.SeverityLevel, properties?: {
        [key: string]: string;
    }, tagOverrides?: {
        [key: string]: string;
    }, contextObjects?: {
        [name: string]: any;
    }): void;
    /**
     * Log an exception you have caught.
     * @param   exception   An Error from a catch clause, or the string error message.
     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
     * @param   tagOverrides the context tags to use for this telemetry which overwrite default context values
     * @param   contextObjects        map[string, contextObject] - An event-specific context that will be passed to telemetry processors handling this event before it is sent. For a context spanning your entire operation, consider appInsights.getCorrelationContext
     */
    trackException(exception: Error, properties?: {
        [key: string]: string;
    }, measurements?: {
        [key: string]: number;
    }, tagOverrides?: {
        [key: string]: string;
    }, contextObjects?: {
        [name: string]: any;
    }): void;
    /**
     * Log a numeric value that is not associated with a specific event. Typically used to send regular reports of performance indicators.
     * To send a single measurement, use just the first two parameters. If you take measurements very frequently, you can reduce the
     * telemetry bandwidth by aggregating multiple measurements and sending the resulting average at intervals.
     *
     * @param name              A string that identifies the metric.
     * @param value             The value of the metric
     * @param count             the number of samples used to get this value
     * @param min               the min sample for this set
     * @param max               the max sample for this set
     * @param stdDev            the standard deviation of the set
     * @param properties        map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
     * @param tagOverrides      the context tags to use for this telemetry which overwrite default context values
     * @param contextObjects    map[string, contextObject] - An event-specific context that will be passed to telemetry processors handling this event before it is sent. For a context spanning your entire operation, consider appInsights.getCorrelationContext
     */
    trackMetric(name: string, value: number, count?: number, min?: number, max?: number, stdDev?: number, properties?: {
        [key: string]: string;
    }, tagOverrides?: {
        [key: string]: string;
    }, contextObjects?: {
        [name: string]: any;
    }): void;
    /**
     * Log an incoming request. This method will synchronously record the event, rather than waiting for response send.
     * Use this when you need to perform custom logic to record the duration of the request.
     *
     * This call will also add outgoing headers to the supplied response object for correlating telemetry across different services.
     * @param request              http.ServerRequest - the request object to monitor
     * @param response             http.ServerResponse - the response object to monitor
     * @param elapsedMilliseconds  number - the elapsed time taken to handle this request in milliseconds
     * @param properties           map[string, string] - additional data used for filtering in the portal. Defaults to empty.
     * @param error                any - an object indicating the request was unsuccessful. This object will be recorded with the request telemetry.
     */
    trackRequestSync(request: http.ServerRequest, response: http.ServerResponse, ellapsedMilliseconds?: number, properties?: {
        [key: string]: string;
    }, error?: any): void;
    /**
     * Log an incoming request. Use this at the beginning of your request handling code.
     * This method will monitor a supplied response object and send telemetry after the response is sent,
     * recording elapsed time from the start of this call to the request being sent back to the user.
     *
     * This call will also add outgoing headers to the supplied response object for correlating telemetry across different services.
     * @param request     http.ServerRequest - the request object to monitor
     * @param response    http.ServerResponse - the response object to monitor
     * @param properties  map[string, string] - additional data used for filtering in the portal. Defaults to empty.
     */
    trackRequest(request: http.ServerRequest, response: http.ServerResponse, properties?: {
        [key: string]: string;
    }): void;
    /**
     * Log an outgoing ClientRequest dependency. This is a helper method around trackDependency for common outgoing HTTP calls.
     * Use this at the beginning of your request.
     *
     * This call will also add outgoing headers to your request for correlating telemetry across different services.
     * @param request    string | http.RequestOptions  | https.RequestOptions - the options used for this request
     * @param response   http.ClientRequest - the outgoing request to monitor
     * @param properties map[string, string] - additional data used for filtering in the portal. Defaults to empty.
     */
    trackDependencyRequest(requestOptions: string | http.RequestOptions | https.RequestOptions, request: http.ClientRequest, properties?: {
        [key: string]: string;
    }): void;
    /**
     * Log a dependency. Note that the default client will attempt collect dependencies automatically so only use this for dependencies
     * that aren't automatically captured or if you've disabled custom dependencies.
     *
     * @param name                  String that identifies the dependency
     * @param commandName           String of the name of the command made against the dependency
     * @param elapsedTimeMs         Number for elapsed time in milliseconds of the command made against the dependency
     * @param success               Boolean which indicates success
     * @param dependencyTypeName    String which denotes dependency type. Defaults to null.
     * @param properties            map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
     * @param async                 boolean - never used
     * @param target                String of the target host of the dependency
     * @param tagOverrides          the context tags to use for this telemetry which overwrite default context values
     * @param contextObjects        map[string, contextObject] - An event-specific context that will be passed to telemetry processors handling this event before it is sent. For a context spanning your entire operation, consider appInsights.getCorrelationContext
     */
    trackDependency(name: string, commandName: string, elapsedTimeMs: number, success: boolean, dependencyTypeName?: string, properties?: {}, async?: boolean, target?: string, tagOverrides?: {
        [key: string]: string;
    }, contextObjects?: {
        [name: string]: any;
    }): void;
    /**
     * Immediately send all queued telemetry.
     */
    sendPendingData(callback?: (v: string) => void): void;
    getEnvelope(data: Contracts.Data<Contracts.Domain>, tagOverrides?: {
        [key: string]: string;
    }): Contracts.Envelope;
    /**
     * Generic track method for all telemetry types
     * @param data the telemetry to send
     * @param tagOverrides the context tags to use for this telemetry which overwrite default context values
     */
    track(data: Contracts.Data<Contracts.Domain>, tagOverrides?: {
        [key: string]: string;
    }, contextObjects?: {
        [name: string]: any;
    }): void;
    /**
     * Adds telemetry processor to the collection. Telemetry processors will be called one by one
     * before telemetry item is pushed for sending and in the order they were added.
     *
     * @param telemetryProcessor function, takes Envelope, and optional context object and returns boolean
     */
    addTelemetryProcessor(telemetryProcessor: (envelope: Contracts.Envelope, contextObjects?: {
        [name: string]: any;
    }) => boolean): void;
    clearTelemetryProcessors(): void;
    private runTelemetryProcessors(envelope, contextObjects);
    private getTags(tagOverrides?);
    /**
     * Sets the client app version to the context tags.
     * @param version, takes the host app version.
     */
    overrideApplicationVersion(version: string): void;
}
export = Client;
