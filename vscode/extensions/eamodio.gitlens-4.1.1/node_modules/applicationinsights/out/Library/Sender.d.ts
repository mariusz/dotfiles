/// <reference types="node" />
declare class Sender {
    private static TAG;
    static WAIT_BETWEEN_RESEND: number;
    static TEMPDIR: string;
    private _getUrl;
    private _onSuccess;
    private _onError;
    private _enableOfflineMode;
    protected _resendInterval: number;
    constructor(getUrl: () => string, onSuccess?: (response: string) => void, onError?: (error: Error) => void);
    /**
    * Enable or disable offline mode
    */
    setOfflineMode(value: boolean, resendInterval?: number): void;
    send(payload: Buffer, callback?: (string) => void): void;
    saveOnCrash(payload: string): void;
    private _confirmDirExists(direcotry, callback);
    /**
     * Stores the payload as a json file on disk in the temp direcotry
     */
    private _storeToDisk(payload);
    /**
     * Stores the payload as a json file on disk using sync file operations
     * this is used when storing data before crashes
     */
    private _storeToDiskSync(payload);
    /**
     * Check for temp telemetry files
     * reads the first file if exist, deletes it and tries to send its load
     */
    private _sendFirstFileOnDisk();
    private _onErrorHelper(error);
}
export = Sender;
