"use strict";
var https = require("https");
var http = require("http");
var url = require("url");
var CorrelationIdManager = (function () {
    function CorrelationIdManager() {
    }
    CorrelationIdManager.queryCorrelationId = function (endpointBase, instrumentationKey, correlationIdRetryInterval, callback) {
        // GET request to `${this.endpointBase}/api/profiles/${this.instrumentationKey}/appId`
        // If it 404s, the iKey is bad and we should give up
        // If it fails otherwise, try again later
        var appIdUrlString = endpointBase + "/api/profiles/" + instrumentationKey + "/appId";
        var appIdUrl = url.parse(appIdUrlString);
        if (CorrelationIdManager.completedLookups.hasOwnProperty(appIdUrlString)) {
            callback(CorrelationIdManager.completedLookups[appIdUrlString]);
            return;
        }
        else if (CorrelationIdManager.pendingLookups[appIdUrlString]) {
            CorrelationIdManager.pendingLookups[appIdUrlString].push(callback);
            return;
        }
        CorrelationIdManager.pendingLookups[appIdUrlString] = [callback];
        var requestOptions = {
            protocol: appIdUrl.protocol,
            hostname: appIdUrl.host,
            path: appIdUrl.pathname,
            method: 'GET',
            // Ensure this request is not captured by auto-collection.
            // Note: we don't refer to the property in ClientRequestParser because that would cause a cyclical dependency
            disableAppInsightsAutoCollection: true
        };
        var httpRequest = appIdUrl.protocol === 'https:' ? https.request : http.request;
        var fetchAppId = function () {
            if (!CorrelationIdManager.pendingLookups[appIdUrlString]) {
                // This query has been cancelled.
                return;
            }
            var req = httpRequest(requestOptions, function (res) {
                if (res.statusCode === 200) {
                    // Success; extract the appId from the body
                    var appId_1 = "";
                    res.setEncoding("utf-8");
                    res.on('data', function (data) {
                        appId_1 += data;
                    });
                    res.on('end', function () {
                        var result = CorrelationIdManager.correlationIdPrefix + appId_1;
                        CorrelationIdManager.completedLookups[appIdUrlString] = result;
                        if (CorrelationIdManager.pendingLookups[appIdUrlString]) {
                            CorrelationIdManager.pendingLookups[appIdUrlString].forEach(function (cb) { return cb(result); });
                        }
                        delete CorrelationIdManager.pendingLookups[appIdUrlString];
                    });
                }
                else if (res.statusCode >= 400 && res.statusCode < 500) {
                    // Not found, probably a bad key. Do not try again.
                    CorrelationIdManager.completedLookups[appIdUrlString] = undefined;
                    delete CorrelationIdManager.pendingLookups[appIdUrlString];
                }
                else {
                    // Retry after timeout.
                    setTimeout(fetchAppId, correlationIdRetryInterval);
                }
            });
            if (req) {
                req.on('error', function () {
                    // Unable to contact endpoint.
                    // Do nothing for now.
                });
                req.end();
            }
        };
        setTimeout(fetchAppId, 0);
    };
    CorrelationIdManager.cancelCorrelationIdQuery = function (endpointBase, instrumentationKey, callback) {
        var appIdUrlString = endpointBase + "/api/profiles/" + instrumentationKey + "/appId";
        var pendingLookups = CorrelationIdManager.pendingLookups[appIdUrlString];
        if (pendingLookups) {
            CorrelationIdManager.pendingLookups[appIdUrlString] = pendingLookups.filter(function (cb) { return cb != callback; });
            if (CorrelationIdManager.pendingLookups[appIdUrlString].length == 0) {
                delete CorrelationIdManager.pendingLookups[appIdUrlString];
            }
        }
    };
    return CorrelationIdManager;
}());
CorrelationIdManager.correlationIdPrefix = "cid-v1:";
// To avoid extraneous HTTP requests, we maintain a queue of callbacks waiting on a particular appId lookup,
// as well as a cache of completed lookups so future requests can be resolved immediately.
CorrelationIdManager.pendingLookups = {};
CorrelationIdManager.completedLookups = {};
module.exports = CorrelationIdManager;
//# sourceMappingURL=CorrelationIdManager.js.map