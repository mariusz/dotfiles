/// <reference types="node" />
import http = require("http");
import Client = require("../Library/Client");
import ServerRequestParser = require("./ServerRequestParser");
declare class AutoCollectServerRequests {
    static INSTANCE: AutoCollectServerRequests;
    private _client;
    private _isEnabled;
    private _isInitialized;
    private _isAutoCorrelating;
    constructor(client: Client);
    enable(isEnabled: boolean): void;
    useAutoCorrelation(isEnabled: boolean): void;
    isInitialized(): boolean;
    isAutoCorrelating(): boolean;
    private _generateCorrelationContext(requestParser);
    private _initialize();
    /**
     * Tracks a request synchronously (doesn't wait for response 'finish' event)
     */
    static trackRequestSync(client: Client, request: http.ServerRequest, response: http.ServerResponse, ellapsedMilliseconds?: number, properties?: {
        [key: string]: string;
    }, error?: any): void;
    /**
     * Tracks a request by listening to the response 'finish' event
     */
    static trackRequest(client: Client, request: http.ServerRequest, response: http.ServerResponse, properties?: {
        [key: string]: string;
    }, _requestParser?: ServerRequestParser): void;
    /**
     * Add the target correlationId to the response headers, if not already provided.
     */
    private static addResponseCorrelationIdHeader(client, response);
    private static endRequest(client, requestParser, request, response, ellapsedMilliseconds?, properties?, error?);
    dispose(): void;
}
export = AutoCollectServerRequests;
