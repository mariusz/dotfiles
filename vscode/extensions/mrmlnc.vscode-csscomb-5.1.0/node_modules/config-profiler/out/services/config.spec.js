'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert = require("assert");
const proxyquire = require("proxyquire");
const optionsManager = require("../managers/options");
describe('Services â†’ Config', () => {
    let service;
    const cache = new Map();
    const cwd = process.cwd().replace(/\\/g, '/');
    before(() => {
        const pathManager = proxyquire('../managers/path', {
            os: {
                homedir: () => `${cwd}/fixtures/scanner/home`
            }
        });
        service = proxyquire('./config', {
            '../managers/path': pathManager
        });
    });
    describe('.include', () => {
        it('Should return config for filepath', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const options = optionsManager.prepare({
                predefinedConfigs: {
                    default: { last: 3, default: true }
                }
            });
            const filepath = './fixtures/extends/one.json';
            const expected = { last: 0, three: true, two: true, one: true, default: true };
            const actual = yield service.include(cache, filepath, options);
            assert.deepEqual(actual, expected);
        }));
        it('Should return config without expand "extends" property', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const options = optionsManager.prepare({ props: { extends: null } });
            const filepath = './fixtures/extends/one.json';
            const expected = { extends: './two.json', last: 0, one: true };
            const actual = yield service.include(cache, filepath, options);
            assert.deepEqual(actual, expected);
        }));
        it('Should throw error if path does not a exist', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const options = optionsManager.prepare({});
            const filepath = './fixtures/extends/error.json';
            try {
                yield service.include(cache, filepath, options);
                throw new Error('Magic? There must be an error.');
            }
            catch (err) {
                assert.equal(err.message, `A file that does not exist: ${cwd}/fixtures/extends/four.json`);
            }
        }));
    });
});
