{
  "_args": [
    [
      {
        "raw": "split@^1.0.0",
        "scope": null,
        "escapedName": "split",
        "name": "split",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\albin\\Documents\\vscode-extensions\\vscode-gitblame\\node_modules\\split-transform-stream"
    ]
  ],
  "_from": "split@>=1.0.0 <2.0.0",
  "_id": "split@1.0.0",
  "_inCache": true,
  "_location": "/split",
  "_npmUser": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "_npmVersion": "1.4.28",
  "_phantomChildren": {},
  "_requested": {
    "raw": "split@^1.0.0",
    "scope": null,
    "escapedName": "split",
    "name": "split",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/split-transform-stream"
  ],
  "_resolved": "https://registry.npmjs.org/split/-/split-1.0.0.tgz",
  "_shasum": "c4395ce683abcd254bc28fe1dabb6e5c27dcffae",
  "_shrinkwrap": null,
  "_spec": "split@^1.0.0",
  "_where": "C:\\Users\\albin\\Documents\\vscode-extensions\\vscode-gitblame\\node_modules\\split-transform-stream",
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://bit.ly/dominictarr"
  },
  "bugs": {
    "url": "https://github.com/dominictarr/split/issues"
  },
  "dependencies": {
    "through": "2"
  },
  "description": "split a Text Stream into a Line Stream",
  "devDependencies": {
    "asynct": "*",
    "event-stream": "~3.0.2",
    "it-is": "1",
    "stream-spec": "~0.2",
    "string-to-stream": "~1.0.0",
    "ubelt": "~2.9"
  },
  "directories": {},
  "dist": {
    "shasum": "c4395ce683abcd254bc28fe1dabb6e5c27dcffae",
    "tarball": "https://registry.npmjs.org/split/-/split-1.0.0.tgz"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "08b99aafdd40ec84aa88ac29eb808c70a2ecb549",
  "homepage": "http://github.com/dominictarr/split",
  "license": "MIT",
  "maintainers": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "name": "split",
  "optionalDependencies": {},
  "readme": "# Split (matcher)\n\n[![build status](https://secure.travis-ci.org/dominictarr/split.png)](http://travis-ci.org/dominictarr/split)\n\nBreak up a stream and reassemble it so that each line is a chunk. matcher may be a `String`, or a `RegExp` \n\nExample, read every line in a file ...\n\n``` js\n  fs.createReadStream(file)\n    .pipe(split())\n    .on('data', function (line) {\n      //each chunk now is a seperate line!\n    })\n\n```\n\n`split` takes the same arguments as `string.split` except it defaults to '/\\r?\\n/' instead of ',', and the optional `limit` paremeter is ignored.\n[String#split](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/split)\n\n`split` takes an optional options object on it's third argument.\n\n``` js\n  split(matcher, mapper, options)\n```\n\nValid options:\n\n* maxLength - The maximum buffer length without seeing a newline or `matcher`,\n  if a single line exceeds this, the split stream will emit an error.\n\n``` js\n  split(JSON.parse, null, { maxLength: 2})\n```\n\n* trailing - By default the last buffer not delimited by a newline or `matcher` will be emitted. To prevent this set `options.trailing` to `false`.\n\n``` js\n  split(JSON.parse, null, { trailing: false })\n```\n\n## keep matched splitter\n\nAs with `Array#split`, if you split by a regular expression with a matching group,\nthe matches will be retained in the collection.\n\n```\nstdin\n.pipe(split(/(\\r?\\n)/))\n... //lines + separators.\n```\n\n\n# NDJ - Newline Delimited Json\n\n`split` accepts a function which transforms each line.\n\n``` js\nfs.createReadStream(file)\n  .pipe(split(JSON.parse))\n  .on('data', function (obj) {\n    //each chunk now is a a js object\n  })\n  .on('error', function (err) {\n    //syntax errors will land here\n    //note, this ends the stream.\n  })\n```\n\n# License\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/split.git"
  },
  "scripts": {
    "test": "asynct test/"
  },
  "version": "1.0.0"
}
